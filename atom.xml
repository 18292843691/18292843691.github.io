<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dayDream&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http:%5C%5Chexin.life/"/>
  <updated>2017-10-10T16:23:56.750Z</updated>
  <id>http:\\hexin.life/</id>
  
  <author>
    <name>白日梦想家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 的数组(未整理)</title>
    <link href="http:%5C%5Chexin.life/2017/10/11/title-31/"/>
    <id>http:\\hexin.life/2017/10/11/title-31/</id>
    <published>2017-10-10T16:23:50.000Z</published>
    <updated>2017-10-10T16:23:56.750Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="js-数组"><a href="#js-数组" class="headerlink" title="js 数组"></a>js 数组</h1><ul>
<li>数组是类似列表的对象，在原型中提供了遍历以及改变其中元素的很多方法。 数组的长度及其中元素的类型都是不固定的。因为数组的长度可读可写，有时数组中的元素也不是在连续的位置，所以JavaScript 数组不一定是密集的。通常情况下，这是一些方便的特性；如果这些特性不适用于你的特定使用场景，你可以考虑使用固定类型数组。</li>
<li>向 Array 构造函数传入一个在 0 到 2^32-1 之间的整数，将返回一个以此为长度的数组对象。通过 length 属性可以访问这个值。如果传入的参数不是有效的数值，则抛出 RangeError 异常。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">arr = [1,2,3]</div><div class="line"></div><div class="line">arr[1] === arr[&apos;1&apos;] // arr[01] === arr[&apos;1&apos;]</div><div class="line">// true</div><div class="line">arr[01] === arr[&apos;01&apos;]</div><div class="line">// false</div><div class="line"></div><div class="line">1 会被 Javascript 引擎自动调用 toString 转换成一个 string 类型的变量</div></pre></td></tr></table></figure>
<ul>
<li>当你在 array 上使用一个合法的数组下标，而且该下标超出了当前数组的大小的时候，引擎会根据其值自动更新 array 的length属性</li>
<li>减小 array 的length属性会删掉超出的元素</li>
</ul>
<h2 id="使用正则匹配的结果来创建数组"><a href="#使用正则匹配的结果来创建数组" class="headerlink" title="使用正则匹配的结果来创建数组"></a>使用正则匹配的结果来创建数组</h2><p>正则表达式与字符串之间的匹配结果可以创建一个数组。这个数组包含了正则匹配的属性与匹配结果。<figure class="highlight plain"><figcaption><span>与```String.replace```的返回值就是这样的数组。下面的例子可以帮助理解这些属性和元素。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>// Match one d followed by one or more b’s followed by one d<br>// Remember matched b’s and the following d<br>// 忽略大小写</p>
<p>myRe = /d(b+)(d)/i;<br>myArray = myRe.exec(“cdbBdbsbz”);<br>// [“dbBd”, “bB”, “d”, index: 1, input: “cdbBdbsbz”]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">该正则匹配返回的属性/元素列表：</div></pre></td></tr></table></figure></p>
<p>Property/Element    说明                                                                      例子<br>input               原始的输入字符串，只读属性。                                              cdbBdbsbz<br>index               匹配的子字符串的第一个字符在原始字符串中的位置（从0开始的索引，只读）。   1<br>[0]                 最后一次匹配的元素,只读。   dbBd<br>[1], …[n]         出现在正则匹配中的子匹配（如果有）。                                      [1]: bB</p>
<pre><code>[2]: d
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">方法:  For methods available on Array instances, see Methods of Array instances.</div><div class="line"></div><div class="line">- Array.from()</div><div class="line">从类数组或者迭代对象（iterable object）中创建一个新的数组实例。</div><div class="line">- Array.isArray()</div><div class="line">假如一个变量是数组则返回true，否则返回false。</div><div class="line"></div><div class="line">## 数组实例</div><div class="line">所有数组实例继承自 Array.prototype。Array 构造函数的原型对象是可修改的，其会影响所有的数组实例。</div><div class="line"></div><div class="line">### 属性</div><div class="line">- Array.prototype.constructor</div><div class="line">所有的数组实例都继承了这个属性，它的值就是 Array，表明了所有的数组都是由 Array 构造出来的。</div><div class="line">- Array.prototype.length</div><div class="line">因为 Array.prototype 也是个数组，所以它也有 length 属性，这个值为 0，因为它是个空数组</div><div class="line"></div><div class="line"></div><div class="line">### 方法</div><div class="line">1. Mutator 方法</div><div class="line">下面的这些方法会改变调用它们的对象自身的值：</div><div class="line"></div><div class="line">- Array.prototype.copyWithin()</div><div class="line">在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。</div><div class="line">- Array.prototype.fill()</div><div class="line">将数组中指定区间的所有元素的值，都替换成某个固定的值。</div><div class="line">- Array.prototype.pop()</div><div class="line">删除数组的最后一个元素，并返回这个元素。</div><div class="line">- Array.prototype.push()</div><div class="line">在数组的末尾增加一个或多个元素，并返回数组的新长度。</div><div class="line">- Array.prototype.reverse()</div><div class="line">颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。</div><div class="line">- Array.prototype.shift()</div><div class="line">删除数组的第一个元素，并返回这个元素。</div><div class="line">- Array.prototype.sort() =&gt; v8 中，对于长度小于 22 的数组进行插入排序， 大于 22 的数组进行快速排序</div><div class="line">对数组元素进行排序，并返回当前数组。</div><div class="line">- Array.prototype.splice()</div><div class="line">在任意的位置给数组添加或删除任意个元素。</div><div class="line">- Array.prototype.unshift()</div><div class="line">在数组的开头增加一个或多个元素，并返回数组的新长度。</div><div class="line"></div><div class="line">2. Accessor 方法</div><div class="line">下面的这些方法绝对不会改变调用它们的对象的值，只会返回一个新的数组或者返回一个其它的期望值。</div><div class="line"></div><div class="line">- Array.prototype.concat()</div><div class="line">返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。</div><div class="line">- Array.prototype.includes()</div><div class="line">判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。</div><div class="line">- Array.prototype.join()</div><div class="line">连接所有数组元素组成一个字符串。</div><div class="line">- Array.prototype.slice()</div><div class="line">抽取当前数组中的一段元素组合成一个新数组。</div><div class="line">- Array.prototype.toString()</div><div class="line">返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 Object.prototype.toString() 方法。</div><div class="line">- Array.prototype.toLocaleString()</div><div class="line">返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的 Object.prototype.toLocaleString() 方法。</div><div class="line">- Array.prototype.indexOf()</div><div class="line">返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</div><div class="line">- Array.prototype.lastIndexOf()</div><div class="line">返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1。</div><div class="line"></div><div class="line">3. Iteration 方法 * 代表处于实验阶段</div><div class="line">在下面的众多遍历方法中，有很多方法都需要指定一个回调函数作为参数。在回调函数执行之前，数组的长度会被缓存在某个地方，所以，如果你在回调函数中为当前数组添加了新的元素，那么那些新添加的元素是不会被遍历到的。此外，如果在回调函数中对当前数组进行了其它修改，比如改变某个元素的值或者删掉某个元素，那么随后的遍历操作可能会受到未预期的影响。总之，不要尝试在遍历过程中对原数组进行任何修改，虽然规范对这样的操作进行了详细的定义，但为了可读性和可维护性，请不要这样做。</div><div class="line"></div><div class="line">- Array.prototype.forEach()</div><div class="line">为数组中的每个元素执行一次回调函数。</div><div class="line">- Array.prototype.entries() *</div><div class="line">返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。</div><div class="line">- Array.prototype.every()</div><div class="line">如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false。</div><div class="line">- Array.prototype.some()</div><div class="line">如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false。</div><div class="line">- Array.prototype.filter()</div><div class="line">将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回。</div><div class="line">- Array.prototype.find() *</div><div class="line">找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined。</div><div class="line">- Array.prototype.findIndex() *</div><div class="line">找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1。</div><div class="line">- Array.prototype.keys() *</div><div class="line">返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。</div><div class="line">- Array.prototype.map()</div><div class="line">返回一个由回调函数的返回值组成的新数组。</div><div class="line">- Array.prototype.reduce()</div><div class="line">从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</div><div class="line">- Array.prototype.reduceRight()</div><div class="line">从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</div><div class="line">- Array.prototype.values() *</div><div class="line">返回一个数组迭代器对象，该迭代器会包含所有数组元素的值。</div><div class="line">- Array.prototype[@@iterator]() *</div><div class="line">和上面的 values() 方法是同一个函数。</div><div class="line"></div><div class="line">## 识别数组</div></pre></td></tr></table></figure>
<p>// Array.isArray(arr)</p>
<p>Array.prototype._isArray1 = function () {<br>    return typeof arr === ‘object’ &amp;&amp; arr.constructor === Array;<br>}</p>
<p>Array.prototype._isArray2 = function () {<br>    return Object.prototype.toString.call(arr).slice(8, 13) === ‘Array’<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 构建 m * n 维矩阵  初始化 x;</div></pre></td></tr></table></figure></p>
<p>Array.mate = function (m, n, x) {<br>    var a,<br>        i,<br>        j,<br>        res = [];<br>    for(i = 0; i &lt; m; i++) {<br>        a = [];<br>        for(j = 0; j &lt; n; j++) {<br>            a[j] = x;<br>        }<br>        res[i] = a;<br>    }<br>    return res<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## B 站笔试第二题，从 input 获取 N ，在页面内创建 N * N 的小方块，要求，小方块在鼠标放上时显示红色，离开时恢复，点击后显示蓝色，离开时不变，再次点击时恢复。</div></pre></td></tr></table></figure></p>
<p><body></body></p>
<p><input type="number" id="inp" placeholder="input number and enter"><br></p>
<p><script><br>  (function () {<br>        let inp = document.getElementById(‘inp’),<br>            val;</p>
<pre><code>    inp.addEventListener(&apos;keyup&apos;, function (e) {
        if (e.keyCode === 13) {
            val = inp.value;
            createEle(val);
            inp.value = &apos;&apos;;
        }
    })

    function createEle (val) {
        val = parseInt(val);

        if (val &gt; 0) {
            if (document.querySelector(&apos;.uul&apos;)) {
                document.body.removeChild(document.querySelector(&apos;.uul&apos;));
            }
            var dom = document.createDocumentFragment(),
                ul = document.createElement(&apos;ul&apos;);
                ul.className = &apos;uul&apos;;
            var array = [],
                body = document.body,
                div;

            for (let i = 0; i &lt; val; i++) {
                for (let j = 0; j &lt; val; j++) {
                    div = document.createElement(&apos;li&apos;);
                    div.className = &apos;blockItem&apos;;
                    div.style.top = i * 25 + &apos;px&apos;;
                    div.style.left = j * 25 + &apos;px&apos;;
                    ul.appendChild(div);
                }
            }
            dom.appendChild(ul);
            //console.log(&apos;dom: &apos;+ dom);
            body.appendChild(dom);

            //var block = document.getElementsByClassName(&apos;blockItem&apos;);
            bindEvent(body);
        } else {
            inp.value = &apos;&apos;;
            console.log(&apos;you should input some number&apos;)
            //throw new Error(&apos;you should input some number&apos;)
        }
    }

    function bindEvent (body) {
        body.addEventListener(&apos;mouseover&apos;, function(e) {
            //console.log(&apos;mouseover li&apos;)
            if (e.target.nodeName === &apos;LI&apos;) {
                if (e.target.style.background !== &apos;blue&apos;)
                    e.target.style.background = &apos;red&apos;;
            }
        })

        body.addEventListener(&apos;mouseout&apos;, function(e) {
            //console.log(&apos;mouseout li&apos;)
            if (e.target.nodeName === &apos;LI&apos;) {
                if (e.target.style.background !== &apos;blue&apos;)
                    e.target.style.background = &apos;&apos;;
            }
        })

        body.addEventListener(&apos;click&apos;, function(e) {
            if (e.target.nodeName === &apos;LI&apos;) {
                if (e.target.style.background !== &apos;blue&apos;){
                    e.target.style.background = &apos;blue&apos;;
                }
                 else {
                    e.target.style.background = &apos;&apos;;
                }
            }
        })
    }
})()
</code></pre><p></script></p>
<p><style><br>    .uul {<br>        display: block;<br>        position: absolute;<br>        left: 300px;<br>        margin-left: 300px;<br>    }<br>    .blockItem{<br>        background: #ccc;<br>        list-style: none;<br>        position: absolute;<br>    }<br></style><br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS 二叉树的实现</title>
    <link href="http:%5C%5Chexin.life/2017/10/11/title-30/"/>
    <id>http:\\hexin.life/2017/10/11/title-30/</id>
    <published>2017-10-10T16:22:03.000Z</published>
    <updated>2017-10-10T16:22:56.298Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 二叉树</div><div class="line"> */</div><div class="line"></div><div class="line">function BinaryTree () &#123;</div><div class="line">    var Node = function (root)&#123;</div><div class="line">        this.root = root;</div><div class="line">        this.left = null;</div><div class="line">        this.right = null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var root;</div><div class="line"></div><div class="line"></div><div class="line">    this.insertNode = function (node) &#123;</div><div class="line">        var newNode = new Node(node);</div><div class="line">        if (root == null) &#123;</div><div class="line">            root = newNode;</div><div class="line">        &#125; else &#123;</div><div class="line">            insert(root, newNode)</div><div class="line">        &#125;</div><div class="line">        this.root = root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var insert = function (node, newNode) &#123;</div><div class="line">        if (node.root &lt; newNode.root) &#123;</div><div class="line">            if (node.right === null) &#123;</div><div class="line">                node.right = newNode;</div><div class="line">            &#125; else &#123;</div><div class="line">                insert(node.right, newNode)</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            if(node.left  === null) &#123;</div><div class="line">                node.left = newNode;</div><div class="line">            &#125; else &#123;</div><div class="line">                insert(node.left, newNode)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    this.removeNode = function (value) &#123;</div><div class="line">        if (!value) return null;</div><div class="line">        remove(root, value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var remove = function (root, value) &#123;</div><div class="line">        if (root &amp;&amp; root.root &amp;&amp; root.right &amp;&amp; root.left) &#123;</div><div class="line">            if (value === root.root)&#123;</div><div class="line">                root.left = null;</div><div class="line">                root.right = null;</div><div class="line">                root.root = null;</div><div class="line">                root = null;</div><div class="line">                // console.log(&apos;clear&apos;, root)</div><div class="line">                return root;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (root) &#123;</div><div class="line">            if (value &lt; root.root) &#123;</div><div class="line">                root.left = remove(root.left, value)</div><div class="line">                return root;</div><div class="line">            &#125; else if (value &gt; root.root) &#123;</div><div class="line">                root.right = remove(root.right, value)</div><div class="line">                return root;</div><div class="line">            &#125; else &#123;</div><div class="line">                if (!root.left &amp;&amp; !root.right) &#123;</div><div class="line">                    root = null;</div><div class="line">                    return root;</div><div class="line">                &#125;</div><div class="line">                if (root.left === null) &#123;</div><div class="line">                    root = root.right;</div><div class="line">                    return root;</div><div class="line">                &#125; else if (root.right === null) &#123;</div><div class="line">                    root = root.left;</div><div class="line">                    return root;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //  清空树</div><div class="line">    this.clear = function () &#123;</div><div class="line">        root.left = null;</div><div class="line">        root.right = null;</div><div class="line">        root.root = null;</div><div class="line">        root = null;</div><div class="line">        return root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 回调打印</div><div class="line">    var print = function (value) &#123;</div><div class="line">        console.log(&apos;::&apos;, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 中序遍历</div><div class="line">    this.inOrderTraverse = function () &#123;</div><div class="line">        inOrderTraverseNode(root, print)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var inOrderTraverseNode = function (node, print) &#123;</div><div class="line">        if (node !== null) &#123;</div><div class="line">            inOrderTraverseNode(node.left, print);</div><div class="line">            print(node.root);</div><div class="line">            inOrderTraverseNode(node.right, print);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 前序遍历</div><div class="line">    this.preOrderTraverse = function () &#123;</div><div class="line">        preOrderTraverseNode(root, print);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var preOrderTraverseNode = function (node, print) &#123;</div><div class="line">        if (node !== null ) &#123;</div><div class="line">            print(node.root);</div><div class="line">            preOrderTraverseNode(node.left, print)</div><div class="line">            preOrderTraverseNode(node.right, print)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 后序遍历</div><div class="line">    this.postOrderTraverse = function () &#123;</div><div class="line">        postOrderTraverseNode(root, print);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var postOrderTraverseNode = function (node, print) &#123;</div><div class="line">        if (node !== null) &#123;</div><div class="line">            postOrderTraverseNode(node.left, print)</div><div class="line">            postOrderTraverseNode(node.right, print)</div><div class="line">            print(node.root)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 按层遍历</div><div class="line">    this.floorOederTraverseNode = function () &#123;</div><div class="line">        return floorTree(root);</div><div class="line">    &#125;</div><div class="line">    var floorTree = function (root) &#123;</div><div class="line">        var queue = [];</div><div class="line">        queue.push(root);</div><div class="line">        if (root) &#123;</div><div class="line">            if (root.left !== null) &#123;</div><div class="line">                queue.push(root.left);</div><div class="line">            &#125;</div><div class="line">            if (root.right !== null) &#123;</div><div class="line">                queue.push(root.right);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var treeNode = [];</div><div class="line"></div><div class="line">        while (queue.length &gt; 0) &#123;</div><div class="line">            nod = queue.shift();</div><div class="line">            treeNode.push(nod);</div><div class="line">            if (nod.left) &#123;</div><div class="line">                queue.push(nod.left);</div><div class="line">            &#125;</div><div class="line">            if (nod.right) &#123;</div><div class="line">                queue.push(nod.right);</div><div class="line">            &#125;</div><div class="line">            // console.log(queue)</div><div class="line">        &#125;</div><div class="line">        treeNode = treeNode.map(function(value)  &#123;</div><div class="line">            return value = value.root;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        return Array.from(new Set(treeNode));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 打印最小值</div><div class="line">    this.minNode = function () &#123;</div><div class="line">        return min(root)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var min = function (node) &#123;</div><div class="line">        if (node) &#123;</div><div class="line">             while (node &amp;&amp; node.left !== null) &#123;</div><div class="line">                node = node.left;</div><div class="line">            &#125;</div><div class="line">            return node.root;</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 打印最大值</div><div class="line">    this.maxNode = function () &#123;</div><div class="line">        return max(root)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var max = function (node) &#123;</div><div class="line">        if (node) &#123;</div><div class="line">            while (node &amp;&amp; node.right !== null) &#123;</div><div class="line">                node = node.right</div><div class="line">            &#125;</div><div class="line">            return node.root;</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //  打印树高度</div><div class="line">    this.treeHeight = function () &#123;</div><div class="line">        return findHeight(root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function findHeight (root) &#123;</div><div class="line">        var height = 0;</div><div class="line">        if (root) &#123;</div><div class="line">            if (root.right || root.left) &#123;</div><div class="line">                height++;</div><div class="line">                findHeight(root.right);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return height;</div><div class="line">    &#125;</div><div class="line">    // 寻找值</div><div class="line">    this.findNode = function (value) &#123;</div><div class="line">        return find(root, value)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var find = function (root, value) &#123;</div><div class="line">        if(root &amp;&amp; root.root) &#123;</div><div class="line">            if (value &lt; root.root) &#123;</div><div class="line">                return find(root.left, value)</div><div class="line">            &#125; else if (value &gt; root.root) &#123;</div><div class="line">                return find(root.right, value)</div><div class="line">            &#125; else &#123;</div><div class="line">                console.log(&apos;root is: &apos;, root);</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 打印第 k 层节点</div><div class="line">    this.printKTree = function (k) &#123;</div><div class="line">        if (root) &#123;</div><div class="line">            if (k == 0) &#123;</div><div class="line">                console.log(&apos;root&apos;, root.root);</div><div class="line">            &#125; else if (k === 1)&#123;</div><div class="line">                findLeftChild(root, k);</div><div class="line">            &#125; else &#123;</div><div class="line">                findLeftChild(root, k);</div><div class="line">                findRightChild(root, k);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    var findLeftChild = function (root, k) &#123;</div><div class="line">        if (k - 1 == 0 &amp;&amp; root &amp;&amp; root.right &amp;&amp; root.left) &#123;</div><div class="line">            console.log(root.left.root, root.right.root)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (root) &#123;</div><div class="line">            findLeftChild(root.left, --k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var findRightChild = function (root, k) &#123;</div><div class="line">        if (k - 1 == 0 &amp;&amp; root &amp;&amp; root.right &amp;&amp; root.left) &#123;</div><div class="line">            console.log(root.left.root, root.right.root)</div><div class="line">        &#125;</div><div class="line">        if (root) &#123;</div><div class="line">            findRightChild(root.right, --k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var nodes = [6, 4 , 5, 2, 1, 3, 8, 7, 10, 9, 11];</div><div class="line">var binaryTree = new BinaryTree();</div><div class="line">nodes.forEach((value) =&gt; &#123;</div><div class="line">    binaryTree.insertNode(value)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// binaryTree.inOrderTraverse()</div><div class="line">// binaryTree.preOrderTraverse()</div><div class="line">// binaryTree.postOrderTraverse()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS 实现链表</title>
    <link href="http:%5C%5Chexin.life/2017/10/11/title-29/"/>
    <id>http:\\hexin.life/2017/10/11/title-29/</id>
    <published>2017-10-10T16:20:38.000Z</published>
    <updated>2017-10-10T16:21:36.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><pre><code>var lists = function () {
    var List = function (head) {
        this.data = head;
        this.next = null;
    }

    var _head = new List(&apos;head&apos;);

    this.insertList = function (head) {
        var newList = new List(head);
        insert(_head, newList)
        this.head = _head;
    }

    // 头插法
    function insert (head, newList) {
        newList.next = head.next;
        head.next = newList;
    }

    // 正序打印
    this.print = function () {
        head = Object.assign({}, this.head);
        while(head.next) {
            console.log(head.next.data);
            head.next = head.next.next;
        }
    }

    // 逆序输出
    this.reverse = function () {
        head = Object.assign({}, this.head);
        var res = []
        while(head.next) {
            res.push(head.next);
            head.next = head.next.next;
        }
        while (res.length &gt; 0) {
            console.log(res.pop().data)
        }
    }
}

var list = new lists();
var nodes = [1,2,3,4,5,6,7];
nodes.forEach((value) =&gt; {
    list.insertList(value);
})
</code></pre><p>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP 协议</title>
    <link href="http:%5C%5Chexin.life/2017/10/10/title-28/"/>
    <id>http:\\hexin.life/2017/10/10/title-28/</id>
    <published>2017-10-09T17:11:24.000Z</published>
    <updated>2017-10-09T17:13:23.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="http-协议的主要特点"><a href="#http-协议的主要特点" class="headerlink" title="http 协议的主要特点"></a>http 协议的主要特点</h1><ul>
<li>简单快速 =&gt; 统一资源 URI</li>
<li>灵活 =&gt; 可传输不同数据类型</li>
<li>无连接 =&gt; 连接一次便断掉</li>
<li>无状态 =&gt; 不会记忆</li>
</ul>
<h1 id="http-报文的组成成分"><a href="#http-报文的组成成分" class="headerlink" title="http 报文的组成成分"></a>http 报文的组成成分</h1><p>建立在TCP连接上</p>
<p>请求报文：<br>    请求行<br>        http方法 / 页面地址 HTTP协议 / HTTP版本<br>        =&gt; get / HTTP/1.1<br>    请求头<br>        key-value =&gt;<br>        host: www.baidu.com<br>        Connection: keep-alive<br>        Pragma: no-cache<br>        …<br>    空行<br>        请求头结束<br>    请求体</p>
<p>响应报文：<br>    状态行<br>        HTTP/1.1 200 OK<br>    响应头<br>        Server: nginx<br>        Date: Sat, 22 Jul 2017 22:22:22 GMT<br>        Content-Type: text/html; charset=utf-8<br>        …<br>    空行<br>    响应体</p>
<h1 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h1><p>GET - 获取资源<br>POST- 传输资源<br>PUT - 更新资源<br>DELETE - 删除资源<br>HEAD - 获得报文首部</p>
<h1 id="post-和-get-的区别"><a href="#post-和-get-的区别" class="headerlink" title="post 和 get 的区别"></a>post 和 get 的区别</h1><ul>
<li>get 在浏览器回退时是无害的，而 post 会再次提交请求</li>
<li>get 产生的 url 地址可以被缓存，而 post 不行</li>
<li>get 会被浏览器主动缓存， 而 post 不会，除非手动设置</li>
<li>get 只能进行 url 编码，而 post 支持多种</li>
<li>get 请求参数会被完整的保留在历史纪录中，而 post 中的参数不会</li>
<li>get 请求在 url 中参数有长度限制，post 没有 =&gt;  get url 参数太长会被截断</li>
<li>对参数的数据类型，get 只支持 ASCLL 字符，post 没有限制</li>
<li>get 比 post 更 <code>不</code>安全， 因为参数直接暴露在 url 中，所以不能用来传递敏感信息</li>
<li>get 参数通过 url 传递，post 放在 request body 中</li>
</ul>
<h1 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h1><p>1xx: 这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。<br>2xx: 成功<br>    206 Partial Content: 服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。<br>3xx: 重定向<br>    301: 请求的页面已经转移了新的 url,永久重定向<br>    302: 请求的页面已经 临时 转移至了新的 url<br>    303: 对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。[23]这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>    304: 客户端有缓冲的文档并发送了一个条件性额度请求，服务器告诉客户端，原来请求的文档没有发生改变，可以继续使用</p>
<pre><code>![](https://img.aotu.io/wengeek/cache.png)

307: 在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。
308: 请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。
</code></pre><blockquote>
<p>1、从上面的状态码中，你可能注意到302、303和307状态码之间存在一些交叉，那么，它们之间存在哪些细微差别？<br>303和307是HTTP/1.1新增加的状态码，它们是对HTTP1.0中的302状态码的细化。当HTTP/1.0客户端发起一个POST请求，并在响应中收到302重定向状态码时，它会接受Location首部的重定向URL，并向那个URL发起一个GET请求。透过以上的状态码介绍，我们可以发现HTTP/1.1规范使用303状态码来实现同样的行为。为了避开这个问题，对于HTTP/1.1客户端，用307状态码来代替302状态码进行临时重定向。<br>在HTTP/1.1中，302理论上是可以被303和307代替掉的，但为了兼容HTTP/1.0，依然还在广泛使用。</p>
<p>2、经常可以看到 Cache-Control: no-cache 这样的首部，那么代表的是不缓存么？<br>Cache-Control: no-cache 响应实际上是可以存储到本地缓存区中的，只是在与服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用。<br>如果需要本地彻底不缓存，需要使用Cache-Control: no-store，表示缓存应该尽快从存储器中删除文档的所有痕迹。</p>
</blockquote>
<p>4xx: 客户端错误<br>    400: 客户端有语法错误，不能被服务器所理解<br>    401: 请求未授权，类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。<br>    <em>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站</em><br>    403: 请求页面访问被禁止,服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。<br>    404: 请求页面没有找到<br>5xx: 服务器错误<br>    500: 服务器发生不可预期的错误<br>    503: 请求未完成，服务器临时过载或当机，一段时间后可能恢复正常</p>
<ul>
<li><a href="https://aotu.io/notes/2016/01/28/3xx-of-http-status/" target="_blank" rel="external">你所知道的3xx状态码</a></li>
<li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="external">HTTP状态码</a></li>
</ul>
<h1 id="什么是持久连接"><a href="#什么是持久连接" class="headerlink" title="什么是持久连接"></a>什么是持久连接</h1><p>http 协议采用‘请求-应答’模式，使用非 keep-alive 模式时，每个请求/应答客户端和服务器都建立一个连接，完成之后立即断开连接<br>使用 keep-alive 时(http/1.1 持久连接，连接重用)， keep-alive 功能使客户端到服务器的连接持续有效，当出现对服务器的后续请求时，，keep-alve 避免了建立或重新建立连接。</p>
<h1 id="什么是管线化"><a href="#什么是管线化" class="headerlink" title="什么是管线化"></a>什么是管线化</h1><p>某个 持久连接 情况下，某个连接上的消息传递类似于：<br>请求1 -&gt; 响应1 -&gt; 请求2 -&gt; 响应2 -&gt; 请求3 -&gt; 响应3<br>某个连接上的消息变成类似这样：=&gt; 打包一次请求，一次返回响应<br>请求1 -&gt; 请求2 -&gt; 请求3 -&gt; 响应1 -&gt; 响应2 -&gt; 响应3</p>
<ul>
<li>管线化通过 持久连接 完成，仅 HTTP/1.1 支持</li>
<li>只有 GET HEAD 请求可以进行管线化，post 有所限制</li>
<li>初次创建连接不应启动管线化，因对服务器不一定支持HTTP/1.1版本的协议</li>
<li>管线化不会影响响应到来顺序。</li>
<li>HTTP/1.1 要求服务器支持管线化，但并不要求对响应进行管线化处理，只要求   管线化的请求不失败即可</li>
<li>开启管线化可能并不会带来很大性能提升，很多服务器和代理程序对管线化支持并不好，因此现代浏览器默认不开启管线化支持</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试经历</title>
    <link href="http:%5C%5Chexin.life/2017/10/10/title-27/"/>
    <id>http:\\hexin.life/2017/10/10/title-27/</id>
    <published>2017-10-09T17:07:49.000Z</published>
    <updated>2017-10-09T17:14:50.876Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>还没有 offer ，博客也懒得整理了，不希望自己荒废掉博客，很多笔记写到了本地，但是太杂乱，都没什么时间整理，先发点东西吧，都快一个月了没有动过博客了，这么长时间没有找到工作，这样下去感觉得考虑春招了。渣渣渣！！！</p>
<h1 id="搜狗"><a href="#搜狗" class="headerlink" title="搜狗"></a>搜狗</h1><p>上来先做题</p>
<ul>
<li>盒模型</li>
<li>布局，左边定宽，右边自适应~</li>
<li>打印出页面所有 dom</li>
<li>position 属性<ul>
<li>relative 定位<br>相对定位的元素是在文档中的正常位置偏移给定的值，但是不影响其他元素的偏移。</li>
<li>absolute 是根据什么定位的<br>根据父级元素的 非 static 属性的元素</li>
</ul>
</li>
</ul>
<ol>
<li>说一下你了解的前端?会些什么？ meng !!!</li>
<li>JavaScript 基础类型，值类型，引用类型。</li>
<li>原型链 =&gt;  <strong>proto</strong> 和 prototype。</li>
<li>看你项目中用过 vue 和 jQuery，你哪个擅长一点 ?</li>
<li>你用过 JQuery ，你觉得 jQuery 的优点有哪些？ 你觉得不好或者自己觉得用的不舒服的或者你觉得可以改进的地方？</li>
<li>jQuery 的事件绑定是怎么实现的？</li>
<li>看过 jQuery 源码吗？ 没有~ =&gt; 还在用的阶段对吧？ =&gt; 对~</li>
<li>说说 Vue 开发的好处吧~</li>
<li>Vue 双向绑定是怎么实现的。</li>
<li>没什么问问题了，你有什么要问我的吗？</li>
<li>有什么是你准备了而他没问的吗？</li>
<li>你看过什么书?</li>
</ol>
<h1 id="葡萄城"><a href="#葡萄城" class="headerlink" title="葡萄城"></a>葡萄城</h1><ul>
<li>balabalba</li>
<li>闭包 -&gt; 写个例子</li>
<li>原型链 -&gt; 写个例子</li>
<li>用到了 call ， call 和 apply 的区别</li>
<li>打印第 k 层的二叉树结点</li>
<li>写了博客？博客是用什么建的？用什么语法写的？有没有了解背后的原理？</li>
</ul>
<h1 id="葡萄城二面"><a href="#葡萄城二面" class="headerlink" title="葡萄城二面"></a>葡萄城二面</h1><ul>
<li>balalala</li>
<li>逆序单链表</li>
<li>二叉树</li>
<li>100 万个字符，要存储在磁盘中，但是现在磁盘容量不够了，要怎么才能存储进去，读取的时候可以正常读取使用？海量数=&gt; 据处理</li>
</ul>
<h1 id="富途"><a href="#富途" class="headerlink" title="富途"></a>富途</h1><ul>
<li>四六级</li>
<li>数学成绩</li>
<li>C / C++ 成绩</li>
<li>逻辑题 1 -&gt; 三个盒子，分别为好盒子，坏盒子，混合盒子，内容装的都是正确的，但是发现盒子的标签全部贴错了,现在只能有一次检测机会，将标签正确的贴回去。</li>
<li>逻辑题 2 -&gt; 15 张牌，每人可以拿  1-3 张，拿到最后一张的人输，你来决定谁先拿?</li>
<li>二分查找</li>
<li>int 型，四字节 32 位机器的 -1 的表示</li>
</ul>
<h1 id="玲珑"><a href="#玲珑" class="headerlink" title="玲珑"></a>玲珑</h1><ul>
<li>怎么没有写项目经验？(写了啊？)</li>
<li>家庭地址/学校地址</li>
<li>知道我们公司吗？</li>
<li>为什么想来郑州？</li>
<li>JavaScript 熟悉吗？ =&gt; 还行</li>
<li>CS 熟悉吗？ =&gt; CS？是 CSS 吗？ -&gt; 对，是 CSS</li>
<li>我说还可以，他说那就是一般喽？那问你几个 JS 的问题吧…</li>
<li><p>值为 false 的？ =&gt; 只说了俩个</p>
<ul>
<li>‘’</li>
<li>null</li>
<li>undefined</li>
<li>+0 / -0</li>
<li>NaN</li>
<li>false</li>
</ul>
</li>
<li><p>typeof undefined？</p>
</li>
<li>typeof null？</li>
<li>typeof Array？</li>
<li><p>如何判别 array？ =&gt; 我怎么感觉她没听清我说的~</p>
<ul>
<li>arr instanceof Array</li>
<li>Array.isArray(arr)</li>
<li>toString.call(arr) // [object array]</li>
</ul>
</li>
<li><p>null 和 undefined 的区别？</p>
</li>
<li>浏览器的本地存储？</li>
<li>cookie 和 loaclStorage 的区别？ =&gt; 想了一下，hr 说你在说话吗? 是不是信号不好？ =&gt; 我说我刚在想 =&gt; 那就下一个问题吧…</li>
<li>localStorage 和 sessioStorage 的区别？</li>
<li>有什么问题？</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>web安全</title>
    <link href="http:%5C%5Chexin.life/2017/09/02/title-26/"/>
    <id>http:\\hexin.life/2017/09/02/title-26/</id>
    <published>2017-09-02T06:49:42.000Z</published>
    <updated>2017-09-06T12:02:44.687Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="代码层面"><a href="#代码层面" class="headerlink" title="代码层面"></a>代码层面</h1><h1 id="架构层面"><a href="#架构层面" class="headerlink" title="架构层面"></a>架构层面</h1><h1 id="运维层面"><a href="#运维层面" class="headerlink" title="运维层面"></a>运维层面</h1><p>安全问题</p>
<ul>
<li>用户密码被盗取</li>
<li>用户身份被盗用</li>
<li>用户资料被盗取</li>
<li>网站数据库泄露</li>
</ul>
<h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><ul>
<li>HTML 标签 <script>alert(document.cookie)</script></li>
<li>HTML 属性 -&gt; &lt;img class=’#{class}&gt; =&gt; <img class="hello" onload="alert(document.cookie)"></li>
<li>script </li>
<li><p>富文本</p>
<h3 id="浏览器防御"><a href="#浏览器防御" class="headerlink" title="浏览器防御"></a>浏览器防御</h3><p>并不是所有浏览器都有防御功能<br>浏览器只能防御出现的 script 标签和其他标签，不能防御从 SCRIPT 取值或者富文本类</p>
<h3 id="转义-gt-输入-输出"><a href="#转义-gt-输入-输出" class="headerlink" title="转义 -&gt; 输入 / 输出"></a>转义 -&gt; 输入 / 输出</h3></li>
</ul>
<ol>
<li>&amp; =&gt; &amp; -&gt; 放在最前面</li>
<li>html 标签</li>
</ol>
<ul>
<li>转义 &lt;  &gt; =&gt; &lt;  &gt;</li>
</ul>
<ol>
<li>HTML 属性 -&gt; 双引号 -&gt; 单引号 -&gt; 空格 =&gt; 实体 or 安全字符集</li>
</ol>
<ul>
<li>转义 “ “ ‘’  =&gt; &quto; &#39; &#32;</li>
</ul>
<ol>
<li><p>script 转义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\\ =&gt; \\\\</div><div class="line">&quot; =&gt; \&quot;</div></pre></td></tr></table></figure>
<p>4.1. json encode<br>JSON.stringify(data)</p>
</li>
<li>富文本</li>
</ol>
<ul>
<li><p>黑名单 拉黑 / 禁止部分标签和属性 script / a / img / 等等…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt; do somesth... &lt;/script&gt; =&gt; html.replace(/&lt;\s*\/?script\s*&gt;/g, &apos;&apos;)   </div><div class="line">&lt;a href=&apos;javascript:alert(1)&apos;&gt; =&gt; html.replace(/javascript:[^&apos;&quot;]*/g, &apos;&apos;)</div><div class="line">&lt;img src=&apos;123&apos; onerror=&apos;dosth...&apos;&gt; =&gt; html.replace(/onerror\s*=\s*[&apos;&quot;]?[^&apos;&quot;]*[&apos;&quot;]?/g, &apos;&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>白名单 保留部分标签和属性 -&gt; 将 html 解析 dom -&gt; 遍历将允许 DOM 之外的标签 / 属性删除</p>
<h3 id="XSS-库-第三方库"><a href="#XSS-库-第三方库" class="headerlink" title="XSS 库 - 第三方库"></a>XSS 库 - 第三方库</h3><h3 id="CSP-内容安全策略-gt-用于指定哪些内容可执行不可执行"><a href="#CSP-内容安全策略-gt-用于指定哪些内容可执行不可执行" class="headerlink" title="CSP 内容安全策略 -&gt; 用于指定哪些内容可执行不可执行"></a>CSP 内容安全策略 -&gt; 用于指定哪些内容可执行不可执行</h3><p>HTTP 头</p>
</li>
<li>child-src connect-src default-src</li>
<li>font-src frame-src img-src</li>
<li>manifest-src media-src object-src</li>
<li><p>script-src style-src worker-src</p>
</li>
<li><p><host-source> 域名  <scheme-source> 协议 ‘self’ 和页面同域</scheme-source></host-source></p>
</li>
<li>‘unsafe-inline’ 页面内容 ‘unsafe-eval’ eval 函数 ‘none’ 页面任何内容不执行</li>
<li>nonce-<base64-value>  <hash-source> hash 相同才会执行</hash-source></base64-value></li>
<li><p>‘strict-dynamic’ </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.set(`Connect-Security-Policy:`, `default-src &apos;self&apos;`)</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="csrf-跨站请求伪造-Cross-Site-Request-Forgy"><a href="#csrf-跨站请求伪造-Cross-Site-Request-Forgy" class="headerlink" title="csrf 跨站请求伪造 Cross Site Request Forgy"></a>csrf 跨站请求伪造 Cross Site Request Forgy</h1><ul>
<li>利用用户登陆态(cookies)</li>
<li>用户不知情</li>
<li>完成业务请求</li>
<li>盗取资金</li>
<li>冒充发帖评论等…</li>
<li><p>毁坏网站声誉<br>…</p>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2></li>
<li>禁止第三方网站的 cookies -&gt;     sampsite-strict(添加到cookies) 只有 chrome 和 opera 支持</li>
<li>验证码 / token </li>
<li>referer</li>
</ul>
<h1 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h1><ul>
<li>前端数据储存</li>
<li>后端通过 http 头设置</li>
<li>请求时通过 HTTP 头传给后端</li>
<li>前端可读写</li>
<li>遵守同源策略</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var cookies = document.cookies</div><div class="line">cookies = &quot;userId=&apos;123&apos;&quot;</div></pre></td></tr></table></figure>
<ul>
<li>Domain: localhost</li>
<li>Path: /</li>
<li>Expires: session =&gt; 只在会话期间有效</li>
<li>Size: 16</li>
<li>http-only: 只能通过 http 来设置 cookies，即 JavaScript 不能设置 cookies</li>
<li>secure: 只能在 https 协议中使用</li>
<li>same-site: 是否允许其他第三方网站的请求可以使用 -&gt; 只有 chorme 支持</li>
</ul>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>储存个性化设置</li>
<li>未登录时用户的唯一标识</li>
<li>存储已经登录用户的凭证<ul>
<li>用户 Id + 签名</li>
<li>SessionId </li>
</ul>
</li>
<li>储存其他业务数据</li>
</ul>
<h2 id="安全策略"><a href="#安全策略" class="headerlink" title="安全策略"></a>安全策略</h2><ul>
<li>签名防篡改 -&gt; 不可逆</li>
<li>加密-私有变换 -&gt; 可逆</li>
<li>http-only =&gt; XSS</li>
<li>secure =&gt; https 防窃听</li>
<li>same-site =&gt; CSRF </li>
</ul>
<h1 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h1><ul>
<li>iframe 内嵌 -&gt; opacity: 0</li>
</ul>
<h2 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h2><ul>
<li><p>JavaScript 禁止内嵌</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (top.location != window.location) &#123;</div><div class="line">    top.location = window.location;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果禁止了 JavaScript =&gt; X-FRAME-OPTIONS</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// SAME-ROIGIN 同一个网站</div><div class="line">// SAMEORIGIN 同一个域</div><div class="line">// ALLOW-FROM 只能网站内嵌</div><div class="line">// DENY 不允许内嵌</div><div class="line">ctx.set(&apos;X-FRAME-OPTIONS&apos;, &apos;DENY&apos;)</div></pre></td></tr></table></figure>
<h1 id="传输安全"><a href="#传输安全" class="headerlink" title="传输安全"></a>传输安全</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul>
<li>插入广告</li>
<li>重定向广告</li>
<li>无法防御 XSS / CSRF</li>
</ul>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><ul>
<li>证书不被伪造</li>
<li>证书私钥不被泄露</li>
<li>域名管理权不被泄露</li>
<li>CA 坚守原则</li>
</ul>
<h1 id="用户密码安全"><a href="#用户密码安全" class="headerlink" title="用户密码安全"></a>用户密码安全</h1><ul>
<li>密码的作用 =&gt; 比对，只有用户知道 <ul>
<li>密码泄露</li>
<li>服务器被入侵</li>
<li>数据库被偷</li>
<li>通讯被偷听</li>
<li>内部人员泄露</li>
<li>撞库 -&gt; 彩虹表</li>
</ul>
</li>
<li>密码的存储<ul>
<li>加密 -&gt; 多次变换</li>
<li>md5 =&gt; 雪崩效应 -&gt; 修改一个字符，md5 值完全不同</li>
<li>加盐</li>
</ul>
</li>
<li>密码的传输<ul>
<li>https</li>
<li>频率限制</li>
<li>前端加密意义有限 =&gt; 不被拿到明文密码</li>
</ul>
</li>
<li>密码的替代</li>
<li><p>生物特征密码的问题</p>
<ol>
<li>指纹 唇纹 人脸 虹膜 声控 …</li>
</ol>
<ul>
<li>方便</li>
<li>容易泄露</li>
<li>相似性 - 碰撞</li>
</ul>
</li>
</ul>
<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><ul>
<li>存放结构化数据</li>
<li>可高效操作大量数据</li>
<li>方便处理数据库之间的关系</li>
<li>常见：access / sqlite / mySql / msSql Server</li>
</ul>
<h2 id="防御-2"><a href="#防御-2" class="headerlink" title="防御"></a>防御</h2><ul>
<li>关闭错误输出</li>
<li>检查数据类型</li>
<li>数据进行转义</li>
<li>参数化查询</li>
<li>ORM 对象关系映射</li>
</ul>
<h2 id="NoSql"><a href="#NoSql" class="headerlink" title="NoSql"></a>NoSql</h2><ul>
<li>检查数据类型    </li>
<li>类型转换</li>
<li>写完整的条件</li>
</ul>
<h2 id="上传问题"><a href="#上传问题" class="headerlink" title="上传问题"></a>上传问题</h2><ul>
<li>限制上传后缀</li>
<li>文件类型MIME检查 type：image / png …</li>
<li>文件头检查</li>
<li>程序输出</li>
<li>权限互斥 =&gt; 可写与可执行互斥</li>
</ul>
<h1 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h1><ul>
<li>错误信息失控</li>
<li>SQL 注入</li>
<li>水平权限控=控制不当 -&gt; a 控制 b</li>
<li>xss / csrf<br>…</li>
</ul>
<h2 id="OAuth-思想"><a href="#OAuth-思想" class="headerlink" title="OAuth 思想"></a>OAuth 思想</h2><ul>
<li>用户授权</li>
<li>授权行为不泄露敏感信息</li>
<li><p>授权会过期</p>
</li>
<li><p>不允许批量读取数据</p>
</li>
</ul>
<h1 id="拒绝服务-DOS-攻击"><a href="#拒绝服务-DOS-攻击" class="headerlink" title="拒绝服务 DOS 攻击"></a>拒绝服务 DOS 攻击</h1><ul>
<li>模拟正常用户</li>
<li>大量占用服务器资源</li>
</ul>
<h1 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h1><ul>
<li>请求被窃听或记录</li>
<li>再次发出请求 =&gt; 多次消费 / 登陆态被盗取 / 多次抽奖 / 投票…</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="面试" scheme="http:%5C%5Chexin.life/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="安全" scheme="http:%5C%5Chexin.life/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>性能优化</title>
    <link href="http:%5C%5Chexin.life/2017/09/02/title-25/"/>
    <id>http:\\hexin.life/2017/09/02/title-25/</id>
    <published>2017-09-02T06:49:19.000Z</published>
    <updated>2017-09-02T06:50:11.817Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ul>
<li>减少 HTTP 请求</li>
<li>减少请求资源大小</li>
<li>DNS 缓存</li>
<li>相同资源缓存</li>
<li>CDN </li>
<li>服务端渲染</li>
</ul>
<h1 id="资源合并与压缩"><a href="#资源合并与压缩" class="headerlink" title="资源合并与压缩"></a>资源合并与压缩</h1><h2 id="html-压缩"><a href="#html-压缩" class="headerlink" title="html 压缩"></a>html 压缩</h2><ul>
<li>在线网站压缩(x)</li>
<li>nodejs提供</li>
<li>构建工具</li>
<li>后端模板引擎渲染</li>
</ul>
<h2 id="css-压缩"><a href="#css-压缩" class="headerlink" title="css 压缩"></a>css 压缩</h2><ul>
<li>无效代码删除</li>
<li>CS 语义合并</li>
</ul>
<h2 id="js-压缩和混乱"><a href="#js-压缩和混乱" class="headerlink" title="js 压缩和混乱"></a>js 压缩和混乱</h2><ul>
<li>无效字符删除，删除注释，代码语义的缩减和优化，代码保护</li>
<li>文件合并</li>
<li>开启 gizp<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3></li>
<li>首屏渲染</li>
<li>缓存失效</li>
</ul>
<h1 id="CSS-Js-的加载与执行"><a href="#CSS-Js-的加载与执行" class="headerlink" title="CSS Js 的加载与执行"></a>CSS Js 的加载与执行</h1><h2 id="html-渲染"><a href="#html-渲染" class="headerlink" title="html 渲染"></a>html 渲染</h2><ul>
<li>顺序执行，并发加载(并发度)</li>
<li>顺否阻塞 -&gt; css / js 阻塞页面渲染</li>
<li>依赖关系 -&gt; JavaScript 异步加载等</li>
<li>引入方式(css/js) -&gt; link(css) -&gt; defer / async -&gt; 动态异步加载</li>
</ul>
<p>词法分析 -&gt; 从上到下<br>并发加载 -&gt; 外部资源<br>并发上限 -&gt; 某个域名下并发请求上限</p>
<h2 id="CSS-阻塞"><a href="#CSS-阻塞" class="headerlink" title="CSS 阻塞"></a>CSS 阻塞</h2><ul>
<li>head (link) 引入 会阻塞页面的渲染</li>
<li>css 阻塞 JS 执行(js 可能会依赖(修改) css 样式)</li>
<li>css 不阻塞外部脚本加载<h2 id="JavaScript-阻塞"><a href="#JavaScript-阻塞" class="headerlink" title="JavaScript 阻塞"></a>JavaScript 阻塞</h2></li>
<li>直接引入会阻塞页面渲染</li>
<li>js 不阻塞资源的加载(webkit 预加载)</li>
<li>js 顺序执行，阻塞后续 js 逻辑的执行</li>
</ul>
<h1 id="懒加载和预加载"><a href="#懒加载和预加载" class="headerlink" title="懒加载和预加载"></a>懒加载和预加载</h1><h2 id="懒加载-src-gt-占位符"><a href="#懒加载-src-gt-占位符" class="headerlink" title="懒加载(src -&gt; 占位符)"></a>懒加载(src -&gt; 占位符)</h2><ul>
<li>图片进入可视区域后请求图片资源(data-original)</li>
<li>对于电商图片很多，页面很长的业务场景</li>
<li>减少无效资源的加载</li>
<li>并发加载资源过多会阻塞 JS 的加载，影响网站使用</li>
</ul>
<ol>
<li>判断图片高度进入可视区域</li>
<li>插件<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2></li>
</ol>
<ul>
<li>图片等资源在使用之前提前请求</li>
<li>资源使用时能从缓存中加载</li>
<li>页面展示的依赖关系维护(音乐等)</li>
</ul>
<hr>
<ol>
<li>img src 设置 display: none; 实现预加载</li>
<li><p>使用 image 对象 -&gt; 利用 JS 加载时执行 -&gt; 跨域问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var image = new Image()</div><div class="line">image.src = &apos;http://www.somepic.com/somepic&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>Ajax</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var ajax = new XMLHttpRequest()</div><div class="line">ajax.onreadystatechange = callback;</div><div class="line">ajax.onprogress = progressCallback;</div><div class="line"></div><div class="line">ajax.open(&apos;get&apos;, &apos;http://somepic.com/somepic&apos;, true)</div><div class="line"></div><div class="line">ajax.send()</div><div class="line"></div><div class="line">function callback () &#123;</div><div class="line">    if(ajax.readyState === 4 &amp;&amp; ajax.status === 200) &#123;</div><div class="line">        var responseText = ajax.responseText;</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(&apos;Request was unsuccessful: &apos; + ajax.status)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function progressCallback (e) &#123;</div><div class="line">    e = e || window.event;</div><div class="line">    if (e.lengthCromputable) &#123;</div><div class="line">    console.log(&apos;Recived &apos; + e.loaded + &apos; of &apos; + e.total + &apos; bytes.&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>插件</p>
</li>
</ol>
<h1 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h1><ul>
<li>图片有损压缩 jpeg / png8 -&gt; png24 -&gt; png32</li>
<li>图片选择合适的种类 </li>
<li>CSS 雪碧图 -&gt; 减少 HTTP 请求 -&gt; 单张图片过大，一次加载较慢</li>
<li>image inline 图片的内容以 base64 内嵌 html 中 -&gt; 减少 HTTP 请求数  &lt; 8/4 kb</li>
<li>矢量图 svg =&gt; iconfont 解决 icon 问题</li>
</ul>
<h1 id="重绘与回流"><a href="#重绘与回流" class="headerlink" title="重绘与回流"></a>重绘与回流</h1><h2 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h2><ul>
<li>页面盒模型相关的属性<ul>
<li>width </li>
<li>height </li>
<li>padding </li>
<li>margin </li>
<li>display </li>
<li>border  </li>
<li>border-width </li>
<li>border-height</li>
</ul>
</li>
<li>定位及浮动属性<ul>
<li>top</li>
<li>left</li>
<li>rigjt</li>
<li>bottom</li>
<li>position</li>
<li>float</li>
<li>clear</li>
</ul>
</li>
<li>改变节点内部文字结构<ul>
<li>text-align</li>
<li>overflow-y</li>
<li>font-weight</li>
<li>overflow</li>
<li>line-height</li>
<li>vertival-align</li>
<li>white-space</li>
<li>font-size<h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2></li>
</ul>
</li>
<li>color</li>
<li>border-style</li>
<li>border-radius</li>
<li>text-decoration</li>
<li>background</li>
<li>background-image</li>
<li>background-position</li>
<li>background-repeat</li>
<li>background-size</li>
<li>outline</li>
<li>outline-color</li>
<li>outline-style</li>
<li>outline-width</li>
<li>box-shadow</li>
</ul>
<blockquote>
<p>频繁重回和回流的的 DOM 单独作为一个独立图层，它的重绘和回流影响只有这个图层之中<br>如： gif</p>
</blockquote>
<h3 id="chrome-创建图层-的条件"><a href="#chrome-创建图层-的条件" class="headerlink" title="chrome 创建图层(的条件)"></a>chrome 创建图层(的条件)</h3><ol>
<li>3D 或透视变换 CSS 属性</li>
<li>使用加速视频解码的 <code>&lt;video&gt;</code></li>
<li>拥有 3D (webGl) 上下文或者加速的 2D 上下文的 <code>&lt;canvas&gt;</code>节点</li>
<li>混合插件 如：flash</li>
<li>对自己的 opacity 做 CSS 动画或使用一个动画 webkit 变换的元素</li>
<li>拥有加速的 CSS 过滤器的元素 -&gt; tranlate3d</li>
<li>元素包含一个复合层的后代节点 -&gt; 一个元素拥有自己的子元素，子元素在自己的层</li>
<li><p>元素有一个 z-index 较低 或者包含复合层的兄弟元素 -&gt; 在复合层上渲染</p>
</li>
<li><p>用translate替代top改变</p>
</li>
<li>用opacity替代visibility</li>
<li>不要一条一条地修改 DOM 的样式，预先定义好 class，然后修改 DOM 的 className</li>
<li>把 DOM 离线后修改，比如：先把 DOM 给 display:none (有一次 Reflow)，然后你修改100次，然后再把它显示出来</li>
<li>不要把 DOM 结点的属性值放在一个循环里当成循环里的变量</li>
<li>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</li>
<li>动画实现的速度的选择</li>
<li>对于动画新建图层</li>
<li>启用 GPU 硬件加速</li>
</ol>
<blockquote>
<ol>
<li>避免触发或减少重绘 / 回流</li>
<li>将重绘和回流影响范围限制在 <em>单独的图层内</em></li>
</ol>
</blockquote>
<h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ul>
<li>因为HTTP请求无状态，所以需要cookie去维持客户端状态</li>
<li>过期时间 expire<h2 id="cookie的生成方式"><a href="#cookie的生成方式" class="headerlink" title="cookie的生成方式"></a>cookie的生成方式</h2></li>
</ul>
<ol>
<li>http response header中的set-cookie</li>
<li>js中可以通过document.cookie可以读写cookie</li>
</ol>
<ul>
<li>仅仅作为浏览器存储（大小4KB左右，能力被localstorage替代）</li>
<li>cookie中在相关域名下面 -&gt; cdn的流量损耗</li>
<li>httponly</li>
</ul>
<h2 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h2><ul>
<li>HTML5设计出来专门用于浏览器存储的</li>
<li>大小为5M左右</li>
<li>仅在客户端使用，不和服务端进行通信</li>
<li>接口封装较好</li>
<li>浏览器本地缓存方案</li>
</ul>
<h2 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h2><ul>
<li>会话级别的浏览器存储</li>
<li>大小为5M左右</li>
<li>仅在客户端使用，不和服务端进行通信</li>
<li>接口封装较好</li>
<li>对于表单信息的维护</li>
</ul>
<h2 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h2><p>IndexedDB 是一种低级API，用于客户端存储大量结构化数据。该API使用索引来实现对该数据的高性能搜索。虽然 Web Storage 对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案。<br>为应用创建离线版本</p>
<h2 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h2><p>PWA (Progressive Web Apps) 是一种 Web App 新模型，并不是具体指某一种前沿的技术或者某一个单一的知识点，我们从英文缩写来看就能看出来，这是一个渐进式的 Web App，是通过一系列新的 Web 特性，配合优秀的 UI 交互设计，逐步的增强 Web App 的用户体验。</p>
<p>可靠：在没有网络的环境中也能提供基本的页面访问，而不会出现“未连接到互联网”的页面。<br>快速：针对网页渲染及网络数据访问有较好优化。<br>融入（Engaging）：应用可以被增加到手机桌面，并且和普通应用一样有全屏、推送等特性。</p>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><p>Service Worker 是一个脚本，浏览器独立于当前网页，将其在后台运行,为实现一些不依赖页面或者用户交互的特性打开了一扇大门。在未来这些特性将包括推送消息,背景后台同步， geofencing（地理围栏定位），但它将推出的第一个首要特性，就是拦截和处理网络请求的能力，包括以编程方式来管理被缓存的响应。</p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="面试" scheme="http:%5C%5Chexin.life/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="性能优化" scheme="http:%5C%5Chexin.life/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2017拼多多前端笔试</title>
    <link href="http:%5C%5Chexin.life/2017/08/01/title-22/"/>
    <id>http:\\hexin.life/2017/08/01/title-22/</id>
    <published>2017-08-01T13:33:52.000Z</published>
    <updated>2017-08-09T17:20:47.856Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="简答题："><a href="#简答题：" class="headerlink" title="简答题："></a>简答题：</h1><h2 id="settimeout-与-setInterval的区别，-及对他们的内存的分析"><a href="#settimeout-与-setInterval的区别，-及对他们的内存的分析" class="headerlink" title="settimeout 与 setInterval的区别， 及对他们的内存的分析"></a>settimeout 与 setInterval的区别， 及对他们的内存的分析</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol>
<li>setTimeout是在一段时间后调用指定函数（仅一次）</li>
<li>setInterval是每隔一段时间调用指定函数（N次）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function run()&#123;</div><div class="line">    // 其他代码</div><div class="line">    setTimeout(function()&#123;</div><div class="line">        run();</div><div class="line">    &#125;, 10000);</div><div class="line">&#125;</div><div class="line">run();</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上面的代码来说, 虽然设置的是10s执行一次, 但是实际时间却是需要// 其他代码的执行时间来确定<br>即setTimeout的间隔时间是, // setTimeout 的间隔时间 === 最小时间是(10s+)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setInterval(function()&#123;</div><div class="line">    run();</div><div class="line">&#125;, 10000);</div></pre></td></tr></table></figure>
<p>而setInterval, 不会有上面的问题, 但是如果run()的执行时间, 操作大于10s, 那么甚至可能跳过任务;</p>
<p><a href="http://www.pjhome.net/article/Javascript/822.html" target="_blank" rel="external">setInterval 和 setTimeout 会产生内存溢出</a><br><a href="https://gxnotes.com/article/65338.html" target="_blank" rel="external">JavaScript setInterval()方法是否导致内存泄漏？</a></p>
<h2 id="关于内存泄漏"><a href="#关于内存泄漏" class="headerlink" title="关于内存泄漏"></a>关于内存泄漏</h2><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。<br>对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。<br>不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。<br>（比如 C 语言）必须手动释放内存，程序员负责内存管理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">char * buffer;</div><div class="line">buffer = (char*) malloc(42);</div><div class="line"></div><div class="line">//...</div><div class="line"></div><div class="line">free(buffer)    //手动释放内存</div></pre></td></tr></table></figure></p>
<blockquote>
<p>上面是 C 语言代码，malloc方法用来申请内存，使用完毕之后，必须自己用free方法释放内存。<br>这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为”垃圾回收机制”（garbage collector）。</p>
</blockquote>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>怎么知道哪些内存不再需要呢？常用的方法是 ‘引用计数’, 语言的引擎有一张 ‘引用表’, 保存了内存里面所有的资源(通常是各种值)的引用次数，当一个值的引用次数为 0 时，表示这个值用不到了，因此可将其释放。</p>
<p>但是如果一个值不再用到了，引用次数却不为 0 ，垃圾回收机制却无法释放这块内存，从而导致内存泄漏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line">console.log(arr);</div></pre></td></tr></table></figure></p>
<p>打印完 arr 之后, arr 便用不到了，引用次数为 1, 但是它还会继续占用内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line">console.log(arr);</div><div class="line">arr = null;</div></pre></td></tr></table></figure></p>
<p>arr 重置为 null，就解除了对 [1, 2, 3, 4] 的引用，引用次数变成了 0 ，内存就可以释放了。</p>
<h3 id="JavaScript-内存管理"><a href="#JavaScript-内存管理" class="headerlink" title="JavaScript 内存管理"></a>JavaScript 内存管理</h3><p>JavaScript 是一种垃圾回收语言。垃圾回收语言通过周期性地检查先前分配的内存是否可达，帮助开发者管理内存。换言之，垃圾回收语言减轻了“内存仍可用”及“内存仍可达”的问题。两者的区别是微妙而重要的：仅有开发者了解哪些内存在将来仍会使用，而不可达内存通过算法确定和标记，适时被操作系统回收。</p>
<h3 id="JavaScript-内存泄漏"><a href="#JavaScript-内存泄漏" class="headerlink" title="JavaScript 内存泄漏"></a>JavaScript 内存泄漏</h3><p>垃圾回收语言的内存泄漏主因是不需要的引用。理解它之前，还需了解垃圾回收语言如何辨别内存的可达与不可达。</p>
<p><strong>Mark-and-sweep</strong></p>
<ol>
<li>大部分垃圾回收语言用的算法称之为 Mark-and-sweep 。算法由以下几步组成：<br>垃圾回收器创建了一个“roots”列表。Roots 通常是代码中全局变量的引用。JavaScript 中，“window” 对象是一个全局变量，被当作 root 。window 对象总是存在，因此垃圾回收器可以检查它和它的所有子对象是否存在（即不是垃圾）；</li>
<li>所有的 roots 被检查和标记为激活（即不是垃圾）。所有的子对象也被递归地检查。从 root 开始的所有对象如果是可达的，它就不被当作垃圾。</li>
<li>所有未被标记的内存会被当做垃圾，收集器现在可以释放内存，归还给操作系统了。</li>
</ol>
<p>现代的垃圾回收器改良了算法，但是本质是相同的：可达内存被标记，其余的被当作垃圾回收。</p>
<p>不需要的引用是指开发者明知内存引用不再需要，却由于某些原因，它仍被留在激活的 root 树中。在 JavaScript 中，不需要的引用是保留在代码中的变量，它不再需要，却指向一块本该被释放的内存。有些人认为这是开发者的错误。</p>
<p>为了理解 JavaScript 中最常见的内存泄漏，我们需要了解哪种方式的引用容易被遗忘。</p>
<h4 id="常见-JavaScript-内存泄漏"><a href="#常见-JavaScript-内存泄漏" class="headerlink" title="常见 JavaScript 内存泄漏"></a>常见 JavaScript 内存泄漏</h4><h5 id="意外的全局变量"><a href="#意外的全局变量" class="headerlink" title="意外的全局变量"></a>意外的全局变量</h5><p>JavaScript 处理未定义变量的方式比较宽松：未定义的变量会在全局对象创建一个新变量。在浏览器中，全局对象是 window 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function foo(arg) &#123;</div><div class="line">    bar = &quot;this is a hidden global variable&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>真相是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function foo(arg) &#123;</div><div class="line">    window.bar = &quot;this is an explicit global variable&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数 foo 内部忘记使用 var ，意外创建了一个全局变量。此例泄漏了一个简单的字符串，无伤大雅，但是有更糟的情况。</p>
<p>另一种意外的全局变量可能由 this 创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    this.variable = &quot;potential accidental global&quot;;</div><div class="line">&#125;</div><div class="line">// Foo 调用自己，this 指向了全局对象（window）</div><div class="line">// 而不是 undefined</div><div class="line">foo();</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在 JavaScript 文件头部加上 ‘use strict’，可以避免此类错误发生。启用严格模式解析 JavaScript ，避免意外的全局变量。</p>
</blockquote>
<p>全局变量注意事项:<br>尽管我们讨论了一些意外的全局变量，但是仍有一些明确的全局变量产生的垃圾。它们被定义为不可回收（除非定义为空或重新分配）。尤其当全局变量用于临时存储和处理大量信息时，需要多加小心。如果必须使用全局变量存储大量数据时，确保用完以后把它设置为 null 或者重新定义。与全局变量相关的增加内存消耗的一个主因是缓存。缓存数据是为了重用，缓存必须有一个大小上限才有用。高内存消耗导致缓存突破上限，因为缓存内容无法被回收。</p>
<h5 id="被遗忘的计时器或回调函数"><a href="#被遗忘的计时器或回调函数" class="headerlink" title="被遗忘的计时器或回调函数"></a>被遗忘的计时器或回调函数</h5><p>在 JavaScript 中使用 setInterval 非常平常。一段常见的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var someResource = getData();</div><div class="line">setInterval(function() &#123;</div><div class="line">    var node = document.getElementById(&apos;Node&apos;);</div><div class="line">    if(node) &#123;</div><div class="line">        // 处理 node 和 someResource</div><div class="line">        node.innerHTML = JSON.stringify(someResource));</div><div class="line">    &#125;</div><div class="line">&#125;, 1000);</div></pre></td></tr></table></figure></p>
<p>此例说明了什么：与节点或数据关联的计时器不再需要，<em>node</em> 对象可以删除，整个回调函数也不需要了。可是，计时器回调函数仍然没被回收（计时器停止才会被回收）。同时，<em>someResource</em> 如果存储了大量的数据，也是无法被回收的。</p>
<p>对于观察者的例子，一旦它们不再需要（或者关联的对象变成不可达），明确地移除它们非常重要。老的 IE 6 是无法处理循环引用的。如今，即使没有明确移除它们，一旦观察者对象变成不可达，大部分浏览器是可以回收观察者处理函数的。</p>
<p>观察者代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var element = document.getElementById(&apos;button&apos;);</div><div class="line">function onClick(event) &#123;</div><div class="line">    element.innerHTML = &apos;text&apos;;</div><div class="line">&#125;</div><div class="line">element.addEventListener(&apos;click&apos;, onClick);   // =&gt; 循环调用</div></pre></td></tr></table></figure></p>
<p><strong>对象观察者和循环引用注意事项</strong><br>老版本的 IE 是无法检测 DOM 节点与 JavaScript 代码之间的循环引用，会导致内存泄漏。如今，现代的浏览器（包括 IE 和 Microsoft Edge）使用了更先进的垃圾回收算法，已经可以正确检测和处理循环引用了。换言之，回收节点内存时，不必非要调用 removeEventListener 了。</p>
<h5 id="脱离-DOM-的引用"><a href="#脱离-DOM-的引用" class="headerlink" title="脱离 DOM 的引用"></a>脱离 DOM 的引用</h5><p>有时，保存 DOM 节点内部数据结构很有用。假如你想快速更新表格的几行内容，把每一行 DOM 存成字典（JSON 键值对）或者数组很有意义。此时，同样的 DOM 元素存在两个引用：一个在 DOM 树中，另一个在字典中。将来你决定删除这些行时，需要把两个引用都清除.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var elements = &#123;</div><div class="line">    button: document.getElementById(&apos;button&apos;),</div><div class="line">    image: document.getElementById(&apos;image&apos;),</div><div class="line">    text: document.getElementById(&apos;text&apos;)</div><div class="line">&#125;;</div><div class="line">function doStuff() &#123;</div><div class="line">    image.src = &apos;http://some.url/image&apos;;</div><div class="line">    button.click();</div><div class="line">    console.log(text.innerHTML);</div><div class="line">    // 更多逻辑</div><div class="line">&#125;</div><div class="line">function removeButton() &#123;</div><div class="line">    // 按钮是 body 的后代元素</div><div class="line">    document.body.removeChild(document.getElementById(&apos;button&apos;));</div><div class="line">    // 此时，仍旧存在一个全局的 #button 的引用</div><div class="line">    // elements 字典。button 元素仍旧在内存中，不能被 GC 回收。</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此外还要考虑 DOM 树内部或子节点的引用问题。假如你的 JavaScript 代码中保存了表格某一个 \<td> 的引用。将来决定删除整个表格的时候，直觉认为 GC 会回收除了已保存的 \</td><td> 以外的其它节点。实际情况并非如此：此 \</td><td> 是表格的子节点，子元素与父元素是引用关系。由于代码保留了 \</td><td> 的引用，导致整个表格仍待在内存中。保存 DOM 元素引用的时候，要小心谨慎。</td></p>
<h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><blockquote>
<p>如果闭包的作用域中保存着一个 HTML 元素，则该元素无法被销毁。(下面代码来自高程)</p>
</blockquote>
<p>闭包是 JavaScript 开发的一个关键方面：匿名函数可以访问父级作用域的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function assgin() &#123;</div><div class="line">    var ele = document.getElementById(&apos;someEle&apos;);</div><div class="line">    ele.onclick = function()&#123;</div><div class="line">        alert(ele.id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上代码创建了一个作为 ele 元素事件处理程序的闭包，而这个闭包有创建了一个循环的引用，由于匿名函数保存了一个 assgin() 的活动对象的引用 ，因此无法减少对 ele 的引用次数 , 只要匿名函数存在，ele的引用次数至少是 1。我们可以稍微改写一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function assgin() &#123;</div><div class="line">    var ele = document.getElementById(&apos;someEle&apos;);</div><div class="line">    var id = ele.id</div><div class="line">    ele.onclick = function()&#123;</div><div class="line">        alert(id);</div><div class="line">    &#125;</div><div class="line">    ele = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，通过把 ele.id 的一个副本保存在一个变量中，并且在比保重引用该变量消除了循环引用，但是这样还不能解决内存泄露，<em>闭包会引用包含函数的整个活动对象</em>，而其中包含着 ele ，即使闭包不直接引用 ele ，包含函数的活动对象中也会保存 一个引用，因此需要把 ele 变量设置为 null ,这样就解除了对 DOM 对象的引用，减少其引用数，确保能正常回收。</p>
<p>关于内存的发现 chrome 的使用~暂时没有使用过，看不太明白，就不 copy 了。</p>
<p><a href="http://www.cnblogs.com/rubylouvre/p/3345294.html" target="_blank" rel="external">js闭包测试</a> =&gt; 看不懂~</p>
<h3 id="上述内容-copy-自下面二者："><a href="#上述内容-copy-自下面二者：" class="headerlink" title="上述内容 copy 自下面二者："></a>上述内容 copy 自下面二者：</h3><p><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html" target="_blank" rel="external">JavaScript 内存泄漏教程-阮一峰</a><br><a href="https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/" target="_blank" rel="external">4类 JavaScript 内存泄漏及如何避免</a></p>
<h2 id="ajax-原生实现"><a href="#ajax-原生实现" class="headerlink" title="ajax 原生实现"></a>ajax 原生实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var xhr = createXHR()</div><div class="line">xhr.onreadystatechange = function() &#123;</div><div class="line">    if(xhr.readyState == 4) &#123;</div><div class="line">        if(xhr.status == 200) &#123;</div><div class="line">            console.log(xhr.responeText)</div><div class="line">            //do sth...</div><div class="line">        &#125; else &#123;</div><div class="line">            console.log(&apos;request fail&apos; + xhr.status)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">xhr.open(&apos;get&apos;, &apos;hello.com&apos;, true)</div><div class="line">xhr.send(null);</div></pre></td></tr></table></figure>
<h2 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数。<br>这个口述我还是不知道怎么说，或许是应用不够~看了无数文章到头来敌不过忘记~也可能我理解的还是不到位吧~个人不解释了，放参考链接吧<br><a href="https://stackoverflow.com/questions/111102/how-do-javascript-closures-work" target="_blank" rel="external">How do JavaScript closures work?–StackOverflow</a><br><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">学习Javascript闭包（Closure）–阮一峰的网络日志</a><br><a href="https://zhuanlan.zhihu.com/p/22486908" target="_blank" rel="external">JS 中的闭包是什么–方应杭</a><br><a href="https://github.com/lin-xin/blog/issues/8" target="_blank" rel="external">JavaScript 中 闭包 的详解</a><br><a href="https://developer.mozilla.org/cn/docs/Web/JavaScript/Closures" target="_blank" rel="external">闭包–MDN</a><br><a href="http://hexin.life/2017/04/15/title-7/">闭包的应用</a></p>
<h2 id="html中一段文本内容-hdslakddnska8das-，将文本中含有数组-‘d’-‘a’-‘‘-‘8’-中的内容标记为红色文本-字符串有改动"><a href="#html中一段文本内容-hdslakddnska8das-，将文本中含有数组-‘d’-‘a’-‘‘-‘8’-中的内容标记为红色文本-字符串有改动" class="headerlink" title="html中一段文本内容 hdslakddnska8das ，将文本中含有数组[‘d’, ‘a’, ‘‘, ‘8’] 中的内容标记为红色文本(字符串有改动)"></a><a href="http://hexin.life/more/pdd.html">html中一段文本内容 hdslakd<em>dnska8das ，将文本中含有数组[‘d’, ‘a’, ‘</em>‘, ‘8’] 中的内容标记为红色文本(字符串有改动)</a></h2><h3 id="设定-html-结构"><a href="#设定-html-结构" class="headerlink" title="设定 html 结构"></a>设定 html 结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    &lt;style&gt;</div><div class="line">        .mark &#123;</div><div class="line">            color: red;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    </div><div class="line">&lt;html&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=&apos;textToMark&apos;&gt;</div><div class="line">        hdslakddnska8das</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="方法一-循环"><a href="#方法一-循环" class="headerlink" title="方法一:循环"></a>方法一:循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">const textToMark = document.querySelector(&apos;.textToMark&apos;);</div><div class="line"></div><div class="line">const text = textToMark.innerHTML;</div><div class="line"></div><div class="line">const arr = [&apos;d&apos;, &apos;a&apos;, &apos;*&apos;, &apos;8&apos;];</div><div class="line"></div><div class="line">const newText = text.split(&apos;&apos;);</div><div class="line"></div><div class="line">function toMark (textArr, arr) &#123;</div><div class="line">    for(let i = 0; i &lt; newText.length; i++) &#123;</div><div class="line">        for(let j = 0; j &lt; arr.length; j++) &#123;</div><div class="line">            if(newText[i] == arr[j]) &#123;</div><div class="line">                newText[i] = `&lt;span class=&apos;mark&apos;&gt;$&#123;newText[i]&#125;&lt;/span&gt;`;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return newText;</div><div class="line">&#125;</div><div class="line">toMark(newText, arr);</div><div class="line">textToMark.innerHTML = newText.join(&apos;&apos;);</div></pre></td></tr></table></figure>
<h3 id="方法二-字符串的-replace"><a href="#方法二-字符串的-replace" class="headerlink" title="方法二: 字符串的 replace"></a>方法二: 字符串的 replace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const textToMark = document.querySelector(&apos;.textToMark&apos;);</div><div class="line"></div><div class="line">const text = textToMark.innerHTML;</div><div class="line"></div><div class="line">const reg = /[da\*8]+/g;</div><div class="line"></div><div class="line">var newtext = text.replace(reg, (match) =&gt; &#123;</div><div class="line">    return match = `&lt;span class=&apos;mark&apos;&gt;$&#123;match&#125;&lt;/span&gt;`;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">textToMark.innerHTML = newtext;</div></pre></td></tr></table></figure>
<blockquote>
<p>代码为个人写出，如果有更好的办法欢迎指教</p>
</blockquote>
<h2 id="原生JS创建这样的-dom-结构-lt-div-id-’hello’-gt-lt-p-class-’textToMark’-gt-hdslakddnska8das-lt-p-gt-lt-div-gt"><a href="#原生JS创建这样的-dom-结构-lt-div-id-’hello’-gt-lt-p-class-’textToMark’-gt-hdslakddnska8das-lt-p-gt-lt-div-gt" class="headerlink" title="原生JS创建这样的 dom 结构 &lt; div id=’hello’&gt; &lt; p class=’textToMark’&gt;hdslakddnska8das&lt; p&gt;&lt; /div&gt;"></a><a href="http://hexin.life/more/pdd.html">原生JS创建这样的 dom 结构 &lt; div id=’hello’&gt; &lt; p class=’textToMark’&gt;hdslakddnska8das&lt; p&gt;&lt; /div&gt;</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function createElement() &#123;</div><div class="line">        var body = document.body;</div><div class="line">    </div><div class="line">        var fragment = document.createDocumentFragment()      </div><div class="line"></div><div class="line">        var div = document.createElement(&apos;div&apos;)</div><div class="line">        div.setAttribute(&apos;id&apos;, &apos;hello&apos;)</div><div class="line"></div><div class="line">        fragment.appendChild(div)</div><div class="line"></div><div class="line">        var p = document.createElement(&apos;p&apos;)</div><div class="line">        p.className = &apos;textToMark&apos;</div><div class="line">        p.innerHTML = &apos;hdslakddnska8das&apos;</div><div class="line"></div><div class="line">        div.appendChild(p);</div><div class="line">        body.appendChild(fragment)</div><div class="line">    &#125;</div><div class="line">    createElement();</div></pre></td></tr></table></figure>
<p>感谢评论指出，已改正，关于节点创建 createElement 的效率问题，如果<strong>当插入的节点很多</strong>的时候，createElement 的效率会不如 createDocumentFragment .<br>createElement 每次 append 一个节点的时候，都会导致页面的重排，例如:</p>
<p>数据为这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;myList&quot;&gt;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;a href=&quot;www.baidu.com&quot;&gt;&lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;a href=&quot;www.helloworld.com&quot;&gt;&lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line"></div><div class="line">var data = [</div><div class="line">    &#123; name: &apos;36O秋招&apos;, url: &apos;http://campus.360.cn/2015/grad.html&apos;&#125;,</div><div class="line">    &#123; name: &apos;TX校招&apos;, url: &apos;http://join.qq.com/index.php&apos;&#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function appendChildToElement(appendToElement, data) &#123;</div><div class="line">    var a, li;</div><div class="line">    for (var i = 0, len = data.length; i &lt; len; i++) &#123;</div><div class="line">        a = document.createElement(&apos;a&apos;);</div><div class="line">        a.href = data[i].url;</div><div class="line">        a.appChild(document.createTextNode(data[i].name))</div><div class="line">        li = document.createElement(&apos;li&apos;);</div><div class="line">        li.appendChild(a);</div><div class="line">        appendChildToElement(li);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种情况下，data 内的每一个对象插入到 DOM 结构的时候都会触发一次重排，因此效率会较低。<br>但是我们可以改变他的 display 属性，临时从文档移除 ul ，即可有效减少重排次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var ul = document.getElementById(&apos;myList&apos;);</div><div class="line">ur.style.display = &apos;none&apos;;</div><div class="line">appendChildToElement(ul, data);</div><div class="line">ul.style.display = &apos;block&apos;;</div></pre></td></tr></table></figure>
<p>当然，更好的办法就是利用 createDocumentFragment 来创建一个文档片段.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var fragment = document.createElementFragment();</div><div class="line">appendChildToElement(fragment, data);</div><div class="line">document.getElementById(&apos;myList&apos;).appendChild(fragment);</div></pre></td></tr></table></figure></p>
<p>只访问了一次 DOM 节点，只触发了一次重排;再次感谢 @xaclincoln 的指出。</p>
<p>查了一些关于 createDocumentFragment 和 createElement 比较的文章。</p>
<ul>
<li><a href="https://stackoverflow.com/questions/3397161/should-i-use-document-createdocumentfragment-or-document-createelement" target="_blank" rel="external">createDocumentFragment or createElement–StackOverflow</a> </li>
<li><a href="https://jsperf.com/createelement-vs-createdocumentfragment" target="_blank" rel="external">createElement vs createDocumentFragment</a></li>
<li><a href="http://www.cnblogs.com/xesam/archive/2011/12/19/2293876.html" target="_blank" rel="external">createElement 与 createDocumentFragment 的点点区别</a></li>
<li><a href="http://www.cnitblog.com/asfman/articles/32614.html" target="_blank" rel="external">CreateDocumentFragment 的用处</a></li>
</ul>
<h2 id="创建一个函数对-JS-基础类型-function-boolean-array-number-string-object-进行值复制"><a href="#创建一个函数对-JS-基础类型-function-boolean-array-number-string-object-进行值复制" class="headerlink" title="创建一个函数对 JS 基础类型 ( function, boolean, array, number, string, object) 进行值复制"></a><a href="http://hexin.life/more/pdd.html">创建一个函数对 JS 基础类型 ( function, boolean, array, number, string, object) 进行值复制</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function valueToCopy (valueBeCopy) &#123;</div><div class="line">    var copyValue;</div><div class="line">    if (typeof (+valueBeCopy) === &apos;number&apos; &amp;&amp; typeof valueBeCopy !== &apos;object&apos;) &#123;</div><div class="line">        copyValue = +valueBeCopy;</div><div class="line">    &#125; else if (typeof valueBeCopy === &apos;string&apos;) &#123;</div><div class="line">        copyValue = parseInt(copyValue);</div><div class="line">    &#125; else if (typeof valueBeCopy === &apos;object&apos;)&#123;</div><div class="line">        if(Array.isArray(valueBeCopy)) &#123;</div><div class="line">            copyValue = valueBeCopy.slice();</div><div class="line">        &#125;</div><div class="line">        copyValue = JSON.parse(JSON.stringify(valueBeCopy))</div><div class="line">    &#125; </div><div class="line">        copyValue = valueBeCopy;</div><div class="line">    // console.log(copyValue)</div><div class="line">    return copyValue;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-8-2/50845409.jpg" alt="test img"></p>
<h2 id="url-输入到页面完成经历了什么"><a href="#url-输入到页面完成经历了什么" class="headerlink" title="url 输入到页面完成经历了什么"></a><a href="http://hexin.life/2017/08/10/title-23/">url 输入到页面完成经历了什么</a></h2><p><a href="http://hexin.life/2017/08/10/title-23/">专门整理一篇尽可能详细的~</a></p>
<h1 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a><a href="http://hexin.life/more/pdd.html">选择题</a></h1><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var input = document.getElementById(&apos;cls&apos;)</div><div class="line"></div><div class="line">input.onmouseup = function() &#123;</div><div class="line">    console.log(&apos;onmouseup&apos;)</div><div class="line">&#125;</div><div class="line">input.onmousedown = function() &#123;</div><div class="line">    console.log(&apos;onmousedown&apos;)</div><div class="line">&#125;</div><div class="line">input.onclick = function() &#123;</div><div class="line">    console.log(&apos;onclick&apos;)</div><div class="line">&#125;</div><div class="line">input.onfocus = function() &#123;</div><div class="line">    console.log(&apos;onfocus&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>onmousedown =&gt; onfocus =&gt; onmouseup =&gt; onclick</p>
</blockquote>
<h2 id="a-链接默认事件的阻止"><a href="#a-链接默认事件的阻止" class="headerlink" title="a 链接默认事件的阻止"></a><a href="http://hexin.life/more/pdd.html">a 链接默认事件的阻止</a></h2><blockquote>
<p>A. a.onmouseup = function(e) {<br>        e.preventDefault()<br>    }<br>B.  a.onmousedown = function(e) {<br>        e.preventDefault()<br>    }<br>C.  a.onclick = function(e) {<br>        e.preventDefault()<br>     }<br>D. A B C 都可以~</p>
</blockquote>
<ul>
<li>=&gt; 经测试只有 onclick 可以    </li>
</ul>
<h2 id="IE浏览器中-attachEvent-方式的事件绑定"><a href="#IE浏览器中-attachEvent-方式的事件绑定" class="headerlink" title="IE浏览器中 attachEvent 方式的事件绑定"></a>IE浏览器中 attachEvent 方式的事件绑定</h2><blockquote>
<p>attachEvent的this总是Window。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">el.attachEvent(&apos;onclick&apos;, function()&#123;</div><div class="line">    alert(this);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul>
<li>400 Bad Request<br>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。[31]</li>
<li>401 Unauthorized（RFC 7235）<br>参见：HTTP基本认证、HTTP摘要认证<br>类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。[32]该状态码表示当前请求需要用户验证。</li>
</ul>
<p>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>
<ul>
<li>402 Payment Required<br>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。[34]</li>
<li>403 Forbidden<br>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</li>
</ul>
<h2 id="选择正确答案-构造函数的引用地址"><a href="#选择正确答案-构造函数的引用地址" class="headerlink" title="选择正确答案(构造函数的引用地址)"></a>选择正确答案(构造函数的引用地址)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &apos;asd;  </div><div class="line">var str2 = new String(str)  var str1 = new String(str)</div><div class="line">console.log(str1 == str2 , str1 === str2)</div></pre></td></tr></table></figure>
<p>A. true  true<br>B. true false<br>C. false true<br>D. false false</p>
<p>//  =&gt; 输出 =&gt; false false</p>
<blockquote>
<p>因为 new 出来的俩个字符串引用地址不同</p>
</blockquote>
<h2 id="下面的输出结果-this-指向问题"><a href="#下面的输出结果-this-指向问题" class="headerlink" title="下面的输出结果 (this 指向问题)"></a>下面的输出结果 (this 指向问题)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function one () &#123; </div><div class="line">    this.name = 1;</div><div class="line">    return function two () &#123;</div><div class="line">            name = 2;</div><div class="line">        return function three() &#123;</div><div class="line">            var name = 3;</div><div class="line">            console.log(this.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">one()()()  // =&gt; 2;</div></pre></td></tr></table></figure>
<blockquote>
<p>还有一部分题忘掉喽 ~ 还有一些题具体的记不太清了，稍作修改，考点计本差不多，上面答案有的是我自己写的，有的是我 google 整理出来的，笔试期间摄像头坏了，而且不小心弹出去了三四次~就当练习了吧，反正简历也没准备好呢，哦，对了，考点大多都在高程中有详细讲解，需要好好看一下高程，面试应该会问一些 Node 和 ES6吧，如果有错误或者更好的方法请告诉我 </p>
</blockquote>
<p>更多笔试整理更新在<a href="http://hexin.life/2017/08/01/title-22/">个人博客</a>和<a href="https://github.com/18292843691/FE-interview" target="_blank" rel="external">Github</a>，欢迎小伙伴来一起准备秋招(求大腿抱)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="2017笔试" scheme="http:%5C%5Chexin.life/categories/2017%E7%AC%94%E8%AF%95/"/>
    
    
      <category term="笔试" scheme="http:%5C%5Chexin.life/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试准备</title>
    <link href="http:%5C%5Chexin.life/2017/07/29/title-21/"/>
    <id>http:\\hexin.life/2017/07/29/title-21/</id>
    <published>2017-07-29T08:09:22.000Z</published>
    <updated>2017-08-20T15:19:20.867Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="简答题："><a href="#简答题：" class="headerlink" title="简答题："></a>简答题：</h1><h2 id="settimeout-与-setInterval的区别，-及对他们的内存的分析"><a href="#settimeout-与-setInterval的区别，-及对他们的内存的分析" class="headerlink" title="settimeout 与 setInterval的区别， 及对他们的内存的分析"></a>settimeout 与 setInterval的区别， 及对他们的内存的分析</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol>
<li>setTimeout是在一段时间后调用指定函数（仅一次）</li>
<li>setInterval是每隔一段时间调用指定函数（N次）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function run()&#123;</div><div class="line">    // 其他代码</div><div class="line">    setTimeout(function()&#123;</div><div class="line">        run();</div><div class="line">    &#125;, 10000);</div><div class="line">&#125;</div><div class="line">run();</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上面的代码来说, 虽然设置的是10s执行一次, 但是实际时间却是需要// 其他代码的执行时间来确定<br>即setTimeout的间隔时间是, // setTimeout 的间隔时间 === 最小时间是(10s+)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setInterval(function()&#123;</div><div class="line">    run();</div><div class="line">&#125;, 10000);</div></pre></td></tr></table></figure>
<p>而setInterval, 不会有上面的问题, 但是如果run()的执行时间, 操作大于10s, 那么甚至可能跳过任务;</p>
<p><a href="http://www.pjhome.net/article/Javascript/822.html" target="_blank" rel="external">setInterval 和 setTimeout 会产生内存溢出</a><br><a href="https://gxnotes.com/article/65338.html" target="_blank" rel="external">JavaScript setInterval()方法是否导致内存泄漏？</a></p>
<h2 id="关于内存泄漏"><a href="#关于内存泄漏" class="headerlink" title="关于内存泄漏"></a>关于内存泄漏</h2><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。<br>对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。<br>不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。<br>（比如 C 语言）必须手动释放内存，程序员负责内存管理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">char * buffer;</div><div class="line">buffer = (char*) malloc(42);</div><div class="line"></div><div class="line">//...</div><div class="line"></div><div class="line">free(buffer)    //手动释放内存</div></pre></td></tr></table></figure></p>
<blockquote>
<p>上面是 C 语言代码，malloc方法用来申请内存，使用完毕之后，必须自己用free方法释放内存。<br>这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为”垃圾回收机制”（garbage collector）。</p>
</blockquote>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>怎么知道哪些内存不再需要呢？常用的方法是 ‘引用计数’, 语言的引擎有一张 ‘引用表’, 保存了内存里面所有的资源(通常是各种值)的引用次数，当一个值的引用次数为 0 时，表示这个值用不到了，因此可将其释放。</p>
<p>但是如果一个值不再用到了，引用次数却不为 0 ，垃圾回收机制却无法释放这块内存，从而导致内存泄漏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line">console.log(arr);</div></pre></td></tr></table></figure></p>
<p>打印完 arr 之后, arr 便用不到了，引用次数为 1, 但是它还会继续占用内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line">console.log(arr);</div><div class="line">arr = null;</div></pre></td></tr></table></figure></p>
<p>arr 重置为 null，就解除了对 [1, 2, 3, 4] 的引用，引用次数变成了 0 ，内存就可以释放了。</p>
<h3 id="JavaScript-内存管理"><a href="#JavaScript-内存管理" class="headerlink" title="JavaScript 内存管理"></a>JavaScript 内存管理</h3><p>JavaScript 是一种垃圾回收语言。垃圾回收语言通过周期性地检查先前分配的内存是否可达，帮助开发者管理内存。换言之，垃圾回收语言减轻了“内存仍可用”及“内存仍可达”的问题。两者的区别是微妙而重要的：仅有开发者了解哪些内存在将来仍会使用，而不可达内存通过算法确定和标记，适时被操作系统回收。</p>
<h3 id="JavaScript-内存泄漏"><a href="#JavaScript-内存泄漏" class="headerlink" title="JavaScript 内存泄漏"></a>JavaScript 内存泄漏</h3><p>垃圾回收语言的内存泄漏主因是不需要的引用。理解它之前，还需了解垃圾回收语言如何辨别内存的可达与不可达。</p>
<p><strong>Mark-and-sweep</strong></p>
<ol>
<li>大部分垃圾回收语言用的算法称之为 Mark-and-sweep 。算法由以下几步组成：<br>垃圾回收器创建了一个“roots”列表。Roots 通常是代码中全局变量的引用。JavaScript 中，“window” 对象是一个全局变量，被当作 root 。window 对象总是存在，因此垃圾回收器可以检查它和它的所有子对象是否存在（即不是垃圾）；</li>
<li>所有的 roots 被检查和标记为激活（即不是垃圾）。所有的子对象也被递归地检查。从 root 开始的所有对象如果是可达的，它就不被当作垃圾。</li>
<li>所有未被标记的内存会被当做垃圾，收集器现在可以释放内存，归还给操作系统了。</li>
</ol>
<p>现代的垃圾回收器改良了算法，但是本质是相同的：可达内存被标记，其余的被当作垃圾回收。</p>
<p>不需要的引用是指开发者明知内存引用不再需要，却由于某些原因，它仍被留在激活的 root 树中。在 JavaScript 中，不需要的引用是保留在代码中的变量，它不再需要，却指向一块本该被释放的内存。有些人认为这是开发者的错误。</p>
<p>为了理解 JavaScript 中最常见的内存泄漏，我们需要了解哪种方式的引用容易被遗忘。</p>
<h4 id="常见-JavaScript-内存泄漏"><a href="#常见-JavaScript-内存泄漏" class="headerlink" title="常见 JavaScript 内存泄漏"></a>常见 JavaScript 内存泄漏</h4><h5 id="意外的全局变量"><a href="#意外的全局变量" class="headerlink" title="意外的全局变量"></a>意外的全局变量</h5><p>JavaScript 处理未定义变量的方式比较宽松：未定义的变量会在全局对象创建一个新变量。在浏览器中，全局对象是 window 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function foo(arg) &#123;</div><div class="line">    bar = &quot;this is a hidden global variable&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>真相是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function foo(arg) &#123;</div><div class="line">    window.bar = &quot;this is an explicit global variable&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数 foo 内部忘记使用 var ，意外创建了一个全局变量。此例泄漏了一个简单的字符串，无伤大雅，但是有更糟的情况。</p>
<p>另一种意外的全局变量可能由 this 创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    this.variable = &quot;potential accidental global&quot;;</div><div class="line">&#125;</div><div class="line">// Foo 调用自己，this 指向了全局对象（window）</div><div class="line">// 而不是 undefined</div><div class="line">foo();</div></pre></td></tr></table></figure></p>
<blockquote>
<p>在 JavaScript 文件头部加上 ‘use strict’，可以避免此类错误发生。启用严格模式解析 JavaScript ，避免意外的全局变量。</p>
</blockquote>
<p>全局变量注意事项:<br>尽管我们讨论了一些意外的全局变量，但是仍有一些明确的全局变量产生的垃圾。它们被定义为不可回收（除非定义为空或重新分配）。尤其当全局变量用于临时存储和处理大量信息时，需要多加小心。如果必须使用全局变量存储大量数据时，确保用完以后把它设置为 null 或者重新定义。与全局变量相关的增加内存消耗的一个主因是缓存。缓存数据是为了重用，缓存必须有一个大小上限才有用。高内存消耗导致缓存突破上限，因为缓存内容无法被回收。</p>
<h5 id="被遗忘的计时器或回调函数"><a href="#被遗忘的计时器或回调函数" class="headerlink" title="被遗忘的计时器或回调函数"></a>被遗忘的计时器或回调函数</h5><p>在 JavaScript 中使用 setInterval 非常平常。一段常见的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var someResource = getData();</div><div class="line">setInterval(function() &#123;</div><div class="line">    var node = document.getElementById(&apos;Node&apos;);</div><div class="line">    if(node) &#123;</div><div class="line">        // 处理 node 和 someResource</div><div class="line">        node.innerHTML = JSON.stringify(someResource));</div><div class="line">    &#125;</div><div class="line">&#125;, 1000);</div></pre></td></tr></table></figure></p>
<p>此例说明了什么：与节点或数据关联的计时器不再需要，<em>node</em> 对象可以删除，整个回调函数也不需要了。可是，计时器回调函数仍然没被回收（计时器停止才会被回收）。同时，<em>someResource</em> 如果存储了大量的数据，也是无法被回收的。</p>
<p>对于观察者的例子，一旦它们不再需要（或者关联的对象变成不可达），明确地移除它们非常重要。老的 IE 6 是无法处理循环引用的。如今，即使没有明确移除它们，一旦观察者对象变成不可达，大部分浏览器是可以回收观察者处理函数的。</p>
<p>观察者代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var element = document.getElementById(&apos;button&apos;);</div><div class="line">function onClick(event) &#123;</div><div class="line">    element.innerHTML = &apos;text&apos;;</div><div class="line">&#125;</div><div class="line">element.addEventListener(&apos;click&apos;, onClick);   // =&gt; 循环调用</div></pre></td></tr></table></figure></p>
<p><strong>对象观察者和循环引用注意事项</strong><br>老版本的 IE 是无法检测 DOM 节点与 JavaScript 代码之间的循环引用，会导致内存泄漏。如今，现代的浏览器（包括 IE 和 Microsoft Edge）使用了更先进的垃圾回收算法，已经可以正确检测和处理循环引用了。换言之，回收节点内存时，不必非要调用 removeEventListener 了。</p>
<h5 id="脱离-DOM-的引用"><a href="#脱离-DOM-的引用" class="headerlink" title="脱离 DOM 的引用"></a>脱离 DOM 的引用</h5><p>有时，保存 DOM 节点内部数据结构很有用。假如你想快速更新表格的几行内容，把每一行 DOM 存成字典（JSON 键值对）或者数组很有意义。此时，同样的 DOM 元素存在两个引用：一个在 DOM 树中，另一个在字典中。将来你决定删除这些行时，需要把两个引用都清除.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var elements = &#123;</div><div class="line">    button: document.getElementById(&apos;button&apos;),</div><div class="line">    image: document.getElementById(&apos;image&apos;),</div><div class="line">    text: document.getElementById(&apos;text&apos;)</div><div class="line">&#125;;</div><div class="line">function doStuff() &#123;</div><div class="line">    image.src = &apos;http://some.url/image&apos;;</div><div class="line">    button.click();</div><div class="line">    console.log(text.innerHTML);</div><div class="line">    // 更多逻辑</div><div class="line">&#125;</div><div class="line">function removeButton() &#123;</div><div class="line">    // 按钮是 body 的后代元素</div><div class="line">    document.body.removeChild(document.getElementById(&apos;button&apos;));</div><div class="line">    // 此时，仍旧存在一个全局的 #button 的引用</div><div class="line">    // elements 字典。button 元素仍旧在内存中，不能被 GC 回收。</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此外还要考虑 DOM 树内部或子节点的引用问题。假如你的 JavaScript 代码中保存了表格某一个 \<td> 的引用。将来决定删除整个表格的时候，直觉认为 GC 会回收除了已保存的 \</td><td> 以外的其它节点。实际情况并非如此：此 \</td><td> 是表格的子节点，子元素与父元素是引用关系。由于代码保留了 \</td><td> 的引用，导致整个表格仍待在内存中。保存 DOM 元素引用的时候，要小心谨慎。</td></p>
<h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><blockquote>
<p>如果闭包的作用域中保存着一个 HTML 元素，则该元素无法被销毁。(下面代码来自高程)</p>
</blockquote>
<p>闭包是 JavaScript 开发的一个关键方面：匿名函数可以访问父级作用域的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function assgin() &#123;</div><div class="line">    var ele = document.getElementById(&apos;someEle&apos;);</div><div class="line">    ele.onclick = function()&#123;</div><div class="line">        alert(ele.id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上代码创建了一个作为 ele 元素事件处理程序的闭包，而这个闭包有创建了一个循环的引用，由于匿名函数保存了一个 assgin() 的活动对象的引用 ，因此无法减少对 ele 的引用次数 , 只要匿名函数存在，ele的引用次数至少是 1。我们可以稍微改写一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function assgin() &#123;</div><div class="line">    var ele = document.getElementById(&apos;someEle&apos;);</div><div class="line">    var id = ele.id</div><div class="line">    ele.onclick = function()&#123;</div><div class="line">        alert(id);</div><div class="line">    &#125;</div><div class="line">    ele = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，通过把 ele.id 的一个副本保存在一个变量中，并且在比保重引用该变量消除了循环引用，但是这样还不能解决内存泄露，<em>闭包会引用包含函数的整个活动对象</em>，而其中包含着 ele ，即使闭包不直接引用 ele ，包含函数的活动对象中也会保存 一个引用，因此需要把 ele 变量设置为 null ,这样就解除了对 DOM 对象的引用，减少其引用数，确保能正常回收。</p>
<p>关于内存的发现 chrome 的使用~暂时没有使用过，看不太明白，就不 copy 了。</p>
<p><a href="http://www.cnblogs.com/rubylouvre/p/3345294.html" target="_blank" rel="external">js闭包测试</a> =&gt; 看不懂~</p>
<h3 id="上述内容-copy-自下面二者："><a href="#上述内容-copy-自下面二者：" class="headerlink" title="上述内容 copy 自下面二者："></a>上述内容 copy 自下面二者：</h3><p><a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html" target="_blank" rel="external">JavaScript 内存泄漏教程-阮一峰</a><br><a href="https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/" target="_blank" rel="external">4类 JavaScript 内存泄漏及如何避免</a></p>
<h2 id="ajax-原生实现"><a href="#ajax-原生实现" class="headerlink" title="ajax 原生实现"></a>ajax 原生实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var xhr = createXHR()</div><div class="line">xhr.onreadystatechange = function() &#123;</div><div class="line">    if(xhr.readyState == 4) &#123;</div><div class="line">        if(xhr.status == 200) &#123;</div><div class="line">            console.log(xhr.responeText)</div><div class="line">            //do sth...</div><div class="line">        &#125; else &#123;</div><div class="line">            console.log(&apos;request fail&apos; + xhr.status)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">xhr.open(&apos;get&apos;, &apos;hello.com&apos;, true)</div><div class="line">xhr.send(null);</div></pre></td></tr></table></figure>
<h2 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h2><p>闭包是指有权访问另一个函数作用域中的变量的函数。<br>这个口述我还是不知道怎么说，或许是应用不够~看了无数文章到头来敌不过忘记~也可能我理解的还是不到位吧~个人不解释了，放参考链接吧<br><a href="https://stackoverflow.com/questions/111102/how-do-javascript-closures-work" target="_blank" rel="external">How do JavaScript closures work?–StackOverflow</a><br><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">学习Javascript闭包（Closure）–阮一峰的网络日志</a><br><a href="https://zhuanlan.zhihu.com/p/22486908" target="_blank" rel="external">JS 中的闭包是什么–方应杭</a><br><a href="https://github.com/lin-xin/blog/issues/8" target="_blank" rel="external">JavaScript 中 闭包 的详解</a><br><a href="https://developer.mozilla.org/cn/docs/Web/JavaScript/Closures" target="_blank" rel="external">闭包–MDN</a><br><a href="http://hexin.life/2017/04/15/title-7/">闭包的应用</a></p>
<h2 id="html中一段文本内容-hdslakddnska8das-，将文本中含有数组-‘d’-‘a’-‘‘-‘8’-中的内容标记为红色文本-字符串有改动"><a href="#html中一段文本内容-hdslakddnska8das-，将文本中含有数组-‘d’-‘a’-‘‘-‘8’-中的内容标记为红色文本-字符串有改动" class="headerlink" title="html中一段文本内容 hdslakddnska8das ，将文本中含有数组[‘d’, ‘a’, ‘‘, ‘8’] 中的内容标记为红色文本(字符串有改动)"></a><a href="http://hexin.life/more/pdd.html">html中一段文本内容 hdslakd<em>dnska8das ，将文本中含有数组[‘d’, ‘a’, ‘</em>‘, ‘8’] 中的内容标记为红色文本(字符串有改动)</a></h2><h3 id="设定-html-结构"><a href="#设定-html-结构" class="headerlink" title="设定 html 结构"></a>设定 html 结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    &lt;style&gt;</div><div class="line">        .mark &#123;</div><div class="line">            color: red;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    </div><div class="line">&lt;html&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=&apos;textToMark&apos;&gt;</div><div class="line">        hdslakddnska8das</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="方法一-循环"><a href="#方法一-循环" class="headerlink" title="方法一:循环"></a>方法一:循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">const textToMark = document.querySelector(&apos;.textToMark&apos;);</div><div class="line"></div><div class="line">const text = textToMark.innerHTML;</div><div class="line"></div><div class="line">const arr = [&apos;d&apos;, &apos;a&apos;, &apos;*&apos;, &apos;8&apos;];</div><div class="line"></div><div class="line">const newText = text.split(&apos;&apos;);</div><div class="line"></div><div class="line">function toMark (textArr, arr) &#123;</div><div class="line">    for(let i = 0; i &lt; newText.length; i++) &#123;</div><div class="line">        for(let j = 0; j &lt; arr.length; j++) &#123;</div><div class="line">            if(newText[i] == arr[j]) &#123;</div><div class="line">                newText[i] = `&lt;span class=&apos;mark&apos;&gt;$&#123;newText[i]&#125;&lt;/span&gt;`;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return newText;</div><div class="line">&#125;</div><div class="line">toMark(newText, arr);</div><div class="line">textToMark.innerHTML = newText.join(&apos;&apos;);</div></pre></td></tr></table></figure>
<h3 id="方法二-字符串的-replace"><a href="#方法二-字符串的-replace" class="headerlink" title="方法二: 字符串的 replace"></a>方法二: 字符串的 replace</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const textToMark = document.querySelector(&apos;.textToMark&apos;);</div><div class="line"></div><div class="line">const text = textToMark.innerHTML;</div><div class="line"></div><div class="line">const reg = /[da\*8]+/g;</div><div class="line"></div><div class="line">var newtext = text.replace(reg, (match) =&gt; &#123;</div><div class="line">    return match = `&lt;span class=&apos;mark&apos;&gt;$&#123;match&#125;&lt;/span&gt;`;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">textToMark.innerHTML = newtext;</div></pre></td></tr></table></figure>
<blockquote>
<p>代码为个人写出，如果有更好的办法欢迎指教</p>
</blockquote>
<h2 id="原生JS创建这样的-dom-结构-lt-div-id-’hello’-gt-lt-p-class-’textToMark’-gt-hdslakddnska8das-lt-p-gt-lt-div-gt"><a href="#原生JS创建这样的-dom-结构-lt-div-id-’hello’-gt-lt-p-class-’textToMark’-gt-hdslakddnska8das-lt-p-gt-lt-div-gt" class="headerlink" title="原生JS创建这样的 dom 结构 &lt; div id=’hello’&gt; &lt; p class=’textToMark’&gt;hdslakddnska8das&lt; p&gt;&lt; /div&gt;"></a><a href="http://hexin.life/more/pdd.html">原生JS创建这样的 dom 结构 &lt; div id=’hello’&gt; &lt; p class=’textToMark’&gt;hdslakddnska8das&lt; p&gt;&lt; /div&gt;</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function createElement() &#123;</div><div class="line">        var body = document.body;</div><div class="line">    </div><div class="line">        var fragment = document.createDocumentFragment()      </div><div class="line"></div><div class="line">        var div = document.createElement(&apos;div&apos;)</div><div class="line">        div.setAttribute(&apos;id&apos;, &apos;hello&apos;)</div><div class="line"></div><div class="line">        fragment.appendChild(div)</div><div class="line"></div><div class="line">        var p = document.createElement(&apos;p&apos;)</div><div class="line">        p.className = &apos;textToMark&apos;</div><div class="line">        p.innerHTML = &apos;hdslakddnska8das&apos;</div><div class="line"></div><div class="line">        div.appendChild(p);</div><div class="line">        body.appendChild(fragment)</div><div class="line">    &#125;</div><div class="line">    createElement();</div></pre></td></tr></table></figure>
<p>感谢评论指出，已改正，关于节点创建 createElement 的效率问题，如果<strong>当插入的节点很多</strong>的时候，createElement 的效率会不如 createDocumentFragment .<br>createElement 每次 append 一个节点的时候，都会导致页面的重排，例如:</p>
<p>数据为这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;myList&quot;&gt;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;a href=&quot;www.baidu.com&quot;&gt;&lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;a href=&quot;www.helloworld.com&quot;&gt;&lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line"></div><div class="line">var data = [</div><div class="line">    &#123; name: &apos;36O秋招&apos;, url: &apos;http://campus.360.cn/2015/grad.html&apos;&#125;,</div><div class="line">    &#123; name: &apos;TX校招&apos;, url: &apos;http://join.qq.com/index.php&apos;&#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function appendChildToElement(appendToElement, data) &#123;</div><div class="line">    var a, li;</div><div class="line">    for (var i = 0, len = data.length; i &lt; len; i++) &#123;</div><div class="line">        a = document.createElement(&apos;a&apos;);</div><div class="line">        a.href = data[i].url;</div><div class="line">        a.appChild(document.createTextNode(data[i].name))</div><div class="line">        li = document.createElement(&apos;li&apos;);</div><div class="line">        li.appendChild(a);</div><div class="line">        appendChildToElement(li);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种情况下，data 内的每一个对象插入到 DOM 结构的时候都会触发一次重排，因此效率会较低。<br>但是我们可以改变他的 display 属性，临时从文档移除 ul ，即可有效减少重排次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var ul = document.getElementById(&apos;myList&apos;);</div><div class="line">ur.style.display = &apos;none&apos;;</div><div class="line">appendChildToElement(ul, data);</div><div class="line">ul.style.display = &apos;block&apos;;</div></pre></td></tr></table></figure>
<p>当然，更好的办法就是利用 createDocumentFragment 来创建一个文档片段.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var fragment = document.createElementFragment();</div><div class="line">appendChildToElement(fragment, data);</div><div class="line">document.getElementById(&apos;myList&apos;).appendChild(fragment);</div></pre></td></tr></table></figure></p>
<p>只访问了一次 DOM 节点，只触发了一次重排;再次感谢 @xaclincoln 的指出。</p>
<p>查了一些关于 createDocumentFragment 和 createElement 比较的文章。</p>
<ul>
<li><a href="https://stackoverflow.com/questions/3397161/should-i-use-document-createdocumentfragment-or-document-createelement" target="_blank" rel="external">createDocumentFragment or createElement–StackOverflow</a> </li>
<li><a href="https://jsperf.com/createelement-vs-createdocumentfragment" target="_blank" rel="external">createElement vs createDocumentFragment</a></li>
<li><a href="http://www.cnblogs.com/xesam/archive/2011/12/19/2293876.html" target="_blank" rel="external">createElement 与 createDocumentFragment 的点点区别</a></li>
<li><a href="http://www.cnitblog.com/asfman/articles/32614.html" target="_blank" rel="external">CreateDocumentFragment 的用处</a></li>
</ul>
<h2 id="创建一个函数对-JS-基础类型-function-boolean-array-number-string-object-进行值复制"><a href="#创建一个函数对-JS-基础类型-function-boolean-array-number-string-object-进行值复制" class="headerlink" title="创建一个函数对 JS 基础类型 ( function, boolean, array, number, string, object) 进行值复制"></a><a href="http://hexin.life/more/pdd.html">创建一个函数对 JS 基础类型 ( function, boolean, array, number, string, object) 进行值复制</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function valueToCopy (valueBeCopy) &#123;</div><div class="line">    var copyValue;</div><div class="line">    if (typeof (+valueBeCopy) === &apos;number&apos; &amp;&amp; typeof valueBeCopy !== &apos;object&apos;) &#123;</div><div class="line">        copyValue = +valueBeCopy;</div><div class="line">    &#125; else if (typeof valueBeCopy === &apos;string&apos;) &#123;</div><div class="line">        copyValue = parseInt(copyValue);</div><div class="line">    &#125; else if (typeof valueBeCopy === &apos;object&apos;)&#123;</div><div class="line">        if(Array.isArray(valueBeCopy)) &#123;</div><div class="line">            copyValue = valueBeCopy.slice();</div><div class="line">        &#125;</div><div class="line">        copyValue = JSON.parse(JSON.stringify(valueBeCopy))</div><div class="line">    &#125; </div><div class="line">        copyValue = valueBeCopy;</div><div class="line">    // console.log(copyValue)</div><div class="line">    return copyValue;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-8-2/50845409.jpg" alt="test img"></p>
<h2 id="url-输入到页面完成经历了什么"><a href="#url-输入到页面完成经历了什么" class="headerlink" title="url 输入到页面完成经历了什么"></a><a href="http://hexin.life/2017/08/10/title-23/">url 输入到页面完成经历了什么</a></h2><p><a href="http://hexin.life/2017/08/10/title-23/">专门整理一篇尽可能详细的~</a></p>
<h1 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a><a href="http://hexin.life/more/pdd.html">选择题</a></h1><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var input = document.getElementById(&apos;cls&apos;)</div><div class="line"></div><div class="line">input.onmouseup = function() &#123;</div><div class="line">    console.log(&apos;onmouseup&apos;)</div><div class="line">&#125;</div><div class="line">input.onmousedown = function() &#123;</div><div class="line">    console.log(&apos;onmousedown&apos;)</div><div class="line">&#125;</div><div class="line">input.onclick = function() &#123;</div><div class="line">    console.log(&apos;onclick&apos;)</div><div class="line">&#125;</div><div class="line">input.onfocus = function() &#123;</div><div class="line">    console.log(&apos;onfocus&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>onmousedown =&gt; onfocus =&gt; onmouseup =&gt; onclick</p>
</blockquote>
<h2 id="a-链接默认事件的阻止"><a href="#a-链接默认事件的阻止" class="headerlink" title="a 链接默认事件的阻止"></a><a href="http://hexin.life/more/pdd.html">a 链接默认事件的阻止</a></h2><blockquote>
<p>A. a.onmouseup = function(e) {<br>        e.preventDefault()<br>    }<br>B.  a.onmousedown = function(e) {<br>        e.preventDefault()<br>    }<br>C.  a.onclick = function(e) {<br>        e.preventDefault()<br>     }<br>D. A B C 都可以~</p>
</blockquote>
<ul>
<li>=&gt; 经测试只有 onclick 可以    </li>
</ul>
<h2 id="IE浏览器中-attachEvent-方式的事件绑定"><a href="#IE浏览器中-attachEvent-方式的事件绑定" class="headerlink" title="IE浏览器中 attachEvent 方式的事件绑定"></a>IE浏览器中 attachEvent 方式的事件绑定</h2><blockquote>
<p>attachEvent的this总是Window。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">el.attachEvent(&apos;onclick&apos;, function()&#123;</div><div class="line">    alert(this);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><ul>
<li>400 Bad Request<br>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。[31]</li>
<li>401 Unauthorized（RFC 7235）<br>参见：HTTP基本认证、HTTP摘要认证<br>类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。[32]该状态码表示当前请求需要用户验证。</li>
</ul>
<p>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>
<ul>
<li>402 Payment Required<br>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。[34]</li>
<li>403 Forbidden<br>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</li>
</ul>
<h2 id="选择正确答案-构造函数的引用地址"><a href="#选择正确答案-构造函数的引用地址" class="headerlink" title="选择正确答案(构造函数的引用地址)"></a>选择正确答案(构造函数的引用地址)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &apos;asd;  </div><div class="line">var str2 = new String(str)  var str1 = new String(str)</div><div class="line">console.log(str1 == str2 , str1 === str2)</div></pre></td></tr></table></figure>
<p>A. true  true<br>B. true false<br>C. false true<br>D. false false</p>
<p>//  =&gt; 输出 =&gt; false false</p>
<blockquote>
<p>因为 new 出来的俩个字符串引用地址不同</p>
</blockquote>
<h2 id="下面的输出结果-this-指向问题"><a href="#下面的输出结果-this-指向问题" class="headerlink" title="下面的输出结果 (this 指向问题)"></a>下面的输出结果 (this 指向问题)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function one () &#123; </div><div class="line">    this.name = 1;</div><div class="line">    return function two () &#123;</div><div class="line">            name = 2;</div><div class="line">        return function three() &#123;</div><div class="line">            var name = 3;</div><div class="line">            console.log(this.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">one()()()  // =&gt; 2;</div></pre></td></tr></table></figure>
<blockquote>
<p>还有一部分题忘掉喽 ~ 还有一些题具体的记不太清了，稍作修改，考点计本差不多，上面答案有的是我自己写的，有的是我 google 整理出来的，笔试期间摄像头坏了，而且不小心弹出去了三四次~就当练习了吧，反正简历也没准备好呢，哦，对了，考点大多都在高程中有详细讲解，需要好好看一下高程，面试应该会问一些 Node 和 ES6吧，如果有错误或者更好的方法请告诉我 </p>
</blockquote>
<p>更多笔试整理更新在<a href="http://hexin.life/2017/08/01/title-22/">个人博客</a>和<a href="https://github.com/18292843691/FE-interview" target="_blank" rel="external">Github</a>，欢迎小伙伴来一起准备秋招(求大腿抱)。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="使用-typeof-能得到哪些基础类型"><a href="#使用-typeof-能得到哪些基础类型" class="headerlink" title="使用 typeof 能得到哪些基础类型"></a>使用 typeof 能得到哪些基础类型</h2><ul>
<li>undefined</li>
<li>boolean</li>
<li>Number</li>
<li>String</li>
<li>Object          =&gt; null, object, array</li>
<li><p>Function</p>
<h2 id="何时使用-何时使用"><a href="#何时使用-何时使用" class="headerlink" title="何时使用 === 何时使用 =="></a>何时使用 === 何时使用 ==</h2></li>
<li><p>不需要判断类型是否相等，即需要隐式类型转换的时候使用 ==<br>判断对象中属性是否存在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if(obj.a == nul)  // =&gt; 等同于  obj.a === null || obj.a === undefined</div><div class="line">// =&gt; jquery 推荐写法(源码)</div></pre></td></tr></table></figure>
</li>
<li><p>其他情况全部用 ===</p>
</li>
</ul>
<h2 id="继承示例"><a href="#继承示例" class="headerlink" title="继承示例"></a>继承示例</h2><p>示例一:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">function GetArray(arr) &#123;</div><div class="line">    if(Array.isArray(arr)) &#123;</div><div class="line">        this.arr = arr</div><div class="line">    &#125; else if (typeof arr === &apos;string&apos;)&#123;</div><div class="line">        this.arr = arr.split(&apos;&apos;)</div><div class="line">    &#125; else &#123;</div><div class="line">        this.arr = [arr]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GetArray.prototype.copy = function(newArr) &#123;</div><div class="line">    return this.arr = newArr.slice()</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 输入 </div><div class="line">GetArray.prototype.delete = function(num, index, val) &#123;</div><div class="line">    if(val) &#123;</div><div class="line">        return this.arr.splice(findIndex((val)=&gt; &#123;</div><div class="line">            return val === val</div><div class="line">        &#125;), num || 1)</div><div class="line">    &#125; else &#123;</div><div class="line">        return this.arr.splice(index, num || 1)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var arr1 = [1,2,3,4]</div><div class="line">var arr2 = []</div><div class="line">var arr = new GetArray(arr1)</div><div class="line"></div><div class="line">arr.copy(arr2)</div><div class="line">arr.delete(1, 0)</div></pre></td></tr></table></figure></p>
<p>示例二:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">function Person (name, age) &#123;</div><div class="line">    this.name = name || &apos;just people&apos;</div><div class="line">    this.age = age || &apos;forwver&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.skill = function(val) &#123;</div><div class="line">    console.log(&apos;i can &apos; + val)</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Man (name, age, sex) &#123;</div><div class="line">    this.name = this.name</div><div class="line">    this.age = this.age</div><div class="line">    this.sex = &apos;man&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.love = function(name) &#123;</div><div class="line">    if(name) &#123;</div><div class="line">        console.log(this.name + &apos; love &apos; + name)</div><div class="line">    &#125; else &#123;</div><div class="line">        console.log(this.name + &apos;love self&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Men (name, age, sex) &#123;</div><div class="line">    this.name = name || this.name</div><div class="line">    this.age = age || this.age</div><div class="line">    this.sex = &apos;men&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Man.prototype = new Person()</div><div class="line"></div><div class="line">Men.prototype = new Person()</div><div class="line"></div><div class="line">function Boy (name, age, sex) &#123;</div><div class="line">    this.name = name</div><div class="line">    this.age = age</div><div class="line">    this.sex = this.sex</div><div class="line">&#125;</div><div class="line"></div><div class="line">Boy.prototype = new Man(&apos;man&apos;)</div><div class="line"></div><div class="line">function Girl (name, age, sex) &#123;</div><div class="line">    this.name = name</div><div class="line">    this.age = age</div><div class="line">    this.sex = this.sex</div><div class="line">&#125;</div><div class="line"></div><div class="line">Girl.prototype = new Men(&apos;girl&apos;)</div><div class="line"></div><div class="line">var hx = new Boy(&apos;hx&apos;, 22)</div><div class="line">var xbk = new Girl(&apos;xbk&apos;, 20)</div><div class="line">var h = new Man(&apos;fh&apos;,0)</div></pre></td></tr></table></figure></p>
<p>##window.onload 和 DOMContentLoaded 的区别</p>
<p>###window.onload</p>
<ul>
<li>window.onload 需要等到全部的资源加载完成才会触发，不能够编写多个，编写多个时只会执行最后一个,该方法可以绑定到任意元素上</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">        window.onload = function() &#123;</div><div class="line">            console.log(&apos;DOM READY&apos;, 1)</div><div class="line">        &#125;</div><div class="line">        window.onload = function() &#123;</div><div class="line">            console.log(&apos;DOM READY&apos;, 2)</div><div class="line">        &#125;</div><div class="line">        window.onload = function() &#123;</div><div class="line">                console.log(&apos;DOM READY&apos;, 3)</div><div class="line">            &#125;</div><div class="line">            //DOM READY 3</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h3><ul>
<li>(HTML5) DOMContentLoaded 类似于 jQuery 的$(document).ready(),页面文档（DOM）完全加载并解析完毕之后触发，不会等图片，iframe, css 等资源加载完成。 如果多次使用，会按顺序依次执行相应任务</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        document.addEventListener("DOMContentLoaded", function (event) &#123;</div><div class="line">            alert("DOM ready1");</div><div class="line">        &#125;);</div><div class="line">        document.addEventListener("DOMContentLoaded", function (event) &#123;</div><div class="line">            alert("DOM ready2");</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        document.addEventListener("DOMContentLoaded", function (event) &#123;</div><div class="line">            alert("DOM ready3");</div><div class="line">        &#125;);</div><div class="line">        document.addEventListener("DOMContentLoaded", function (event) &#123;</div><div class="line">            alert("DOM ready4");</div><div class="line">        &#125;);</div><div class="line">// DOM ready1</div><div class="line">// DOM ready2</div><div class="line">// DOM ready3</div><div class="line">// DOM ready4</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>H5之前使用document.onreadystatechange 事件并手动判断document.readyState == ‘complete’   来代替。</p>
</blockquote>
<h3 id="document-readyState-readtstatechange"><a href="#document-readyState-readtstatechange" class="headerlink" title="document.readyState / readtstatechange"></a>document.readyState / readtstatechange</h3><p>用来表示 DOM 的加载状态，该属性值发生变化时会触发 readtstatechange 事件。有三种取值：</p>
<ul>
<li>loading:    DOM 加载中</li>
<li>interactive:    DOM 就绪但资源仍在加载中</li>
<li>compelte :    DOM 加载完成</li>
</ul>
<p>由于 IE8 支持 document.readState 属性,因此在 IE8 中常常用来做 DOMContentLoaded 的降级 (fallback)</p>
<blockquote>
<p> 注意IE8以前的IE不支持document.readyState属性。 可以执行 document.documentElement.doScroll(“left”)， 当DOM未就绪时执行该方法会抛出错误，以此检测DOM是否就绪。</p>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3></blockquote>
<p>jQuery也提供了三种方法载入页面事件</p>
<ul>
<li>$(document).ready(callback)：DOM就绪时执行回调函数，返回值为 docuument 的jQuery集合</li>
<li>$(function() {})：常用写法，返回和参数同上</li>
<li>$(window).load()：当 DOM 完全加载完毕时，页面渲染完成即图片等资源加载完成时触发<blockquote>
<p><a href="https://github.com/jquery/jquery/blob/master/src/core/ready.js" target="_blank" rel="external">.ready() 的实现</a></p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( <span class="built_in">document</span>.readyState === <span class="string">"complete"</span> ||</div><div class="line">    ( <span class="built_in">document</span>.readyState !== <span class="string">"loading"</span> &amp;&amp; !<span class="built_in">document</span>.documentElement.doScroll ) ) &#123;</div><div class="line">    <span class="comment">// Handle it asynchronously to allow scripts the opportunity to delay ready</span></div><div class="line">    <span class="built_in">window</span>.setTimeout( jQuery.ready );</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Use the handy event callback</span></div><div class="line">    <span class="built_in">document</span>.addEventListener( <span class="string">"DOMContentLoaded"</span>, completed );</div><div class="line">    <span class="comment">// A fallback to window.onload, that will always work</span></div><div class="line">    <span class="built_in">window</span>.addEventListener( <span class="string">"load"</span>, completed );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://harttle.com/2016/05/14/binding-document-ready-event.html" target="_blank" rel="external">兼容所有浏览器的 DOM 载入事件</a></li>
</ul>
<h2 id="用-JS创建10个-a-标签点击弹出对应序号"><a href="#用-JS创建10个-a-标签点击弹出对应序号" class="headerlink" title="用 JS创建10个 a 标签点击弹出对应序号"></a><a href="http://hexin.life/more/js-test-1.html">用 JS创建10个 a 标签点击弹出对应序号</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> body = <span class="built_in">document</span>.body;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                <span class="keyword">let</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line"></div><div class="line">                a.textContent = <span class="string">`<span class="subst">$&#123;i&#125;</span>`</span>;</div><div class="line">                a.style.cssText = <span class="string">'margin: 5px;'</span> + <span class="string">'color: #363636;'</span> + <span class="string">'font-size: 16px'</span>;</div><div class="line"></div><div class="line">                body.appendChild(a);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">let</span> ac = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line">            <span class="comment">//console.log(ac)</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line"></div><div class="line">                ac[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        alert(i)</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// ac[i].addEventListener('click', function() &#123;</span></div><div class="line">                    <span class="comment">//     alert(ac[i].textContent)</span></div><div class="line">                    <span class="comment">// &#125;)</span></div><div class="line">            &#125;</div><div class="line">        &#125;)()</div></pre></td></tr></table></figure>
<h2 id="下面代码执行结果"><a href="#下面代码执行结果" class="headerlink" title="下面代码执行结果"></a>下面代码执行结果</h2><h3 id="1-预解析"><a href="#1-预解析" class="headerlink" title="1. (预解析)"></a>1. (预解析)</h3><h4 id="1-1-下面代码执行结果"><a href="#1-1-下面代码执行结果" class="headerlink" title="1.1 下面代码执行结果"></a>1.1 下面代码执行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">console.log( func );</div><div class="line">var func = 123;</div><div class="line">    console.log( func );</div><div class="line">function func() &#123;</div><div class="line">  console.log( &apos;Hello js&apos; );</div><div class="line">&#125;</div><div class="line"></div><div class="line">// =&gt; 第一个 console.log(func) =&gt; 打印出下面 func 这个函数体</div><div class="line">// =&gt; 第二个 console.log(func) =&gt; 打印出刚刚定义的 func 123</div><div class="line">            //ƒ func() &#123;</div><div class="line">            //  console.log( &apos;Hello js&apos; );</div><div class="line">            //&#125;</div><div class="line">            //123</div><div class="line"></div><div class="line">/*********************/</div><div class="line"></div><div class="line">console.log( func() );</div><div class="line">var func = 123;</div><div class="line">console.log( func );</div><div class="line">function func() &#123;</div><div class="line">  console.log( &apos;Hello js&apos; );</div><div class="line">&#125;</div><div class="line">// =&gt; 第一个则打印函数内部的出 hello js</div><div class="line">// =&gt; 然后打印出自身的 undefined</div><div class="line">// =&gt; 第二个 console.log(func) 则打印出 123</div></pre></td></tr></table></figure>
<h4 id="1-2-下面代码执行结果"><a href="#1-2-下面代码执行结果" class="headerlink" title="1.2 下面代码执行结果"></a>1.2 下面代码执行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function func2 () &#123;</div><div class="line">  console.log(&apos;1&apos;, num );</div><div class="line">  var num = 456;       // =&gt; var num 会提前</div><div class="line">  console.log(&apos;2&apos;, num );</div><div class="line">&#125;</div><div class="line">var num = 123;</div><div class="line">func2(num);</div><div class="line">console.log(&apos;3&apos;,num)</div><div class="line">// 1 undefined</div><div class="line">// 2 456</div><div class="line">// 3 123</div></pre></td></tr></table></figure>
<h4 id="1-3-下面代码执行结果"><a href="#1-3-下面代码执行结果" class="headerlink" title="1.3 下面代码执行结果"></a>1.3 下面代码执行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function func3 () &#123;</div><div class="line">  console.log(&apos;1&apos;, num );</div><div class="line">  num = 456;         //=&gt;</div><div class="line">  console.log(&apos;2&apos;, num );</div><div class="line">&#125;</div><div class="line">var num = 123;</div><div class="line">func3( num );</div><div class="line">console.log( &apos;3&apos;,num );</div><div class="line">// 1 123</div><div class="line">// 2 456</div><div class="line">// 3 456</div></pre></td></tr></table></figure>
<h4 id="1-4下面代码执行结果"><a href="#1-4下面代码执行结果" class="headerlink" title="1.4下面代码执行结果"></a>1.4下面代码执行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var num = 123;</div><div class="line">function f1 () &#123;</div><div class="line">  console.log( num );  </div><div class="line">&#125;</div><div class="line">function f2 () &#123;</div><div class="line">  var num = 456;</div><div class="line">  f1();</div><div class="line">&#125;</div><div class="line">f2();</div><div class="line">console.log( num );</div><div class="line">// 123</div><div class="line">// 123</div><div class="line">// =&gt; 调用 f2() =&gt; 进入 f2() 内部，var num 被提前解析, f2() 内部执行 num =</div><div class="line">// 456 =&gt; 进入 f1() =&gt; 这里找不到 num 值, 向全局查询， 发现 num = 123; 打印</div><div class="line">// =&gt; 最后一个打印全局 num = 123;</div></pre></td></tr></table></figure>
<h3 id="1-下面代码执行结果"><a href="#1-下面代码执行结果" class="headerlink" title="1. 下面代码执行结果"></a>1. 下面代码执行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var length = 10;</div><div class="line">function fn() &#123;</div><div class="line">  console.log( this.length )</div><div class="line">&#125;</div><div class="line">var obj = &#123;</div><div class="line">  length: 5,</div><div class="line">  mathod: function( fn )&#123;</div><div class="line">    fn();</div><div class="line">    arguments[ 0 ]();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">obj.mathod( fn, 1 );</div><div class="line">// 10 2</div></pre></td></tr></table></figure>
<blockquote>
<p>// =&gt;  这里打印出了 10 和 2<br>// =&gt; 10 好理解， 这里难理解的是 2 .<br>// =&gt; 第一个 10 是因为 this 指向了 window， 第二个则是指向了函数内部，打印出来的是函数的长度 </p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-7-31/38769321.jpg" alt=""><br>如果将函数的 length 改为 len 则很明显了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var len = 10;</div><div class="line">function fn() &#123;</div><div class="line">    </div><div class="line">  console.log( this.len )</div><div class="line">&#125;</div><div class="line">var obj = &#123;</div><div class="line">  len: 5,</div><div class="line">  mathod: function()&#123;</div><div class="line">    fn();</div><div class="line">    arguments[ 0 ]();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">obj.mathod( fn , 2);</div><div class="line">// 10 undefined</div></pre></td></tr></table></figure>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-7-31/63463663.jpg" alt=""></p>
<blockquote>
<p>我只能理解到这里了，如果有什么错误，希望大神指教。</p>
</blockquote>
<p>整理来自：</p>
<ul>
<li><a href="http://www.jianshu.com/p/94ee757ca30d" target="_blank" rel="external">整理前端面试题(二):预解析及作用域 (含美团面试题)</a></li>
</ul>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview" target="_blank" rel="external">HTTP</a></h1><h2 id="HTTP-response-codes"><a href="#HTTP-response-codes" class="headerlink" title="HTTP response codes"></a>HTTP response codes</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="external">HTTP response codes</a></li>
<li><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="external">HTTP状态码</a></li>
<li><a href="https://aotu.io/notes/2016/01/28/3xx-of-http-status/" target="_blank" rel="external">你所知道的3xx状态码</a><h2 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP 2.0"></a>HTTP 2.0</h2></li>
<li>HTTP2.0性能增强的核心：二进制分帧</li>
<li>HTTP2.0 首部压缩</li>
<li>所有的HTTP2.0的请求都在一个TCP链接上</li>
<li>并行双向字节流的请求和响应</li>
<li>HTTP2.0的请求优先级</li>
<li>HTTP2.0的服务器推送</li>
</ul>
<p><a href="http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/" target="_blank" rel="external">TAT.bizaiHTTP2.0的奇妙日常</a><br><a href="http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/" target="_blank" rel="external">TAT.tennylvHTTP,HTTP2.0,SPDY,HTTPS你应该知道的一些事</a><br><a href="https://github.com/creeperyang/blog/issues/23" target="_blank" rel="external">HTTP2简介和基于HTTP2的Web优化</a><br><a href="https://zh.wikipedia.org/wiki/HTTP/2" target="_blank" rel="external">HTTP/2-维基百科</a></p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p><a href="http://www.runoob.com/w3cnote/https-ssl-intro.html" target="_blank" rel="external">HTTPS 与 SSL 证书概要</a><br><a href="http://velocity.oreilly.com.cn/2015/ppts/lizhenyu.pdf" target="_blank" rel="external">淘宝全站HTTPS实践</a></p>
<p>##<a href="http://www.cnblogs.com/tester-l/p/6018114.html" target="_blank" rel="external">HTTP协议中的短轮询、长轮询、长连接和短连接</a></p>
<h2 id="使用-HTTP-缓存：Etag-Last-Modified-与-Cache-Control"><a href="#使用-HTTP-缓存：Etag-Last-Modified-与-Cache-Control" class="headerlink" title="使用 HTTP 缓存：Etag, Last-Modified 与 Cache-Control"></a><a href="http://harttle.com/2017/04/04/using-http-cache.html" target="_blank" rel="external">使用 HTTP 缓存：Etag, Last-Modified 与 Cache-Control</a></h2><blockquote>
<p>这篇文章中的 Cache-Control 中的 no-cache 有误，no-cache 不是不可缓存的意思</p>
</blockquote>
<ul>
<li>“no-cache”表示必须先与服务器确认返回的响应是否发生了变化，然后才能使用该响应来满足后续对同一网址的请求。因此，如果存在合适的验证令牌 (ETag)，no-cache 会发起往返通信来验证缓存的响应，但如果资源未发生变化，则可避免下载。</li>
<li>相比之下，“no-store”则要简单得多。它直接禁止浏览器以及所有中间缓存存储任何版本的返回响应，例如，包含个人隐私数据或银行业务数据的响应。每次用户请求该资产时，都会向服务器发送请求，并下载完整的响应。</li>
</ul>
<p><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn" target="_blank" rel="external">详情见下方</a></p>
<h2 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h2><p><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn" target="_blank" rel="external">HTTP 缓存</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ" target="_blank" rel="external">HTTP 缓存-MDN</a></p>
<h1 id="简述如何实现一个模块加载器，实现类似-requirejs-的基本功能"><a href="#简述如何实现一个模块加载器，实现类似-requirejs-的基本功能" class="headerlink" title="简述如何实现一个模块加载器，实现类似 requirejs 的基本功能"></a>简述如何实现一个模块加载器，实现类似 requirejs 的基本功能</h1><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="实现数组的随机排序"><a href="#实现数组的随机排序" class="headerlink" title="实现数组的随机排序"></a>实现数组的随机排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组随机排序</span></div><div class="line">            <span class="keyword">var</span> arr = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">100</span>];</div><div class="line"></div><div class="line">            <span class="keyword">let</span> len = arr.length;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">RandomArray</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (arr.length == <span class="number">1</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> arr;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">                    <span class="keyword">let</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * len);</div><div class="line">                    arr.push(arr[random]);</div><div class="line">                    arr.splice(random, <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">console</span>.log(arr);</div><div class="line">                <span class="keyword">return</span> arr;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            RandomArray(arr);</div></pre></td></tr></table></figure>
<p>更多实现：</p>
<ul>
<li><a href="http://div.io/topic/1610" target="_blank" rel="external">数组元素随机化排序算法实现</a></li>
<li><a href="https://www.w3cplus.com/javascript/how-to-randomize-shuffle-a-javascript-array.html" target="_blank" rel="external">数组随机排序</a></li>
<li><a href="https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/#top" target="_blank" rel="external">Fisher–Yates shuffle 洗牌算法</a></li>
</ul>
<h2 id="实现数组的去重"><a href="#实现数组的去重" class="headerlink" title="实现数组的去重"></a>实现数组的去重</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var arr = [1, &apos;1&apos;, 1, 2, 3, 2, 4, &apos;5&apos;, 5];</div><div class="line"></div><div class="line">function duplicatesWithString(arr) &#123;</div><div class="line">    var newArr = [];</div><div class="line">    var tmpArr = [];</div><div class="line">    arr.forEach(function(val) &#123;</div><div class="line">        var key = (typeof val) + val;</div><div class="line">        if(!tmpArr[key]) &#123;            //如果为 undefined 就进入循环</div><div class="line">            tmpArr[key] = true;       //设置为 true 表示已经存在该数字</div><div class="line">            newArr.push(val)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    return newArr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">duplicatesWithString(arr);    // =&gt;  [1, &quot;1&quot;, 2, 3, 4, &quot;5&quot;, 5]</div><div class="line"></div><div class="line">/******************************/</div><div class="line"></div><div class="line">//如果想去掉字符串</div><div class="line">function duplicatesNoString(arr) &#123;</div><div class="line">    var newArr = [];</div><div class="line">    var tmpArr = [];</div><div class="line">    arr.forEach(function(val) &#123;</div><div class="line">        if(typeof val !== &apos;string&apos;) &#123;</div><div class="line">            if(!tmpArr[val]) &#123;            //如果为 undefined 就进入循环</div><div class="line">                tmpArr[val] = true;       //设置为 true 表示已经存在该数字</div><div class="line">                newArr.push(val);      </div><div class="line">            &#125;</div><div class="line">        &#125;       </div><div class="line">    &#125;)</div><div class="line">    return newArr;</div><div class="line">&#125;</div><div class="line">duplicatesNoString(arr)</div></pre></td></tr></table></figure>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>ES6中新增 set 数据结构</p>
<blockquote>
<p>set 中不能添加重复元素，如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var mySet = new Set();</div><div class="line"></div><div class="line">mySet.add(1); // Set &#123; 1 &#125;</div><div class="line">mySet.add(5); // Set &#123; 1, 5 &#125;</div><div class="line">mySet.add(5); // Set &#123; 1, 5 &#125;</div><div class="line">mySet.add(&apos;some text&apos;); // Set &#123; 1, 5, &apos;some text&apos; &#125;</div></pre></td></tr></table></figure>
<ol>
<li>因此我们可利用这个特性</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let arr1 = [1, &apos;1&apos;, 1, 2, 3, 2, 4, &apos;5&apos;, 5];</div><div class="line">let set = new Set(arr1);</div><div class="line">console.log(set) // =&gt;&#123;1, &quot;1&quot;, 2, 3, 4,&quot;5&quot;, 5&#125;</div></pre></td></tr></table></figure>
<ol>
<li>ES6中Array新增了一个静态方法Array.from，可以把类似数组的对象转换为数组(如通过 QuerySelectAll 得到的 Node List)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let arr2 = [1, &apos;1&apos;, 1, 2, 3, 2, 4, &apos;5&apos;, 5];</div><div class="line">let array = Array.from(new Set(arr2));</div><div class="line">console.log(array) // =&gt;[1, &quot;1&quot;, 2, 3, 4, &quot;5&quot;, 5]</div></pre></td></tr></table></figure>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/q1056843325/article/details/73277063" target="_blank" rel="external">六种方法数组去重</a><br><a href="http://blog.csser.me/posts/E4B880E8A18CE4BBA3E7A081E5AE9EE78EB0E695B0E7BB84E58EBBE9878DEFBC88ES6EFBC89" target="_blank" rel="external">一行代码实现数组去重（ES6）</a></p>
<h2 id="实现一个函数，输入-123456789-输出-123，465，789"><a href="#实现一个函数，输入-123456789-输出-123，465，789" class="headerlink" title="实现一个函数，输入 123456789 输出 123，465，789"></a>实现一个函数，输入 123456789 输出 123，465，789</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function cal(arr) &#123;</div><div class="line">        var newArr = [];</div><div class="line">        var arr = typeof arr === &apos;string&apos; ? arr : arr.toString();</div><div class="line">        arr = arr.split(&apos;&apos;);</div><div class="line">        arr.forEach(function(value, index) &#123;</div><div class="line">            if(index % 3 === 0 &amp;&amp; index != 0) &#123;</div><div class="line">                newArr.push(&apos;,&apos;)</div><div class="line">            &#125;</div><div class="line">            newArr.push(arr[index]);</div><div class="line">        &#125;)</div><div class="line">        return newArr.join(&apos;&apos;);</div><div class="line">    &#125;</div><div class="line">// 判断为三则push进新的数组</div></pre></td></tr></table></figure>
<h2 id="JavaScript-中-apply-、call、bind"><a href="#JavaScript-中-apply-、call、bind" class="headerlink" title="JavaScript 中 apply 、call、bind"></a>JavaScript 中 apply 、call、bind</h2><p><a href="http://blog.gdfengshuo.com/2017/03/21/6/" target="_blank" rel="external">JavaScript 中 apply 、call 的详解</a><br><a href="http://blog.csdn.net/xllily_11/article/details/51480723" target="_blank" rel="external">js的call() ，apply() 两种方法的区别和用法，最白话文的解释，让枯燥滚粗！</a></p>
<h2 id="JS-实现不用第三个变量交换俩个变量"><a href="#JS-实现不用第三个变量交换俩个变量" class="headerlink" title="JS 实现不用第三个变量交换俩个变量"></a>JS 实现不用第三个变量交换俩个变量</h2><p>我自己想的是前段时间学习 ES6 时遇到的；</p>
<blockquote>
<p>[a, b] = [b, a]</p>
</blockquote>
<p>然后网上搜了一下，发现有人整理的很全，就拉过来学习吧</p>
<p><a href="http://blog.csdn.net/q1056843325/article/details/53223914" target="_blank" rel="external"> 七种方案解决JavaScript交换两个变量值的问题</a></p>
<h2 id="实现对对象和数组的-forEach"><a href="#实现对对象和数组的-forEach" class="headerlink" title="实现对对象和数组的 forEach"></a>实现对对象和数组的 forEach</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">function forEach(obj, index, value, fn) &#123;</div><div class="line">    if (obj == null) return;</div><div class="line">    if (!fn) &#123;</div><div class="line">        if (typeof obj === &apos;function&apos; &amp;&amp; obj.call) &#123;</div><div class="line">            fn = Function</div><div class="line">        &#125; else if (typeof obj.forEach === &apos;function&apos; &amp;&amp; obj.forEach != arguments.callee) &#123;</div><div class="line">            // 如果对象内部已经实现 forEach ，例如数组</div><div class="line">            obj.forEach(index, value)</div><div class="line">            return;</div><div class="line">        &#125; else if (typeof obj.length == &apos;number&apos;) &#123;</div><div class="line">            // 如果是数组或者类数组的对象</div><div class="line">            _Array_forEach(obj, index, value)</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    _Function_forEach(fn || Object, obj, index, value)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function _Array_forEach(arr, index, value) &#123;</div><div class="line">    if(arr == null) return ;</div><div class="line">    let i = 0,</div><div class="line">        len = arr.length;</div><div class="line">    if(typeof arr === &apos;string&apos;) &#123;</div><div class="line">        for(; i &lt; len; i++) &#123;</div><div class="line">            index.call(value, arr.charAt(i), i, arr)</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        for(; i &lt; len; i++) &#123;</div><div class="line">            index.call(value, arr[i], i, arr)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function _Function_forEach (fn, obj, index, value) &#123;</div><div class="line">    for(let key in obj) &#123;</div><div class="line">        if(obj.hasOwnProperty(key))</div><div class="line">            index.call(value, obj[key], key, obj)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>采自 大神司徒正美<a href="http://www.cnblogs.com/rubylouvre/archive/2009/11/10/1599978.html" target="_blank" rel="external">javascript 的forEach函数</a></p>
<h2 id="实现对时间-xxxx-xx-xx-的获取"><a href="#实现对时间-xxxx-xx-xx-的获取" class="headerlink" title="实现对时间 xxxx-xx-xx 的获取"></a>实现对时间 xxxx-xx-xx 的获取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function formatDate(date) &#123;</div><div class="line">    if (!date) &#123;</div><div class="line">        date = new Date()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    const year = date.getFullYear(),</div><div class="line">        month = (date.getMonth() + 1),         // month 是从 0 开始</div><div class="line">        day = date.getDate(),</div><div class="line">        hours = date.getHours(),</div><div class="line">        minutes = date.getMinutes(),</div><div class="line">        seconds = date.getSeconds();</div><div class="line"></div><div class="line"></div><div class="line">    return year + &apos;-&apos; + month + &apos;-&apos; + day</div><div class="line">&#125;</div><div class="line"></div><div class="line">var date = new Date()</div><div class="line">var formatDate = formatDate(date)</div><div class="line">console.log(formatDate)</div><div class="line">2017-8-8</div></pre></td></tr></table></figure>
<h1 id="HTML-知识"><a href="#HTML-知识" class="headerlink" title="HTML 知识"></a>HTML 知识</h1><h2 id="用-div-实现-textarea"><a href="#用-div-实现-textarea" class="headerlink" title="用 div 实现 textarea"></a><a href="http://hexin.life/more/用div制作textarea.html">用 div 实现 textarea</a></h2><blockquote>
<p>Textarea 对象代表 HTML 表单中的一个文本域 (text-area)。</p>
</blockquote>
<ol>
<li>首先我们需要可输入功能<ul>
<li>HTML5 新增 <a href="http://www.runoob.com/tags/att-global-contenteditable.html" target="_blank" rel="external">contenteditable</a> 属性<br>他有 true 和 flase 俩个值，true  指定元素是可编辑的</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div contenteditable=&apos;true&apos;， class=&apos;div-text&apos;&gt;</div><div class="line">        hello</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>此时效果已经有了，点击是自带聚焦发光还挺好看的，但是只有点击上的时候才会显示可输入框，我们加一个 border 模拟一下即可。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div-text</span>&#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">80px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.div-text</span>&#123;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后是自定义拖动大小, 利用 CSS3 的 resize ，再增加 overflow 属性<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin</span>: 50<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">padding-left</span>: 3<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</div><div class="line"><span class="selector-tag">resize</span>: <span class="selector-tag">both</span>;</div><div class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</div></pre></td></tr></table></figure></p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-8-1/97830271.jpg" alt="测试图片"></p>
<blockquote>
<p>不喜欢 textarea 右下角图标时，也可以利用这个属性去除右下角的拖动图标</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">resize</span>: <span class="selector-tag">none</span>;</div></pre></td></tr></table></figure>
<h2 id="canvas、svg的区别"><a href="#canvas、svg的区别" class="headerlink" title="canvas、svg的区别"></a>canvas、svg的区别</h2><blockquote>
<p>由于我没做过 svg ，canvas 也只是联系国一个时钟而已，就在这里搜了一些资料。</p>
</blockquote>
<ul>
<li><a href="https://www.zhihu.com/question/19690014" target="_blank" rel="external">SVG 与 HTML5 的 canvas 各有什么优点，哪个更有前途？</a></li>
<li><a href="http://www.w3school.com.cn/html5/html_5_canvas_vs_svg.asp" target="_blank" rel="external">Canvas 和 SVG 都允许您在浏览器中创建图形，但是它们在根本上是不同的-w3school</a></li>
<li><a href="https://segmentfault.com/q/1010000000459364" target="_blank" rel="external">有了css3之后，我们还需要canvas还有svg吗？</a></li>
<li><a href="https://github.com/abcrun/abcrun.github.com/issues/13" target="_blank" rel="external">Canvas 与 SVG的主要区别 #13-github</a></li>
<li><a href="https://segmentfault.com/a/1190000005991537" target="_blank" rel="external">SVG初体验</a></li>
</ul>
<h2 id="可访问性"><a href="#可访问性" class="headerlink" title="可访问性"></a>可访问性</h2><h3 id="如何提高网站的可访问性（Accessibility）？——来自W3C的指南"><a href="#如何提高网站的可访问性（Accessibility）？——来自W3C的指南" class="headerlink" title="如何提高网站的可访问性（Accessibility）？——来自W3C的指南"></a><a href="https://zhuanlan.zhihu.com/p/23873058" target="_blank" rel="external">如何提高网站的可访问性（Accessibility）？——来自W3C的指南</a></h3><h3 id="10步大幅提升网站可访问性"><a href="#10步大幅提升网站可访问性" class="headerlink" title="10步大幅提升网站可访问性"></a><a href="http://isux.tencent.com/ten-steps-enhance-web-accessibility.html" target="_blank" rel="external">10步大幅提升网站可访问性</a></h3><h1 id="CSS-知识"><a href="#CSS-知识" class="headerlink" title="CSS 知识"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Reference" target="_blank" rel="external">CSS 知识</a></h1><h2 id="链接的伪类顺序（-link-visited-hover-active）"><a href="#链接的伪类顺序（-link-visited-hover-active）" class="headerlink" title="链接的伪类顺序（:link :visited :hover :active）"></a>链接的伪类顺序（:link :visited :hover :active）</h2><p><a href="http://www.dengzhr.com/frontend/css/344" target="_blank" rel="external">CSS中超链接伪类link,visited,hover,active的顺序分析</a></p>
<h2 id="CSS中link-和-import的区别是"><a href="#CSS中link-和-import的区别是" class="headerlink" title="CSS中link 和@import的区别是"></a>CSS中link 和@import的区别是</h2><ul>
<li>差别1：老祖宗的差别。link属于XHTML标签，而@import完全是CSS提供的一种方式。</li>
</ul>
<p>link标签除了可以加载CSS外，还可以做很多其它的事情，比如定义RSS，定义rel连接属性等，@import就只能加载CSS了。</p>
<ul>
<li><p>差别2：加载顺序的差别。当一个页面被加载的时候（就是被浏览者浏览的时候），link引用的CSS会同时被加载，而@import引用的CSS会等到页面全部被下载完再被加载。所以有时候浏览@import加载CSS的页面时开始会没有样式（就是闪烁），网速慢的时候还挺明显（梦之都加载CSS的方式就是使用@import，我一边下载一边浏览梦之都网页时，就会出现上述问题）。</p>
</li>
<li><p>差别3：兼容性的差别。由于@import是CSS2.1提出的所以老的浏览器不支持，@import只有在IE5以上的才能识别，而link标签无此问题。</p>
</li>
<li><p>差别4：使用dom控制样式时的差别。当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的。</p>
</li>
</ul>
<p>大致就这几种差别了（如果还有什么差别，大家告诉我，我再补充上去），其它的都一样，从上面的分析来看，还是使用link标签比较好。</p>
<ul>
<li>差别5：@import可以在css中再次引入其他样式表，比如可以创建一个主样式表，在主样式表中再引入其他的样式表，如：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">main</span><span class="selector-class">.css</span></div><div class="line">———————<span class="selector-tag">-</span></div><div class="line">@<span class="keyword">import</span> “sub1.css”;</div><div class="line">@<span class="keyword">import</span> “sub2.css”;</div><div class="line"></div><div class="line"><span class="selector-tag">sub1</span><span class="selector-class">.css</span></div><div class="line">———————<span class="selector-tag">-</span></div><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:red&#125;;</div><div class="line"></div><div class="line"><span class="selector-tag">sub2</span><span class="selector-class">.css</span></div><div class="line">———————<span class="selector-tag">-</span></div><div class="line"><span class="selector-class">.myclass</span> &#123;<span class="attribute">color</span>:blue&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这样更利于修改和扩展<br>(<em>但是这样做有一个缺点，会对网站服务器产生过多的HTTP请求，以前是一个文件，而现在却是两个或更多文件了，服务器的压力增大，浏览量大的网站还是谨慎使用。有兴趣的可以观察一下像新浪等网站的首页或栏目首页代码，他们总会把css或js直接写在html里，而不用外部文件</em>)</p>
</blockquote>
<p><a href="http://www.daqianduan.com/2417.html" target="_blank" rel="external">详解CSS外部引用之link与@import的区别-大前端</a><br><a href="http://www.dreamdu.com/blog/2007/05/11/css_link_import/" target="_blank" rel="external">外部引用CSS中 link与@import的区别</a> v</p>
<h2 id="CSS-选择符有哪些？哪些属性可以继承？优先级算法如何计算？-CSS3新增伪类有那些？CSS3新增了哪些特性？"><a href="#CSS-选择符有哪些？哪些属性可以继承？优先级算法如何计算？-CSS3新增伪类有那些？CSS3新增了哪些特性？" class="headerlink" title="CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？CSS3新增了哪些特性？"></a>CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？CSS3新增了哪些特性？</h2><h3 id="CSS-选择符："><a href="#CSS-选择符：" class="headerlink" title="CSS 选择符："></a>CSS 选择符：</h3><ul>
<li>id 选择器(#id): HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。</li>
<li>class 选择器(.class): class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点”.”号显示：</li>
<li>标签选择器(div / p /span):  在 css 中直接使用 html 的标签进行选择</li>
<li>相邻选择器(div1,div2,div3):  选择所有 div1，div2，div3 元素</li>
<li>子选择器(div&gt;p): 选择父元素为 div 元素的所有 p 元素</li>
<li>后代选择器(div p): 选择 div 元素内部的所有 p 元素。</li>
<li>通配符选择器( * ): 选择所有元素。</li>
<li>属性选择器([target]): 选择所有属性为 target 的元素。<ul>
<li>[target=_blank]: 选择 target=”_blank” 的所有元素。</li>
<li>[title~=flower]: 选择 title 属性包含单词 “flower” 的所有元素。</li>
<li>[lang|=en]: 选择 lang 属性值以 “en” 开头的所有元素。</li>
<li>:link    (a:link)    选择所有未被访问的链接。    1</li>
</ul>
</li>
</ul>
<p>选择器          例子           例子描述              CSS</p>
<ul>
<li>:visited    (a:visited)    选择所有已被访问的链接。    1</li>
<li>:active    (a:active)    选择活动链接。    1</li>
<li>:hover    (a:hover)    选择鼠标指针位于其上的链接。    1</li>
<li>:focus    (input:focus)    选择获得焦点的 input 元素。    2</li>
<li>:first-letter    (p:first-letter)    选择每个 p 元素的首字母。    1</li>
<li>:first-line    (p:first-line)    选择每个 p 元素的首行。    1</li>
<li>:first-child    (p:first-child)    选择属于父元素的第一个子元素的每个 p 元素。    2</li>
<li>:before    (p:before)    在每个 p 元素的内容之前插入内容。    2</li>
<li>:after    (p:after)    在每个 p 元素的内容之后插入内容。    2</li>
</ul>
<p>等等等等….查看手册吧~太多了，记住常用的就行了，其他的用到了再查吧。</p>
<h4 id="CSS-伪类-觉得这个挺重要的-列举的有点多"><a href="#CSS-伪类-觉得这个挺重要的-列举的有点多" class="headerlink" title="CSS 伪类(觉得这个挺重要的-列举的有点多)"></a>CSS 伪类(觉得这个挺重要的-列举的有点多)</h4><ul>
<li>:first-of-type    (p:first-of-type)    选择属于其父元素的首个 p 元素的每个 p 元素。    3</li>
<li>:last-of-type    (p:last-of-type)    选择属于其父元素的最后 p 元素的每个 p 元素。    3</li>
<li>:only-of-type    (p:only-of-type)    选择属于其父元素唯一的 p 元素的每个 p 元素。    3</li>
<li>:only-child    (p:only-child)    选择属于其父元素的唯一子元素的每个 p 元素。    3</li>
<li>:nth-child(n)    (p:nth-child(2))    选择属于其父元素的第二个子元素的每个 p 元素。    3</li>
<li>:nth-last-child(n)    (p:nth-last-child(2))    同上，从最后一个子元素开始计数。    3</li>
<li>:nth-of-type(n)    (p:nth-of-type(2))    选择属于其父元素第二个 p 元素的每个 p 元素。    3</li>
<li>:nth-last-of-type(n)    (p:nth-last-of-type(2))    同上，但是从最后一个子元素开始计数。    3</li>
<li>:last-child    (p:last-child)    选择属于其父元素最后一个子元素每个 p 元素。    3</li>
<li>:last-child    p:last-child    选择属于其父元素最后一个子元素每个 p 元素。    3</li>
<li>:active    向被激活的元素添加样式。    1</li>
<li>:focus    向拥有键盘输入焦点的元素添加样式。    2</li>
<li>:hover    当鼠标悬浮在元素上方时，向元素添加样式。    1</li>
<li>:link    向未被访问的链接添加样式。    1</li>
<li>:visited    向已被访问的链接添加样式。    1</li>
<li>:first-child    向元素的第一个子元素添加样式。    2</li>
<li>:lang    向带有指定 lang 属性的元素添加样式。    2</li>
<li>:root    :root    选择文档的根元素。    3</li>
<li>:empty    ( p:empty )    选择没有子元素的每个 p 元素（包括文本节点）。    3</li>
<li>:target    ( #news:target )    选择当前活动的 #news 元素。    3</li>
<li>:enabled    ( input:enabled )    选择每个启用的 input 元素。    3</li>
<li>:disabled    ( input:disabled )    选择每个禁用的 input 元素    3</li>
<li>:checked    ( input:checked )    选择每个被选中的 input 元素。    3</li>
<li>:not(selector)    ( :not(p) )    选择非 p 元素的每个元素。    3</li>
<li>::selection    ( ::selection )    选择被用户选取的元素部分。    3</li>
</ul>
<h5 id="部分应用"><a href="#部分应用" class="headerlink" title="部分应用"></a>部分应用</h5><h6 id="after伪类"><a href="#after伪类" class="headerlink" title=":after伪类"></a>:after伪类</h6><ul>
<li><p>经典的<a href="http://hexin.life/2017/07/29/title-22/">清除浮动</a> =&gt; :<a href="http://www.zhangxinxu.com/wordpress/2010/09/after%E4%BC%AA%E7%B1%BBcontent%E5%86%85%E5%AE%B9%E7%94%9F%E6%88%90%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B/" target="_blank" rel="external">after伪类+content 清除浮动的影响</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.fix:after&#123;</div><div class="line">    display:block; </div><div class="line">    content:&quot;clear&quot;; </div><div class="line">    height:0; </div><div class="line">    clear:both; </div><div class="line">    overflow:hidden; </div><div class="line">    visibility:hidden;</div><div class="line">&#125;</div><div class="line">.fix&#123;*zoom:1;&#125;  /* IE */</div></pre></td></tr></table></figure>
</li>
<li><p><a href="http://www.zhangxinxu.com/wordpress/2010/09/after%E4%BC%AA%E7%B1%BBcontent%E5%86%85%E5%AE%B9%E7%94%9F%E6%88%90%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B/" target="_blank" rel="external">:after伪类+content 让大小不固定图片垂直居中</a></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">.pic_box&#123;</div><div class="line">    width:300px; </div><div class="line">    height:300px; </div><div class="line">    background-color:#beceeb; </div><div class="line">    font-size:0; </div><div class="line">    *font-size:200px; </div><div class="line">    text-align:center;</div><div class="line">    &#125;</div><div class="line">.pic_box img&#123;</div><div class="line">    vertical-align:middle;</div><div class="line">&#125;</div><div class="line">.pic_box:after&#123;</div><div class="line">    display:inline-block; </div><div class="line">    width:0; </div><div class="line">    height:100%; </div><div class="line">    content:&quot;center&quot;; </div><div class="line">    vertical-align:middle; </div><div class="line">    overflow:hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="selection-伪元素-css3-唯一新增伪元素"><a href="#selection-伪元素-css3-唯一新增伪元素" class="headerlink" title="::selection 伪元素(css3 唯一新增伪元素)"></a>::selection 伪元素(css3 唯一新增伪元素)</h6><blockquote>
<p>浏览器自带选取后的背景是蓝色，我们可以利用这个将选取背景设定称自己喜欢的样子<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>dsadkladja<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果： <img src="http://or3233yyd.bkt.clouddn.com//17-8-1/35733865.jpg" alt=""></p>
<p><a href="http://www.w3school.com.cn/cssref/css_selectors.ASP" target="_blank" rel="external">CSS 选择器参考手册-w3school</a></p>
<h4 id="到这里已经分不清什么是伪类什么是伪元素了"><a href="#到这里已经分不清什么是伪类什么是伪元素了" class="headerlink" title="到这里已经分不清什么是伪类什么是伪元素了"></a>到这里已经分不清什么是伪类什么是伪元素了</h4><p>伪类:</p>
<ul>
<li>用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过:hover来描述这个元素的状态。虽然它和普通的css类相似，可以为已有的元素添加样式，但是它只有处于dom树无法描述的状态下才能为元素添加样式，所以将其称为伪类。</li>
</ul>
<p><img src="http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E7%B1%BB.png" alt=""></p>
<p>伪元素：</p>
<ul>
<li>用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。<br><em>虽然CSS3标准要求伪元素使用双冒号的写法，但也依然支持单冒号的写法。为了向后兼容，我们建议你在目前还是使用单冒号的写法。</em><br><img src="http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E5%85%83%E7%B4%A0.png" alt=""></li>
</ul>
<blockquote>
<p>伪类的操作对象是文档树中已有的元素，而伪元素则创建了一个文档数外的元素。因此，伪类与伪元素的区别在于：有没有创建一个文档树之外的元素。<br><a href="http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/" target="_blank" rel="external">总结伪类与伪元素-腾讯 AlloyTeam</a><br><a href="https://swordair.com/origin-and-difference-between-css-pseudo-classes-and-pseudo-elements/" target="_blank" rel="external">CSS伪类与CSS伪元素的区别及由来</a><br><a href="http://blog.csdn.net/q1056843325/article/details/53560588" target="_blank" rel="external">CSS3伪类与伪元素的区别及注意事项</a></p>
<h3 id="CSS-可继承属性"><a href="#CSS-可继承属性" class="headerlink" title="CSS 可继承属性"></a>CSS 可继承属性</h3><ul>
<li>不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before和unicode-bidi。</li>
<li>所有元素可继承：visibility和cursor。</li>
<li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。</li>
<li>终端块状元素可继承：text-indent和text-align。</li>
<li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</li>
<li>表格元素可继承：border-collapse。</li>
</ul>
<p>个人不太喜欢记这些，记一下常用的吧~其他的慢慢经验积累吧，一样铺链接</p>
</blockquote>
<p><a href="https://stackoverflow.com/questions/5612302/which-css-properties-are-inherited" target="_blank" rel="external">Which CSS properties are inherited?</a><br><a href="https://www.w3.org/TR/CSS21/propidx.html" target="_blank" rel="external">Appendix F. Full property table-其中列出了是否可以继承</a></p>
<h3 id="CSS3-权重"><a href="#CSS3-权重" class="headerlink" title="CSS3 权重"></a>CSS3 权重</h3><blockquote>
<p>!important &gt; 内联 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 通配符 &gt; 继承</p>
</blockquote>
<h4 id="选择器权重值的计算-A-B-C-D"><a href="#选择器权重值的计算-A-B-C-D" class="headerlink" title="选择器权重值的计算 A B C D"></a>选择器权重值的计算 A B C D</h4><blockquote>
<p>内联 =&gt; id =&gt; 伪类 =&gt; 伪元素及标签<br> 0 =&gt; 0 =&gt; 0 =&gt; 0</p>
</blockquote>
<ul>
<li>A：如果规则是写在标签的style属性中（内联样式），则A=1，否则，A=0. 对于内联样式，由于没有选择器，所以 B、C、D 的值都为 0，即 A=1, B=0, C=0, D=0（简写为 1,0,0,0，下同）。</li>
<li>B：计算该选择器中ID的数量。（例如，#header 这样的选择器，计算为 0, 1, 0, 0）。</li>
<li>C：计算该选择器中伪类及其它属性的数量（包括类选择器、属性选择器等，不包括伪元素）。 （例如， .logo[id=’site-logo’] 这样的选择器，计算为 0, 0, 2, 0）。</li>
<li>D：计算该选择器中伪元素及标签的数量。（例如，p:first-letter 这样的选择器，计算为0, 0, 0, 2）。</li>
</ul>
<p>计算权重值时，A, B, C, D 四组值，从左到右，分组比较，如果 A 相同，比较 B, 如果 B 相同，比较 C, 如果 C 相同，比较 D, 如果 D 相同，后定义的优先。</p>
<h4 id="关于-inherit-来的属性"><a href="#关于-inherit-来的属性" class="headerlink" title="关于 inherit 来的属性"></a>关于 inherit 来的属性</h4><blockquote>
<p>继承而来的属性值，权重永远低于明确指定到元素的定义。只有当一个元素的某个属性没有被直接指定时，才会继承父级元素的值</p>
</blockquote>
<h4 id="特殊的-important"><a href="#特殊的-important" class="headerlink" title="特殊的 !important"></a>特殊的 !important</h4><blockquote>
<p>有 !important 指定的权重值大于所有未用 !important 指定的规则。包括内联</p>
</blockquote>
<p><em>不过我记得 chrome 浏览器自带的 input框聚焦时的黄色 好像是 !important 都不能覆盖的</em><br>如果多条规则中都对同一个属性指定了 !important 呢？这时候 !important 的作用相互抵销，依然按照ABCD四组计算比较。<br><a href="https://www.w3cplus.com/css/the-important-css-declaration-how-and-when-to-use-it.html" target="_blank" rel="external">如何和何时使用CSS的!important</a></p>
<p><a href="https://ofcss.com/2011/05/26/css-cascade-specificity.html" target="_blank" rel="external">深入解析CSS样式层叠权重值</a></p>
<p><a href="https://swordair.com/css-selectors-independent-of-the-distance/" target="_blank" rel="external">CSS选择器距离无关</a></p>
<h2 id="CSS-清除浮动"><a href="#CSS-清除浮动" class="headerlink" title="CSS 清除浮动"></a>CSS 清除浮动</h2><h3 id="clearfix改良及overflow-hidden详解【译文】"><a href="#clearfix改良及overflow-hidden详解【译文】" class="headerlink" title="clearfix改良及overflow:hidden详解【译文】"></a><a href="http://www.iyunlu.com/view/css-xhtml/56.html" target="_blank" rel="external">clearfix改良及overflow:hidden详解【译文】</a></h3><h3 id="那些年我们一起清除过的浮动"><a href="#那些年我们一起清除过的浮动" class="headerlink" title="那些年我们一起清除过的浮动"></a><a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="external">那些年我们一起清除过的浮动</a></h3><h3 id="CSS之BFC详解"><a href="#CSS之BFC详解" class="headerlink" title="CSS之BFC详解"></a><a href="http://www.html-js.com/article/1866" target="_blank" rel="external">CSS之BFC详解</a></h3><h3 id="CSS-float浮动的深入研究、详解及拓展-一"><a href="#CSS-float浮动的深入研究、详解及拓展-一" class="headerlink" title="CSS float浮动的深入研究、详解及拓展(一)"></a><a href="http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%B8%80/" target="_blank" rel="external">CSS float浮动的深入研究、详解及拓展(一)</a></h3><h3 id="css-float浮动的深入研究、详解及拓展二"><a href="#css-float浮动的深入研究、详解及拓展二" class="headerlink" title="css-float浮动的深入研究、详解及拓展二"></a><a href="http://www.zhangxinxu.com/wordpress/2010/01/css-float%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E3%80%81%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%8B%93%E5%B1%95%E4%BA%8C/" target="_blank" rel="external">css-float浮动的深入研究、详解及拓展二</a></h3><h2 id="CSS3新增特性"><a href="#CSS3新增特性" class="headerlink" title="CSS3新增特性"></a>CSS3新增特性</h2><ul>
<li>CSS3 边框<ul>
<li>border-radius</li>
<li>box-shadow</li>
<li><a href="http://www.runoob.com/try/try.php?filename=trycss3_border-image" target="_blank" rel="external">border-image</a> =&gt;<br>  border-image: source slice width outset repeat; =&gt; border-image: url(border.png) 30 round ( 设置图像边界是否应重复（repeated）、拉伸（stretched）或铺满（rounded）);</li>
</ul>
</li>
<li>CSS3 圆角 =&gt; border-radius</li>
<li>CSS3 背景<ul>
<li>background-image</li>
<li><a href="http://www.runoob.com/try/try.php?filename=trycss3_background-size" target="_blank" rel="external">background-size</a></li>
<li><a href="http://www.runoob.com/try/try.php?filename=trycss3_background-origin" target="_blank" rel="external">background-origin</a> =&gt; background-origin:content-box ( border-box );</li>
<li>background-clip </li>
</ul>
</li>
<li><a href="http://www.runoob.com/css3/css3-gradients.html" target="_blank" rel="external">CSS3 渐变 </a>=&gt; <ul>
<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>
<li>径向渐变（Radial Gradients）- 由它们的中心定义</li>
<li>background: linear-gradient(to bottom right, red , blue); /<em> 标准的语法 </em>/</li>
</ul>
</li>
<li>CSS3 文本效果<ul>
<li>text-shadow</li>
<li>box-shadow</li>
<li>text-overflow CSS3文本溢出属性指定应向用户如何显示溢出内容</li>
<li>word-wrap 自动换行属性允许您强制文本换行 - 即使这意味着分裂它中间的一个字</li>
<li>word-break 单词拆分换行</li>
</ul>
</li>
<li>CSS3 字体 =&gt; <a href="http://www.runoob.com/css3/css3-fonts.html" target="_blank" rel="external">CSS3 @font-face 规则</a></li>
<li>CSS3 2D 转换<ul>
<li>translate() translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。</li>
<li>rotate() rotate()方法，在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转</li>
<li>scale() scale()方法，该元素增加或缩少的大小，取决于宽度（X轴）和高度（Y轴）的参数：</li>
<li>skew() 包含两个参数值skewX(&lt; angle&gt;), skewY(&lt; angle&gt;)，分别表示X轴和Y轴倾斜的角度，如果第二个参数为空，则默认为0，参数为负表示向相反方向倾斜</li>
<li>matrix() matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能。</li>
</ul>
</li>
<li>CSS3 3D 转换<ul>
<li>perspective(n)    =&gt; 定义 3D 转换元素的透视视图。</li>
</ul>
</li>
<li>CSS3 过渡<ul>
<li>transition =&gt; 简写属性，用于在一个属性中设置四个过渡属性。 =&gt; 3</li>
<li>transition-property =&gt; 规定应用过渡的 CSS 属性的名称。 =&gt; 3</li>
<li>transition-duration =&gt; 定义过渡效果花费的时间。默认是 0。 =&gt; 3</li>
<li>transition-timing-function =&gt; 规定过渡效果的时间曲线。默认是 “ease”。 =&gt; 3</li>
<li>transition-delay =&gt; 规定过渡效果何时开始。默认是 0。 =&gt; 3</li>
</ul>
</li>
<li>CSS3 动画 =&gt; <a href="http://www.runoob.com/css3/css3-animations.html" target="_blank" rel="external">CSS3 @keyframes 规则</a></li>
<li>CSS3 多列</li>
<li>CSS3 用户界面<ul>
<li>resize =&gt; 属性指定一个元素是否应该由用户去调整大小</li>
<li>box-sizing =&gt; box-sizing 属性允许您以确切的方式定义适应某个区域的具体内容。</li>
<li>outline-offset =&gt; outline-offset 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。</li>
</ul>
</li>
</ul>
<blockquote>
<p>轮廓与边框有两点不同：</p>
<ul>
<li>轮廓不占用空间</li>
<li>轮廓可能是非矩形<br><a href="https://segmentfault.com/a/1190000005153660" target="_blank" rel="external">border、outline、boxshadow那些事以及如何做内凹圆</a><br><a href="http://www.zhangxinxu.com/wordpress/2015/04/css3-radius-outline/" target="_blank" rel="external">CSS3如何实现圆角的outline效果？</a></li>
</ul>
</blockquote>
<ul>
<li>CSS3 图片<pre><code>- [响应式图片](http://www.runoob.com/try/try.php?filename=trycss_ex_images_responsive) =&gt; max-width: 100%;
- 图片滤镜 =&gt; [css滤镜](http://www.runoob.com/cssref/css3-pr-filter.html)
- [响应式图片相册](http://www.runoob.com/try/try.php?filename=trycss_image_gallery_responsive) 
- [图片 Modal(模态)](http://www.runoob.com/try/try.php?filename=trycss_image_modal_js)
</code></pre></li>
<li>CSS3 按钮<ul>
<li><a href="http://www.runoob.com/try/try.php?filename=trycss_buttons_animate1" target="_blank" rel="external">按钮动画</a></li>
</ul>
</li>
<li>CSS3 分页</li>
<li>CSS3 框大小 =&gt;  box-sizing 属性可以设置 width 和 height 属性中包含了 padding(内边距) 和 border(边框)。<pre><code>- 关于 [border-box ](http://hexin.life/2017/07/11/title-15/) 
</code></pre></li>
<li>CSS3 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">弹性盒子</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="external">CSS3 多媒体查询</a><pre><code>- viewport(视窗) 的宽度与高度
- 设备的宽度与高度
- 朝向 (智能手机横屏，竖屏) 。
- 分辨率 
</code></pre></li>
</ul>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="大小不固定的图片、多行文字的水平垂直居中"><a href="#大小不固定的图片、多行文字的水平垂直居中" class="headerlink" title="大小不固定的图片、多行文字的水平垂直居中"></a><a href="http://www.zhangxinxu.com/wordpress/2009/08/%E5%A4%A7%E5%B0%8F%E4%B8%8D%E5%9B%BA%E5%AE%9A%E7%9A%84%E5%9B%BE%E7%89%87%E3%80%81%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E7%9A%84%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/" target="_blank" rel="external">大小不固定的图片、多行文字的水平垂直居中</a></h3><h2 id="七种方法实现俩侧定宽中间自适应"><a href="#七种方法实现俩侧定宽中间自适应" class="headerlink" title="七种方法实现俩侧定宽中间自适应"></a>七种方法实现俩侧定宽中间自适应</h2><ul>
<li>浮动</li>
<li>绝对定位</li>
<li>表格</li>
<li>flex</li>
<li>grid</li>
<li>圣杯</li>
<li>双飞翼<br><a href="http://hexin.life/more/布局.html">俩侧定宽中间自适应</a></li>
</ul>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><blockquote>
<p><a href="https://www.zhihu.com/question/21504052" target="_blank" rel="external">CSS布局中圣杯布局与双飞翼布局的实现思路差异在哪里？</a><br><a href="http://www.imooc.com/wenda/detail/254035" target="_blank" rel="external">双飞翼布局介绍-始于淘宝UED</a><br><a href="https://segmentfault.com/a/1190000004524159" target="_blank" rel="external">关于「圣杯布局」</a></p>
</blockquote>
<h3 id="关于-flex-用法"><a href="#关于-flex-用法" class="headerlink" title="关于 flex 用法"></a>关于 flex 用法</h3><blockquote>
<p><a href="http://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="external">Flex 布局语法教程</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="external">Flex 布局教程：语法篇–阮一峰</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇</a></p>
<h1 id="CSS-HTML-写作习惯-规范-网易NEC规范"><a href="#CSS-HTML-写作习惯-规范-网易NEC规范" class="headerlink" title="CSS HTML 写作习惯/规范-网易NEC规范"></a><a href="http://nec.netease.com/" target="_blank" rel="external">CSS HTML 写作习惯/规范-网易NEC规范</a></h1><h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1></blockquote>
<h1 id="功能类"><a href="#功能类" class="headerlink" title="功能类"></a>功能类</h1><h2 id="实现联动"><a href="#实现联动" class="headerlink" title="实现联动"></a><a href="http://hexin.life/more/linkage.html">实现联动</a></h2><h2 id="放大镜"><a href="#放大镜" class="headerlink" title="放大镜"></a><a href="http://hexin.life/more/mangnifyLens.html">放大镜</a></h2><h1 id="面试题整理"><a href="#面试题整理" class="headerlink" title="面试题整理"></a>面试题整理</h1><ul>
<li><a href="https://github.com/ivonzhang/Front-End-Developer-Questions/wiki" target="_blank" rel="external">前端面试题及答案汇总</a></li>
<li><a href="http://www.runoob.com/w3cnote/front-end-development.html" target="_blank" rel="external">前端开发面试题集锦</a></li>
<li><a href="http://blog.csdn.net/xllily_11/article/details/70899191" target="_blank" rel="external">2017年前端面试题最新汇总</a></li>
<li><a href="http://developer.51cto.com/art/201504/474298.htm" target="_blank" rel="external">30个你 “ 不可能全部会做 ” 的javascript题目及答案</a></li>
<li><a href="http://ife.baidu.com/college/detail/id/8" target="_blank" rel="external">百度糯米前端技术学院</a></li>
<li><a href="https://www.nowcoder.com/contestRoom" target="_blank" rel="external">newcode 牛客网</a></li>
<li><a href="http://www.lintcode.com/zh-cn/problem/" target="_blank" rel="external">lint-code</a></li>
<li><a href="https://github.com/fex-team/interview-questions" target="_blank" rel="external">百度 FEX 的面试过程</a></li>
<li><a href="https://elemefe.github.io/node-interview/#/" target="_blank" rel="external">Node interview of 饿了么</a></li>
<li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions" target="_blank" rel="external">Front-end-Developer-Interview-Questions</a></li>
<li><a href="https://github.com/5Mi/wumi_blog/issues/69" target="_blank" rel="external">一些个面试题与js知识点</a></li>
<li><a href="https://segmentfault.com/bookmark/1230000009049633" target="_blank" rel="external">面试题</a></li>
</ul>
<blockquote>
<p>知识整理及总结多来于网络及他人博客，由于时间原因，不能每一个知识点都完整的整理出来，因此附带了参考/学习链接。也等于一个知识点的梳理。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试准备" scheme="http:%5C%5Chexin.life/tags/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>字符串的乘法</title>
    <link href="http:%5C%5Chexin.life/2017/07/29/title-20/"/>
    <id>http:\\hexin.life/2017/07/29/title-20/</id>
    <published>2017-07-29T07:55:33.000Z</published>
    <updated>2017-07-30T15:57:00.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ol>
<li>创建一个n+1的空数组，调用join方法。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.times = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;<span class="comment">//IE6 530-640 FF3 400~550 IE8 840 ~1110   chrome 600~1000</span></div><div class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>)).join(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">2. 创建一个对象，拥有length属性，然后利用call()方法去调用数组原型的join方法。这样就不用创建数组了。</div></pre></td></tr></table></figure>
<p>String.prototype.times = function(n) {//IE6 570~600  FF3 320~430  chrome 550~900 IE8 422~490<br>  return Array.prototype.join.call({length:n+1}, this);<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 它先把Array.prototype.join与对象缓存起来，这样每次就不用从Array的原型查找join方法与创建对象。</div></pre></td></tr></table></figure></p>
<p>String.prototype.times = (function(){//IE6 500~600  FF3 322~390 chrome 581~900 IE8 430~500<br>  var join = Array.prototype.join,//利用闭包，每次的结果都非常不稳定，让浏览器无法进行优化<br>  obj = { };<br>  return function(n) {<br>    obj.length = n + 1;<br>    return join.call(obj, this);<br>  }<br>})();<br>```</p>
<blockquote>
<p>更多(本人理解有限):<br><a href="http://www.cnblogs.com/rubylouvre/archive/2009/11/08/1598383.html" target="_blank" rel="external">字符串的乘法-司徒正美</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS练习之--模拟call_apply</title>
    <link href="http:%5C%5Chexin.life/2017/07/29/title-19/"/>
    <id>http:\\hexin.life/2017/07/29/title-19/</id>
    <published>2017-07-29T07:35:46.000Z</published>
    <updated>2017-08-01T07:25:47.725Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="apply-和-call"><a href="#apply-和-call" class="headerlink" title="apply 和 call"></a>apply 和 call</h2><p>在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法。<br>call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。<br>例1；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var jaw = &#123; </div><div class="line">    name: &apos;jaw&apos;, </div><div class="line">    sayHello: function(age) &#123; </div><div class="line">        console.log(&apos;hello i am &apos; + this.name + &quot; i&apos;m &quot; + age + &apos; years old &apos;) </div><div class="line">    &#125; </div><div class="line">&#125;;</div><div class="line"></div><div class="line">var liu = &#123; </div><div class="line">    name: &apos;liu&apos; </div><div class="line">&#125;;</div><div class="line">jaw.sayHello(22); // hello i am jaw i&apos;m 22 years old</div><div class="line">jaw.sayHello.apply(liu, [24]);  //hello i am liu i&apos;m 24 years old </div><div class="line">jaw.sayHello.call(liu, 23);  //hello i am liu i&apos;m 23 years old</div></pre></td></tr></table></figure></p>
<p>例2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function a()&#123;</div><div class="line">    y=function()&#123;</div><div class="line">    x=2;</div><div class="line">&#125;; </div><div class="line">return function()&#123;</div><div class="line">    var x=3;y();console.log(this.x)</div><div class="line">&#125;.apply(this, arguments)&#125; </div><div class="line">a();    //2</div></pre></td></tr></table></figure></p>
<p>两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数：</p>
<ul>
<li>apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，</li>
<li>call则作为call的参数传入（从第二个参数开始）。</li>
</ul>
<p>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。<br>在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。</p>
<blockquote>
<p>通过 call() 或 apply() 方法你可以设置 this 的值, 且作为已存在对象的新方法调用。</p>
</blockquote>
<h2 id="apply-模拟实现"><a href="#apply-模拟实现" class="headerlink" title="apply 模拟实现"></a>apply 模拟实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Function.prototype.applyOne = function (context) &#123;</div><div class="line">    var context = context || window;     //如果没有参数时指向window</div><div class="line">    var args = arguments[1];               //获取传入的数组</div><div class="line">    var fn = testSymbol(context);</div><div class="line"></div><div class="line">    context[fn] = this;                	//fn属性不存在</div><div class="line">    </div><div class="line">    if(args == void 0) &#123;          //没有参数即直接运行</div><div class="line">        return context[fn]();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var fnStr = &apos;context[fn](&apos;;             </div><div class="line">     </div><div class="line">    for (var i = 0; i &lt; args.length; i++) &#123;</div><div class="line">     	fnStr += i == args.length - 1 ? args[i] : args[i] + &apos;,&apos;;</div><div class="line">     &#125;;            </div><div class="line">     	fnStr += &apos;)&apos;;           //得到context[fn](arg1,arg2,arg3....)</div><div class="line">     	var returnValue = eval(fnStr);      //</div><div class="line">     	delete context[fn];            //删除这个属性</div><div class="line">     	return returnValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//简单模拟es6的Symbol保证属性的唯一性</div><div class="line">function testSymbol(obj) &#123;            </div><div class="line">    var unquie_obj = &apos;00&apos; + Math.random();</div><div class="line">    if (obj.hasOwnProperty(unquie_obj)) &#123;</div><div class="line">        arguments.callee(obj);</div><div class="line">    &#125; else &#123;</div><div class="line">        return unquie_obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="这里对-call-进行模拟实现"><a href="#这里对-call-进行模拟实现" class="headerlink" title="这里对 call 进行模拟实现"></a>这里对 call 进行模拟实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//call</div><div class="line">Function.prototype.callOne = function (context) &#123;</div><div class="line">    return this.applyOne(([].shift.applyOne(arguments)),arguments);        //将参数依次弹出即可</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="这里对-bind-进行模拟实现"><a href="#这里对-bind-进行模拟实现" class="headerlink" title="这里对 bind 进行模拟实现"></a>这里对 bind 进行模拟实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Function.prototype.bindOne = function() &#123;</div><div class="line">    var _this = this,                        // 保存原函数</div><div class="line">            context = [].shift.call(arguments), // 保存需要绑定的this上下文</div><div class="line">            args = [].slice.call(arguments);    // 剩余的参数转为数组</div><div class="line">        return function () &#123;                    // 返回一个新函数</div><div class="line">            _this.apply(context,[].concat.call(args, [].slice.call(arguments)));</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http:%5C%5Chexin.life/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 表单编码 enctype(转)</title>
    <link href="http:%5C%5Chexin.life/2017/07/27/title-18/"/>
    <id>http:\\hexin.life/2017/07/27/title-18/</id>
    <published>2017-07-26T16:12:42.000Z</published>
    <updated>2017-08-07T11:49:24.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>在web开发中最常见的莫过于GET和POST，其中 GET 一般将参数编码在 url 中（HTTP header）来传递数据； 而POST或PUT数据必须放在消息主体（entity-body）中，这样的数据便是HTTP表单，表单数据的编码方式应在 HTTP 头中进行设置（Content-Type header字段），常见的编码方式有（HTTP采用MIME框架，编码方式可以是任何MIME类型）：</p>
<ol>
<li>URLencoded: application/x-www-form-urlencoded</li>
<li>Multipart: multipart/form-data</li>
<li>JSON: application/json</li>
<li>XML: text/xml</li>
<li>纯文本: text/plain</li>
</ol>
<p>在Web开发中，前三种格式非常常见。HTML中 &lt; form &gt; 支持 urlencoded,multipart,plain text，通过 enctype 属性来进行设置。AJAX 中默认的则是 JSON 编码格式。</p>
<h1 id="URLencoded"><a href="#URLencoded" class="headerlink" title="URLencoded"></a>URLencoded</h1><p>HTML中 &lt; form &gt; 标签的enctype属性用来指定表单编码格式，默认为 application/x-www-form-urlencoded，即以下两个表单完全等价。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">'post'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'title'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'subtitle'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">'post'</span> <span class="attr">enctype</span>=<span class="string">'application/x-www-form-urlencoded'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'title'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'subtitle'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述表单将会显示为两个文本框和一个提交按钮。我们在文本框中分别写入 test 和中国后，点击提交按钮。产生的 HTTP 请求可能是这样的：</p>
<blockquote>
<p>可以打开 Chrome 控制台的 Network 标签，找到这次请求，便可以看到下面的信息。</p>
</blockquote>
<p>请求头（这里只给出了Content-Type 字段）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type: application/x-www-form-urlencoded</div></pre></td></tr></table></figure></p>
<p>请求体：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">title=test&amp;subtitle=%E4%B8%AD%E5%9B%BD</div></pre></td></tr></table></figure>
<blockquote>
<p>这里你看到的%E4%B8%AD%E5%9B%BD即是中国按照base64编码（url通用的编码方式）后的结果。可以在Chrome Console中通过decodeURI(‘%E4%B8%AD%E5%9B%BD’)来解码。</p>
</blockquote>
<h1 id="Multipart"><a href="#Multipart" class="headerlink" title="Multipart"></a>Multipart</h1><p>multipart 编码方式则需要设置 enctype 为 multipart/form-data。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"harttle"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"avatar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里我们还设置了&lt; input type=’text’ &gt;的默认值为 harttle。<br>该表单将会显示为一个文本框、一个文件按钮、一个提交按钮。然后我们选择一个文件：chrome.png，点击表单提交后产生的请求可能是这样的：</p>
<p>请求头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</div></pre></td></tr></table></figure></p>
<p>请求体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</div><div class="line">Content-Disposition: form-data; name=&quot;title&quot;</div><div class="line"></div><div class="line">harttle</div><div class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</div><div class="line">Content-Disposition: form-data; name=&quot;avatar&quot;; filename=&quot;chrome.png&quot;</div><div class="line">Content-Type: image/png</div><div class="line"></div><div class="line"> ... content of chrome.png ...</div><div class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这便是一个multipart编码的表单。Content-Type中还包含了boundary的定义，它用来分隔请求体中的每个字段。正是这一机制，使得请求体中可以包含二进制文件（当然文件中不能包含boundary）。</p>
</blockquote>
<p>除了application/x-www-form-urlencoded和multipart/form-data，HTML的&lt; form &gt;还支持text/plain。此外，如果想提交其他编码类型的表单，必须通过AJAX技术，接下来我们介绍一个常用的JSON数据的提交。</p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>从JavaScript中提交 JSON 数据真是再方便不过了，jquery、angularJS 等框架都封装了更好用的 AJAX 方法。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$.post(&apos;/xxx&apos;, &#123;</div><div class="line">        title: &apos;test&apos;,</div><div class="line">        content: [1,2,3]</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>该JavaScript执行后可能生成如下的 HTTP 请求：</p>
<p>请求头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type: application/json;charset=utf-8</div></pre></td></tr></table></figure></p>
<p>请求体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;title&quot;:&quot;test&quot;,&quot;content&quot;:[1,2,3]&#125;</div></pre></td></tr></table></figure></p>
<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>请求头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type: text/xml</div></pre></td></tr></table></figure></p>
<p>请求体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--?xml version=&quot;1.0&quot;?--&gt;</div><div class="line">&lt;methodcall&gt;</div><div class="line">    &lt;methodname&gt;examples.getStateName&lt;/methodname&gt;</div><div class="line">    &lt;params&gt;</div><div class="line">        &lt;param&gt;</div><div class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</div><div class="line">    &lt;/params&gt;</div><div class="line">&lt;/methodcall&gt;</div></pre></td></tr></table></figure></p>
<p>转载来自： <a href="http://harttle.com/2016/04/11/http-form-encoding.html" target="_blank" rel="external">http://harttle.com/2016/04/11/http-form-encoding.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="转载" scheme="http:%5C%5Chexin.life/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="http:%5C%5Chexin.life/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习</title>
    <link href="http:%5C%5Chexin.life/2017/07/17/title-17/"/>
    <id>http:\\hexin.life/2017/07/17/title-17/</id>
    <published>2017-07-16T16:12:42.000Z</published>
    <updated>2017-07-30T15:59:40.496Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>为了方便查询和学习，这里对正则表达式做一个整理<br>这里推荐一个正则练习的网站 , 将晦涩的正则表达式用图形描述出来</p>
<p> <a href="https://regexper.com/" target="_blank" rel="external">RegExper</a> <a href="https://regexper.com/" target="_blank" rel="external">https://regexper.com/</a></p>
<p>像这个样子(邮箱验证)：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/5643026.jpg" alt=""></p>
<h1 id="关于正则表达式"><a href="#关于正则表达式" class="headerlink" title="关于正则表达式"></a>关于正则表达式</h1><blockquote>
<p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p>
</blockquote>
<p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>
<ul>
<li>假设你在一篇英文小说里查找 hi，你可以使用正则表达式hi。<br>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是h,后一个是i。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配 hi, HI, Hi, hI 这四种情况中的任意一种。<br>不幸的是，很多单词里包含hi这两个连续的字符，比如 him hi history high 等等。用hi来查找的话，这里边的hi也会被找出来。如果要精确地查找hi这个单词的话，我们应该使用 \bhi\b 。</li>
</ul>
<blockquote>
<p>使用正则表达式 : </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+\s/g</span>;  </div><div class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\w+\\s"</span>, <span class="string">"g"</span>);</div></pre></td></tr></table></figure>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/64808664.jpg" alt=""></p>
<blockquote>
<p>. 只能匹配一个字节的字符，不能识别换行符,回车符，行分隔符，段分隔符等<br>换行符,回车符，行分隔符，段分隔符 需要用 s 修饰符来识别， s 修饰符目前处于提案状态</p>
</blockquote>
<h2 id="反义字符"><a href="#反义字符" class="headerlink" title="反义字符"></a>反义字符</h2><p> <img src="http://or3233yyd.bkt.clouddn.com//17-7-16/44870681.jpg" alt=""></p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p> <img src="http://or3233yyd.bkt.clouddn.com//17-7-16/15839701.jpg" alt=""></p>
<h2 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/94805709.jpg" alt=""></p>
<h2 id="分组-捕获"><a href="#分组-捕获" class="headerlink" title="分组 / 捕获"></a>分组 / 捕获</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/9991323.jpg" alt=""></p>
<p>下面的脚本使用replace()方法来转换字符串中的单词。在匹配到的替换文本中，脚本使用替代的 <pre>$1 , $2</pre> 表示第一个和第二个括号的子字符串匹配。</p>
<blockquote>
<p>var re = /(\w+)\s(\w+)/;<br>var str = “John Smith”;<br>var newstr = str.replace(re, “$2, $1”);<br>console.log(newstr);</p>
</blockquote>
<p>这个表达式输出 “Smith  John”。</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/79456676.jpg" alt=""></p>
<h2 id="贪婪-惰性"><a href="#贪婪-惰性" class="headerlink" title="贪婪 / 惰性"></a>贪婪 / 惰性</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/87221432.jpg" alt=""></p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/6803210.jpg" alt=""></p>
<h3 id="ES6-新增修饰符"><a href="#ES6-新增修饰符" class="headerlink" title="ES6 新增修饰符"></a>ES6 新增修饰符</h3><h4 id="y-修饰符"><a href="#y-修饰符" class="headerlink" title="y 修饰符"></a>y 修饰符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">'bb_b=b+bbb++bb'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/b+/g</span>;    </div><div class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/b+/y</span>;    </div><div class="line"></div><div class="line"><span class="keyword">let</span> exec1 = reg1.exec(str);</div><div class="line"><span class="keyword">let</span> exec2 = reg2.exec(str);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'OneExec:\n'</span> + <span class="string">'exec1: '</span> + exec1 + <span class="string">'\texec1: '</span> + exec2)  <span class="comment">//bb   bb</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'TwoExec:\n'</span> + <span class="string">'exec1: '</span> + reg1.exec(str) + <span class="string">'\texec1: '</span> + reg2.exec(str)) <span class="comment">// b  null  //g 第二次自动匹配下一个位置,而 y 不是</span></div><div class="line"><span class="built_in">console</span>.log(reg1.sticky, reg2.sticky)    <span class="comment">// 检测是否开启了 y</span></div></pre></td></tr></table></figure>
<h4 id="u-修饰符-unicode"><a href="#u-修饰符-unicode" class="headerlink" title="u 修饰符 (unicode)"></a>u 修饰符 (unicode)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> str = <span class="string">'\uD83D\uDC2A'</span>;	</div><div class="line"></div><div class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^\uD83D/</span>;</div><div class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^\uD83D/u</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'u1: '</span> + reg1.test(str))    <span class="comment">//true        //当作俩个字节处理</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'u2: '</span> + reg2.test(str))	<span class="comment">//false		// 当作了一个字节处理</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/</span>.test(<span class="string">'a'</span>));  <span class="comment">// false   这里不识别 \u&#123;61&#125; 中的 &#123;61&#125;-&gt; unicode编码 // a 的 unicode编码是 61</span></div><div class="line"><span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/u</span>.test(<span class="string">'a'</span>));   <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'\u&#123;54564&#125;'</span>);    <span class="comment">//񔕤</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'\u&#123;2048&#125;'</span>);     <span class="comment">//⁈</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> z1 = <span class="string">'񔕤'</span>;</div><div class="line"><span class="keyword">let</span> z2 = <span class="string">'⁈'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> reg3 = <span class="regexp">/^.$/</span>;</div><div class="line"><span class="keyword">let</span> reg4 = <span class="regexp">/^.$/u</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> test3 = reg3.test(z1);</div><div class="line"><span class="keyword">let</span> test4 = reg3.test(z2);       <span class="comment">//  . 只能匹配一个字节的字符，也不能识别换行符等</span></div><div class="line"><span class="keyword">let</span> test5 = reg4.test(z1);       <span class="comment">//大于俩个字节时，使用 u 修饰符</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'z1: '</span> + test3 + <span class="string">' z2: '</span> + test4 + <span class="string">' z1(u): '</span> + test5);   <span class="comment">// z1: false z2: true z1(u): true</span></div></pre></td></tr></table></figure>
<h2 id="ES6-新增"><a href="#ES6-新增" class="headerlink" title="ES6 新增"></a>ES6 新增</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">let</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);    <span class="comment">// round1</span></div><div class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/g</span>);        <span class="comment">// round2   ES5 只能输入一个参数</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> test1 = reg1.test(<span class="string">'xyz123'</span>); <span class="comment">//true</span></div><div class="line"><span class="keyword">let</span> test2 = reg2.test(<span class="string">'xyz123'</span>); <span class="comment">//true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//  --&gt;  flag   es6 新添加，用来获取正则的修饰符 </span></div><div class="line"><span class="built_in">console</span>.log(test1, test2, reg1.flags, reg2.flags)</div><div class="line"><span class="keyword">let</span> reg3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/g</span>, <span class="string">'i'</span>);  <span class="comment">// ES6 允许这种情况输入俩个参数</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> flag3 = reg3.flags;   </div><div class="line"><span class="built_in">console</span>.log(flag3);    <span class="comment">// -&gt; i    这里 i 覆盖了前面的g</span></div></pre></td></tr></table></figure>
<h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><h3 id="正则表达式属性"><a href="#正则表达式属性" class="headerlink" title="正则表达式属性"></a>正则表达式属性</h3><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/42241406.jpg" alt=""></p>
<blockquote>
<p>lastindex 只在全局匹配时有效<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/39465782.jpg" alt=""></p>
</blockquote>
<hr>
<blockquote>
<p>var myRe = new RegExp(“d(b+)d”, “g”);<br>var myArray = myRe.exec(“cdbbdbsbz”);</p>
</blockquote>
<p>通过这些脚本，匹配成功后将返回一个数组并且更新正则表达式的属性，如下表所示。<br>正则表达式执行返回信息</p>
<p>对象 ———— 属性或索引描述      ————–    在例子中对应的值</p>
<ol>
<li>myArray    </li>
</ol>
<ul>
<li><ul>
<li>匹配到的字符串和所有被记住的子字符串。    [“dbbd”, “bb”]</li>
</ul>
</li>
<li><ul>
<li>index    在输入的字符串中匹配到的以0开始的索引值。    1</li>
</ul>
</li>
<li><ul>
<li>input    初始字符串。    “cdbbdbsbz”</li>
</ul>
</li>
<li><ul>
<li>[0]    匹配到的所有字符串（并不是匹配后记住的字符串）。注：原文”The last matched characters.”，应该是原版错误。匹配到的最后一个字符索引。    “dbbd”</li>
</ul>
</li>
</ul>
<ol>
<li>myRe     </li>
</ol>
<ul>
<li><ul>
<li>lastIndex    下一个匹配的索引值。（这个属性只有在使用g参数时可用在 通过参数进行高级搜索 一节有详细的描述.)    5</li>
</ul>
</li>
<li><ul>
<li>source    模式文本。在正则表达式创建时更新，不执行。    “d(b+)d”<br><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/50215172.jpg" alt=""></li>
</ul>
</li>
</ul>
<p>正则表达式可以被用于 RegExp 的 exec 和 test 方法以及 String 的 match、replace、search和 split 方法。</p>
<h3 id="方法及描述"><a href="#方法及描述" class="headerlink" title="方法及描述 :"></a>方法及描述 :</h3><ul>
<li>exec &nbsp;&nbsp;一个在 <em>正则 RegExp</em> 中执行查找匹配的 <em>字符串 String</em> 方法，它返回一个数组（未匹配到则返回null）。<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/21413750.jpg" alt=""></li>
<li>match&nbsp;&nbsp;一个在 <em>字符串</em> 中执行查找匹配的 <em>String</em> 方法，它返回一个数组或者在未匹配到时返回null。<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/71719153.jpg" alt=""></li>
<li>search&nbsp;&nbsp;一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</li>
<li>test&nbsp;&nbsp;一个在字符串中测试是否匹配的RegExp方法，它返回true或false。<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/60520995.jpg" alt=""><br>这里根据测试次数不同， lastindex 值改变，结果会有所不同<br>例： <img src="http://or3233yyd.bkt.clouddn.com//17-7-16/46262496.jpg" alt=""></li>
<li>replace&nbsp;&nbsp;一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-17/79744675.jpg" alt=""><br>其中 function 方法：<img src="http://or3233yyd.bkt.clouddn.com//17-7-17/190159.jpg" alt=""></li>
<li>split&nbsp;&nbsp;一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。<br>例： <img src="http://or3233yyd.bkt.clouddn.com//17-7-16/22074543.jpg" alt=""></li>
</ul>
<h1 id="常见的正则表达式"><a href="#常见的正则表达式" class="headerlink" title="常见的正则表达式"></a>常见的正则表达式</h1><ul>
<li><p>邮箱：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</div></pre></td></tr></table></figure>
</li>
<li><p>URL 地址： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^https?:\/\/(([a-zA-Z0-9_-])+(\.)?)*(:\d+)?(\/((\.)?(\?)?=?&amp;?[a-zA-Z0-9_-](\?)?)*)*$/i</div></pre></td></tr></table></figure>
</li>
<li><p>手机号码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/</div></pre></td></tr></table></figure>
</li>
<li><p>匹配身份证号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^(^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$)|(^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d&#123;4&#125;)|\d&#123;3&#125;[Xx])$)$/</div></pre></td></tr></table></figure>
</li>
<li><p>邮政编码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^[1-9]\d&#123;5&#125;(?!\d)$/</div></pre></td></tr></table></figure>
</li>
<li><p>匹配日期(yyyy-mm-dd)： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^[1-2][0-9][0-9][0-9]-[0-1]&#123;0,1&#125;[0-9]-[0-3]&#123;0,1&#125;[0-9]$/</div></pre></td></tr></table></figure>
</li>
<li><p>匹配 HTML 标签： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/&lt;(\S*?) [^*&gt;.*?&lt;/\1&gt;|&lt;.*?/&gt;/gm</div></pre></td></tr></table></figure>
</li>
<li><p>匹配中文字符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/[\u4e00-\u9fa5]/gm</div></pre></td></tr></table></figure>
</li>
<li><p>只能输入数字： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^\d+$/</div></pre></td></tr></table></figure>
</li>
<li><p>只能由英文字母/数字/下划线组成： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^\w+$/</div></pre></td></tr></table></figure>
</li>
<li><p>只能英文和数字组成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^[a-z0-9]+$/i</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="正则表达式学习"><a href="#正则表达式学习" class="headerlink" title="正则表达式学习"></a>正则表达式学习</h1><p><a href="https://msdn.microsoft.com/zh-cn/library/az24scfc%28v=vs.110%29.aspx" target="_blank" rel="external">正则表达式快速参考-MSDN</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">正则表达式-MDN</a><br><a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a><br><a href="http://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="external">菜鸟教程-正则表达式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="正则表达式" scheme="http:%5C%5Chexin.life/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>url 从输入到页面渲染完成到底发生了什么</title>
    <link href="http:%5C%5Chexin.life/2017/07/11/title-24/"/>
    <id>http:\\hexin.life/2017/07/11/title-24/</id>
    <published>2017-07-11T13:32:07.000Z</published>
    <updated>2017-08-09T17:35:54.173Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="开始上网，输入-url"><a href="#开始上网，输入-url" class="headerlink" title="开始上网，输入 url"></a>开始上网，输入 url</h1><p>当我们开始输入 url 的时候，浏览器就已经开始匹配 url ，从历史纪录，书签等，找到已经输入的字符串可能对应的 url ，然后给出智能提示，自动补全等。<br><img src="http://or3233yyd.bkt.clouddn.com//17-8-9/69469932.jpg" alt=""></p>
<h1 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL"></a>解析URL</h1><ul>
<li><p>浏览器通过 URL 能够知道下面的信息：</p>
<ul>
<li>Protocol “http”<br>使用HTTP协议</li>
<li>Resource “/“<br>请求的资源是主页(index)<h1 id="输入的是-URL-还是搜索的关键字？"><a href="#输入的是-URL-还是搜索的关键字？" class="headerlink" title="输入的是 URL 还是搜索的关键字？"></a>输入的是 URL 还是搜索的关键字？</h1>当协议或主机名不合法时，浏览器会将地址栏中输入的文字传给默认的搜索引擎。大部分情况下，在把文字传递给搜索引擎的时候，URL会带有特定的一串字符，用来告诉搜索引擎这次搜索来自这个特定浏览器。<h1 id="转换非-ASCII-的-Unicode-字符"><a href="#转换非-ASCII-的-Unicode-字符" class="headerlink" title="转换非 ASCII 的 Unicode 字符"></a>转换非 ASCII 的 Unicode 字符</h1></li>
</ul>
</li>
<li>浏览器检查输入是否含有不是 a-z， A-Z，0-9， - 或者 . 的字符</li>
<li>这里主机名是 google.com ，所以没有非ASCII的字符；如果有的话，浏览器会对主机名部分使用 Punycode 编码<h1 id="检查-HSTS-列表"><a href="#检查-HSTS-列表" class="headerlink" title="检查 HSTS 列表"></a>检查 HSTS 列表</h1></li>
<li>浏览器检查自带的“预加载 HSTS（HTTP严格传输安全）”列表，这个列表里包含了那些请求浏览器只使用HTTPS进行连接的网站</li>
<li>如果网站在这个列表里，浏览器会使用 HTTPS 而不是 HTTP 协议，否则，最初的请求会使用HTTP协议发送</li>
<li>注意，一个网站哪怕不在 HSTS 列表里，也可以要求浏览器对自己使用 HSTS 政策进行访问。浏览器向网站发出第一个 HTTP 请求之后，网站会返回浏览器一个响应，请求浏览器只使用 HTTPS 发送请求。然而，就是这第一个 HTTP 请求，却可能会使用户受到 <a href="http://en.wikipedia.org/wiki/SSL_stripping" target="_blank" rel="external">downgrade attack</a> 的威胁，这也是为什么现代浏览器都预置了 HSTS 列表。<h1 id="浏览器查找-url-的-Ip-地址"><a href="#浏览器查找-url-的-Ip-地址" class="headerlink" title="浏览器查找 url 的 Ip 地址"></a>浏览器查找 url 的 Ip 地址</h1></li>
</ul>
<ol>
<li>浏览器检查域名是否在缓存当中（要查看 Chrome 当中的缓存， 打开 chrome://net-internals/#dns）。</li>
<li>首先查看本地硬盘的 host 文件，查看其中有没有和这个域名对应的规则，如果找到，就直接使用 host 中的 ip 地址。</li>
<li>如果 host 中没能找到对应的 ip 地址，浏览器会发出一个 DNS 请求到本地 DNS 服务器，即网络接入提供商(中国移动，中国电信等)</li>
<li>本地 DNS 服务器查询它的缓存记录，如果有就直接返回查询结果，此过程是递归查询，如果没有则会向 DNS 根服务器查询</li>
<li>跟服务器没有相应的记录时，就告诉本地 DNS 服务器可以去域名服务器查询，并告知域名服务器的 IP，</li>
<li>本地服务器向域名服务器发出请求，在下图中请求的对象是 .com 服务器， .com 服务器收到请求后，也不会直接返回对应关系，而是告诉本地 DNS 服务器，你所查询的域名的服务器的地址。</li>
<li>本地服务器向查询的域名服务器发出请求，此时能收到相应的域名和 IP 的地址，本地 DNS 不仅要把返回的 IP 和域名返回给用户还要把这个关系保存到缓存中，以防下次用户请求时，可以快速返回结果，加快了网络的访问。</li>
</ol>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-8-9/12752710.jpg" alt="域名解析-盗图"></p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">关于 DNS</a></p>
</blockquote>
<h1 id="浏览器向-Web-服务器发出-HTTP-请求"><a href="#浏览器向-Web-服务器发出-HTTP-请求" class="headerlink" title="浏览器向 Web 服务器发出 HTTP 请求"></a>浏览器向 Web 服务器发出 HTTP 请求</h1><p>拿到域名对应的 IP 地址之后，浏览器会以随机一个( 1024 &lt; 端口号 &lt; 65535 ) 向 Web 服务器 ( nginx ) 的 80 端口号发出 TCP 的连接请求，经过各种路由设备(局域网除外)，<br>到达网卡，进入到内核的 TCP/IP 协议栈( 识别连接请求，解封包等 )，最终到达 Web 应用程序，建立起了 TCP/IP 连接。</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-8-9/51034741.jpg" alt=""></p>
<p>建立起 TCP 连接之后，发起一个 HTTP 请求 ( 一般常用是 get post )。<br>一般一个 HTTP 请求包含：</p>
<ul>
<li>请求的 url 协议/版本</li>
<li>请求头 request header</li>
<li>请求体 request body</li>
</ul>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-8-9/16138101.jpg" alt=""></p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-8-9/65736963.jpg" alt=""></p>
<blockquote>
<p>最后一个请求头后面是空行，发送回车符和换行符，通知服务器以下不再是请求头</p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-8-9/26447488.jpg" alt=""></p>
<blockquote>
<p><a href="https://github.com/jawil/blog/issues/14" target="_blank" rel="external">TCP 三次握手与四次挥手</a><br> <a href="http://blog.csdn.net/whuslei/article/details/6667471/" target="_blank" rel="external">TCP协议中的三次握手和四次挥手(图解)</a></p>
</blockquote>
<h1 id="服务器的永久重定向响应"><a href="#服务器的永久重定向响应" class="headerlink" title="服务器的永久重定向响应"></a>服务器的永久重定向响应</h1><p>服务器给浏览器响应一个 301 的永久重定向，这样浏览器访问 <a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a> 而不是 <a href="http://google.com" target="_blank" rel="external">http://google.com</a> ，这是由于搜索引擎排名的原因，比如我的网站为了输入方便，在进行 DNS 解析时，将 <a href="http://www.hexin.life" target="_blank" rel="external">http://www.hexin.life</a> 和 <a href="http://hexin.life">http://hexin.life</a> 定位到了同一网站下，搜素引擎会认为他们是俩个网站，从而造成搜索排名下降。而当 301 重定向之后，搜素引擎便会把含  www 的和不含的放在同一个网站排名中，而且使用 www 和非 www 时，也会缓存多次，所以会进行 301 的重定向。</p>
<blockquote>
<p><a href="https://aotu.io/notes/2016/01/28/3xx-of-http-status/" target="_blank" rel="external">你所知道的3xx状态码</a></p>
</blockquote>
<h1 id="浏览器跟踪重定向地址"><a href="#浏览器跟踪重定向地址" class="headerlink" title="浏览器跟踪重定向地址"></a>浏览器跟踪重定向地址</h1><p>再次向正确地址发送 HTTP 请求</p>
<h1 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h1><p>经过千辛万苦，终于将 http 发送到了我们的服务器。后端接到 TCP 报文开始，他会对 tcp 连接进行处理，对 HTTP 根据协议进行解析，按照报文格式一步一步封装成 HTTP request 对象，供上层使用。</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-8-9/67016800.jpg" alt=""></p>
<p>大一点的网站会请求到<a href="https://github.com/moonbingbing/openresty-best-practices/blob/master/ngx/reverse_proxy.md" target="_blank" rel="external">反向代理</a>中，因为网站访问量越来越大，网站速度也就变慢了，此时客户端不再直接通过 HTTP 协议访问某网站的应用服务器，而是先请求到 Nginx ， Nginx 再请求应用服务器，然后再将结果返回给客户端，这里 Nginx 的作用时反向代理服务器，同时如果一台服务器挂了，只要其他服务器还在正常运行，网站就能正常使用。</p>
<p><img src="http://www.2cto.com/uploadfile/Collfiles/20150518/201505180932502.jpg?_=6547807" alt=""></p>
<h1 id="服务器返回-HTTP-请求"><a href="#服务器返回-HTTP-请求" class="headerlink" title="服务器返回 HTTP 请求"></a>服务器返回 HTTP 请求</h1><p>响应类似请求：</p>
<ul>
<li>状态行</li>
<li>响应头</li>
<li>响应体</li>
</ul>
<p><img src="./1502292587253.png" alt="Alt text"></p>
<h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><ol>
<li>1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。</li>
</ol>
<ul>
<li><p>100 Continue</p>
</li>
<li><p>101 Switching Protocols</p>
</li>
</ul>
<ol>
<li>2xx：成功状态码，表示服务器已成功接收到请求并进行处理。</li>
</ol>
<ul>
<li><p>200 OK 表示客户端请求成功</p>
</li>
<li><p>204 No Content 成功，但不返回任何实体的主体部分</p>
</li>
<li><p>206 Partial Content 成功执行了一个范围（Range）请求</p>
</li>
</ul>
<ol>
<li>3xx：重定向状态码，表示服务器要求客户端重定向。</li>
</ol>
<ul>
<li><p>301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL</p>
</li>
<li><p>302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源</p>
</li>
<li><p>303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源</p>
</li>
<li><p>304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存</p>
</li>
<li><p>307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现</p>
</li>
</ul>
<ol>
<li>4xx：客户端错误状态码，表示客户端的请求有非法内容。</li>
</ol>
<ul>
<li><p>400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解</p>
</li>
<li><p>401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用</p>
</li>
<li><p>403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因</p>
</li>
<li><p>404 Not Found 请求的资源不存在，例如，输入了错误的URL</p>
</li>
</ul>
<ol>
<li>5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。</li>
</ol>
<ul>
<li><p>500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求</p>
</li>
<li><p>503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</p>
</li>
</ul>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="external">HTTP状态码</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="external">HTTP response codes</a><br><a href="http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/" target="_blank" rel="external">HTTP,HTTP2.0,SPDY,HTTPS你应该知道的一些事</a></p>
</blockquote>
<h1 id="浏览器渲染-html"><a href="#浏览器渲染-html" class="headerlink" title="浏览器渲染 html"></a>浏览器渲染 html</h1><p>浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载。</p>
<ol>
<li>首先是解析 HTML 构建 DOM 树 =&gt; </li>
<li>解析 CSS 解析为 CSSOM =&gt;</li>
<li>结合 DOM  和 CSSOM 生成 render tree(每个节点的视觉信息) =&gt;</li>
<li>生成布局 layout =&gt;</li>
<li>将布局绘制到屏幕 </li>
</ol>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015091501.png" alt=""></p>
<p>这五步中，三四步比较慢生成布局和绘制合成渲染<br><img src="http://7tszky.com1.z0.glb.clouddn.com/Fs-4pQMkTCUIeOj0XjSDdZkHzs0N" alt=""></p>
<p>当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。因为JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。所以我明平时的代码中，js是放在html文档末尾的。</p>
<p>DOM 树<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FvpCzlwc6Hk2RSNfE8P0Ro-kHtCj" alt=""></p>
<blockquote>
<p>DOM 树中的每一个需要显示的节点再渲染树中至少存在一个对应的节点，隐藏的 DOM 元素则没有对应节点，渲染树中的节点被称为 “帧（frames）”或“盒（boxes）”，<br>符合 CSS 模型的定义，一旦DOM 树和渲染树构建完成，浏览器就开始显示绘制元素</p>
</blockquote>
<p>很多时候，密集的重新渲染是无法避免的，比如scroll事件的回调函数和网页动画。<br>网页动画的每一帧（frame）都是一次重新渲染。每秒低于24帧的动画，人眼就能感受到停顿。一般的网页动画，需要达到每秒30帧到60帧的频率，才能比较流畅。如果能达到每秒70帧甚至80帧，就会极其流畅。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015091509.jpg" alt=""></p>
<p>大多数显示器的刷新频率是60Hz，为了与系统一致，以及节省电力，浏览器会自动按照这个频率，刷新动画（如果可以做到的话）。<br>所以，如果网页动画能够做到每秒60帧，就会跟显示器同步刷新，达到最佳的视觉效果。这意味着，一秒之内进行60次重新渲染，每次重新渲染的时间不能超过16.66毫秒。</p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015091511.png" alt=""></p>
<p>一秒之间能够完成多少次重新渲染，这个指标就被称为”刷新率”，英文为FPS（frame per second）。60次重新渲染，就是60FPS。<br>如果想达到60帧的刷新率，就意味着JavaScript线程每个任务的耗时，必须少于16毫秒。一个解决办法是使用Web Worker，主线程只用于UI渲染，然后跟UI渲染不相干的任务，都放在Worker线程。</p>
<h2 id="DOM-解析"><a href="#DOM-解析" class="headerlink" title="DOM 解析"></a>DOM 解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Web page parsing&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;h1&gt;Web page parsing&lt;/h1&gt;</div><div class="line">        &lt;p&gt;This is an example Web page.&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>DOM 解析成这样<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FvpCzlwc6Hk2RSNfE8P0Ro-kHtCj" alt=""></p>
<h2 id="CSS-解析"><a href="#CSS-解析" class="headerlink" title="CSS 解析"></a>CSS 解析</h2><p>假设有下面这样的 DOM 结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;doc&gt;</div><div class="line">&lt;title&gt;A few quotes&lt;/title&gt;</div><div class="line">&lt;para&gt;</div><div class="line">  Franklin said that &lt;quote&gt;&quot;A penny saved is a penny earned.&quot;&lt;/quote&gt;</div><div class="line">&lt;/para&gt;</div><div class="line">&lt;para&gt;</div><div class="line">  FDR said &lt;quote&gt;&quot;We have nothing to fear but &lt;span&gt;fear itself.&lt;/span&gt;&quot;&lt;/quote&gt;</div><div class="line">&lt;/para&gt;</div><div class="line">&lt;/doc&gt;</div></pre></td></tr></table></figure></p>
<p>CSS 文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> /* rule 1 */ doc &#123; display: block; text-indent: 1em; &#125;</div><div class="line">/* rule 2 */ title &#123; display: block; font-size: 3em; &#125;</div><div class="line">/* rule 3 */ para &#123; display: block; &#125;</div><div class="line">/* rule 4 */ [class=&quot;emph&quot;] &#123; font-style: italic; &#125;</div></pre></td></tr></table></figure></p>
<p>CSS Rule tree 时这样<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FsMdOZZS2iL7mLQ2xczi4xDsSGxQ" alt=""></p>
<blockquote>
<ul>
<li>图中的第4条规则出现了两次，一次是独立的，一次是在规则3的子结点。所以，我们可以知道，建立CSS Rule Tree是需要比照着DOM Tree来的。CSS匹配DOM Tree主要是从右到左解析CSS的Selector，好多人以为这个事会比较快，其实并不一定。关键还看我们的CSS的Selector怎么写了。</li>
<li>CSS匹配HTML元素是一个相当复杂和有性能问题的事情。所以，你就会在N多地方看到很多人都告诉你，DOM树要小，CSS尽量用id和class，千万不要过渡层叠下去</li>
</ul>
</blockquote>
<p>通过这俩个树我们可以得到一个叫 Style Context Tree<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FtvQWJEJtFB2uLArF0JIb-wVjpZ7" alt=""></p>
<blockquote>
<p>所以，Firefox基本上来说是通过CSS 解析 生成 CSS Rule Tree，然后，通过比对DOM生成Style Context Tree，然后Firefox通过把Style Context Tree和其Render Tree（Frame Tree）关联上，就完成了。注意：Render Tree会把一些不可见的结点去除掉。而Firefox中所谓的Frame就是一个DOM结点，不要被其名字所迷惑了。</p>
</blockquote>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/FsFHqgtq4u-cfnruLkusj1qOqwh6" alt=""><br><em>在 Firefox 中，系统会针对 DOM 更新注册展示层，作为侦听器。展示层将框架创建工作委托给FrameConstructor，由该构造器解析样式（请参阅样式计算）并创建框架。<br>在 WebKit 中，解析样式和创建呈现器的过程称为“附加”。每个 DOM 节点都有一个“attach”方法。附加是同步进行的，将节点插入 DOM 树需要调用新的节点“attach”方法</em></p>
<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><ol>
<li><a href="http://blog.csdn.net/xllily_11/article/details/54426119" target="_blank" rel="external">计算 CSS 样式</a></li>
<li>构建 render tree</li>
<li>Layout </li>
<li>开始绘制</li>
</ol>
<p><img src="http://7tszky.com1.z0.glb.clouddn.com/Fv8mWt_14BnfBbe_pllVfN-WzfHG" alt=""></p>
<blockquote>
<p>上图流程中有很多连接线，这表示了Javascript动态修改了DOM属性或是CSS属会导致重新Layout，有些改变不会，就是那些指到天上的箭头，比如，修改后的CSS rule没有被匹配到，等。</p>
</blockquote>
<h2 id="Repaint"><a href="#Repaint" class="headerlink" title="Repaint"></a>Repaint</h2><p>屏幕的一部分要重画，比如某个元素的 CSS 背景变了，但尺寸没有变</p>
<h2 id="Reflow"><a href="#Reflow" class="headerlink" title="Reflow"></a>Reflow</h2><p>当  DOM 的变化影响了元素的几何属性 =&gt; 比如改变边框宽度或者给段落增加文字，导致行数增加 =&gt; 浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会收到影响，浏览器会使渲染树中受到影响部分失效，并重新构造渲染树，发生重排，完成重排后，浏览器会重新绘制受影响部分的元素到屏幕中，也会发生重绘。</p>
<ul>
<li>样式表越简单，重排和重绘就越快。</li>
<li>重排和重绘的DOM元素层级越高，成本就越高。</li>
<li>table元素的重排和重绘成本，要高于div元素<h3 id="发生重绘"><a href="#发生重绘" class="headerlink" title="发生重绘"></a>发生重绘</h3></li>
<li>当你增加、删除、修改DOM结点时，会导致Reflow或Repaint</li>
<li>当你移动DOM的位置，或是搞个动画的时候。(元素位置发生改变)</li>
<li>当你修改CSS样式的时候。或者页面渲染初始化</li>
<li>当你Resize窗口的时候（移动端没有这个问题），或是滚动的时候。</li>
<li>当你修改网页的默认字体时。</li>
<li>元素尺寸发生改变(边距， 高度等)</li>
<li>注：display:none会触发reflow，而visibility:hidden只会触发repaint，因为没有发现位置变化。<h3 id="渲染树的变化的排队与刷新"><a href="#渲染树的变化的排队与刷新" class="headerlink" title="渲染树的变化的排队与刷新"></a>渲染树的变化的排队与刷新</h3>由于每次重排都行会产生消耗，大多数浏览器通过队列化修改并批量执行来优化重排过程，然而，你可能会不知不觉的强制刷新对了要求计划立刻执行，获取布局的信息会导致队列刷新</li>
<li>offsetTop, offsetBottom, offsetWidth, offsetHeight</li>
<li>scrollTop,  scrollBottom, scrollWidth, scrollHeight</li>
<li>clientTop,  clientBottom, clientWidth, clientHeight</li>
<li>getComputedStyle() =&gt;( currentStyle in IE)<br>以上属性和方法需要返回最新的布局信息，因此浏览器不得不执行渲染队列中的‘待处理变化’并触发重排以返回正确的值。<blockquote>
<p>“重绘”不一定需要”重排” —- “重排”必然导致”重绘”</p>
</blockquote>
</li>
</ul>
<h3 id="最小化重绘和重排"><a href="#最小化重绘和重排" class="headerlink" title="最小化重绘和重排"></a>最小化重绘和重排</h3><ul>
<li>改变样式 =&gt; 不要一条条地改变样式，多个改变合并 =&gt; 直接更换 CSS 的 Class </li>
<li>批量修改 DOM =&gt; 使元素脱离文档流(隐藏显示，使用文档片段，拷贝到一个脱离文档的节点中完成后再替换) =&gt; 修改 =&gt; 带回文档</li>
<li>动画使用绝对定位，使用拖放代理</li>
<li>缓存布局信息 =&gt; 偏移量，滚动位置， 计算出的样式等 获取一次后赋值给局部遍历</li>
<li>事件委托 =&gt; 减少事件处理器的数量</li>
</ul>
<h1 id="浏览器请求嵌在-HTML-中的资源-图片，视频音频，-CSS，-JavaScript-等"><a href="#浏览器请求嵌在-HTML-中的资源-图片，视频音频，-CSS，-JavaScript-等" class="headerlink" title="浏览器请求嵌在 HTML 中的资源(图片，视频音频， CSS， JavaScript 等)"></a>浏览器请求嵌在 HTML 中的资源(图片，视频音频， CSS， JavaScript 等)</h1><p>其实这个步骤可以并列在步骤8中，在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。比如我要获取外图片，CSS，JS文件等，类似于下面的链接：</p>
<p>图片：<a href="http://or3233yyd.bkt.clouddn.com//17-8-9/67016800.jpg" target="_blank" rel="external">http://or3233yyd.bkt.clouddn.com//17-8-9/67016800.jpg</a></p>
<p>CSS式样表：<a href="https://cdn.bootcss.com/animate.css/3.5.2/animate.css" target="_blank" rel="external">https://cdn.bootcss.com/animate.css/3.5.2/animate.css</a></p>
<p>JavaScript 文件：<a href="https://cdn.bootcss.com/jquery/3.2.1/core.js" target="_blank" rel="external">https://cdn.bootcss.com/jquery/3.2.1/core.js</a></p>
<p>　　这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等…</p>
<p>不像动态页面，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取，或者可以放到CDN中</p>
<h1 id="转载整理："><a href="#转载整理：" class="headerlink" title="转载整理："></a>转载整理：</h1><p><img src="http://fex.baidu.com/img/what-happen/nwind-weibo.png" alt=""></p>
<ul>
<li><a href="http://www.kuqin.com/shuoit/20170324/353413.html" target="_blank" rel="external">老生常谈从输入url 到页面展示到底发生了什么</a></li>
<li><a href="https://github.com/skyline75489/what-happens-when-zh_CN" target="_blank" rel="external">当···时发生了什么？=&gt; 推荐 </a></li>
<li><a href="http://blog.csdn.net/xllily_11/article/details/54426119" target="_blank" rel="external">作为前端你不得不知-浏览器的工作原理：网络浏览器幕后揭秘</a></li>
<li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Parsing_general" target="_blank" rel="external">浏览器的工作原理：新式网络浏览器幕后揭秘 – more than </a></li>
<li><a href="http://fex.baidu.com/blog/2014/05/what-happen/" target="_blank" rel="external">从输入 URL 到页面加载完成的过程中都发生了什么事情？=&gt; 太恐怖，涉及硬件，感兴趣就去挑战吧</a></li>
<li><a href="http://imweb.io/topic/56841c864c44bcc56092e3fa" target="_blank" rel="external">浏览器渲染原理</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html" target="_blank" rel="external">网页性能管理详解</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试前夕" scheme="http:%5C%5Chexin.life/tags/%E9%9D%A2%E8%AF%95%E5%89%8D%E5%A4%95/"/>
    
  </entry>
  
  <entry>
    <title>盒模型 行内元素及块级元素区别</title>
    <link href="http:%5C%5Chexin.life/2017/07/11/title-15/"/>
    <id>http:\\hexin.life/2017/07/11/title-15/</id>
    <published>2017-07-11T13:30:56.000Z</published>
    <updated>2017-09-09T08:25:55.464Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p><img src="https://developer.mozilla.org/files/72/boxmodel%20(1" alt="">.png)</p>
<p>在一个文档中，每个元素都被表示为一个矩形的盒子。确定这些盒子的尺寸, 属性 — 像它的颜色，背景，边框方面 — 和位置是渲染引擎的目标。</p>
<p>在CSS中，使用标准盒模型描述这些矩形盒子中的每一个。这个模型描述了元素所占空间的内容。每个盒子有四个边：外边距边, 边框边, 内填充边 与 内容边。</p>
<h2 id="盒模型-1"><a href="#盒模型-1" class="headerlink" title="盒模型"></a>盒模型</h2><p><img src="http://www.runoob.com/images/box-model.gif" alt=""></p>
<ul>
<li><p>内容区域content area 是包含元素真实内容的区域。它通常包含背景、颜色或者图片等，位于内容边界的内部，它的大小为内容宽度 或 content-box宽及内容高度或content-box高。</p>
</li>
<li><p>如果 box-sizing 为默认值， width, min-width, max-width, height, min-height 与 max-height 控制内容大小。</p>
</li>
<li><p>内边距区域 padding area 延伸到包围padding的边框。如果内容区域 content area 设置了背景、颜色或者图片，这些样式将会延伸到 padding 上(译者注：而不仅仅是作用于内容区域)。它位于内边距边界内部, 它的大小为 padding-box  宽与 padding-box 高。</p>
</li>
</ul>
<p>内边距与内容边界之间的空间可以由 padding-top, padding-right, padding-bottom, padding-left 和简写属性 padding 控制。</p>
<ul>
<li><p>边框区域 border area 是包含边框的区域，扩展了内边距区域。它位于边框边界内部，大小为 border-box  宽和 border-box 高。由 border-width 及简写属性 border控制。</p>
</li>
<li><p>外边距区域 margin area 用空白区域扩展边框区域，以分开相邻的元素。它的大小为  margin-box 的高宽。</p>
</li>
</ul>
<p>外边距区域大小由 margin-top, margin-right, margin-bottom, margin-left 及简写属性 margin 控制。</p>
<h2 id="盒模型宽高计算"><a href="#盒模型宽高计算" class="headerlink" title="盒模型宽高计算"></a>盒模型宽高计算</h2><p>最终元素的总宽度计算公式是这样的：</p>
<ul>
<li>总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距</li>
<li>width = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</li>
</ul>
<p>元素的总高度最终计算公式是这样的：</p>
<ul>
<li>总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</li>
<li>height = margin-top + border-top + padding-top + width + padding-bottom + border-bottom + margin-bottom</li>
</ul>
<p>而IE对宽度的诠释不一样。符合 W3C 标准的浏览器认为一个元素的宽度只等于其 content 的宽度，其余都要额外算。如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.example</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>则他最终的宽度应为：<br>宽度 = width + padding <em> 2 + border</em> 2 + margin * 2  = 270px;</li>
<li><p>而在 IE（低于IE9） 下，最终宽度为：<br>宽度 = width + margin* 2 = 240px;</p>
<blockquote>
<p> W3C 最后为了解决这个问题，在 CSS3 中加了 box-sizing 这个属性。当我们设置 box-sizing: border-box; 时，border 和 padding 就被包含在了宽高之内，和 IE 之前的标准是一样的。</p>
</blockquote>
<p>所以，为了避免你同一份 css 在不同浏览器下表现不同，最好加上：</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><h2 id="标准模型-IE-模型及区别"><a href="#标准模型-IE-模型及区别" class="headerlink" title="标准模型 + IE 模型及区别"></a>标准模型 + IE 模型及区别</h2><p> 标准模型<br> <img src="http://or3233yyd.bkt.clouddn.com//17-8-22/63670011.jpg" alt=""></p>
<p> 只有 content 的宽高</p>
<p> IE 模型<br> <img src="http://or3233yyd.bkt.clouddn.com//17-8-22/66702568.jpg" alt=""></p>
<p> 包含了 border 和 padding 的宽高</p>
<h2 id="CSS-如何设置这俩种模型"><a href="#CSS-如何设置这俩种模型" class="headerlink" title="CSS 如何设置这俩种模型"></a>CSS 如何设置这俩种模型</h2><p>  box-sizing: content-box  浏览器默认<br>  box-sizing: border-box</p>
<ul>
<li>content-box<br>默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。注意: 内边距, 边框 &amp; 外边距 都在这个盒子的外部。 比如. 如果 .box {width: 350px}; 而且 {border: 10px solid black;} 那么在浏览器中的渲染的实际宽度将是370px;</li>
</ul>
<blockquote>
<p>尺寸计算公式：width = 内容的宽度，height = 内容的高度。宽度和高度都不包含内容的边框（border）和内边距（padding）。</p>
</blockquote>
<ul>
<li>border-box<br>width 和 height 属性包括内容，内边距和边框，但不包括外边距。这是当文档处于Quirks模式时InternetExplorer使用的盒模型。注意，填充和边框将在盒子内 , 例如, .box {width: 350px; border:10pxsolidblack;}导致在浏览器中呈现的宽度为350px的盒子。内容框不能为负，并且被分配到0，使得不可能使用border-box使元素消失。</li>
</ul>
<blockquote>
<p>这里的维度计算为：<br>width = border + padding + 内容的  width，<br>height = border + padding + 内容的 height。</p>
</blockquote>
<h2 id="JS获取这俩种模型对应的宽和高"><a href="#JS获取这俩种模型对应的宽和高" class="headerlink" title="JS获取这俩种模型对应的宽和高"></a>JS获取这俩种模型对应的宽和高</h2><ul>
<li>dom.style.width/height         =&gt; 只能取出内联样式的宽高</li>
<li>dom.currentStyle.width/height  =&gt; 渲染以后的样式    IE…</li>
<li>window.getComputedStyle(btn).height  =&gt; FireFox chrome…</li>
<li><p>dom.getBoundingClientRect()    =&gt; 可获得x, y, top, bottom, left, right, height, width 六个属性<br>根据视窗(viewport)计算元素的绝对位置</p>
<h2 id="根据盒模型解释边距重叠"><a href="#根据盒模型解释边距重叠" class="headerlink" title="根据盒模型解释边距重叠"></a>根据盒模型解释边距重叠</h2><p>发生外边距塌陷的三种基本情况:</p>
<h3 id="相邻的兄弟姐妹元素"><a href="#相邻的兄弟姐妹元素" class="headerlink" title="相邻的兄弟姐妹元素"></a>相邻的兄弟姐妹元素</h3><p>毗邻的两个兄弟元素之间的外边距会塌陷（除非后者兄弟姐妹需要清除过去的浮动）。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p style=&quot;margin-bottom: 30px;&quot;&gt;这个段落的下外边距被合并...&lt;/p&gt;</div><div class="line">&lt;p style=&quot;margin-top: 20px;&quot;&gt;...这个段落的上外边距被合并。&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>可以发现这两个段落中间的距离，不是 ”上面段落的下边距“ 与 ”下面段落的上边距“ 的 求和 ，而是两者中的较大者（在此示例中为30px）。</p>
<h3 id="块级父元素与其第一个-最后一个子元素"><a href="#块级父元素与其第一个-最后一个子元素" class="headerlink" title="块级父元素与其第一个/最后一个子元素"></a>块级父元素与其第一个/最后一个子元素</h3><p>如果块级父元素中，不存在上边框、上内边距、内联元素、清除浮动这四条属性（也可以说，当上边框宽度及上内边距距离为0时），那么这个 块级元素和其第一个子元素的上边距就可以说”挨到了一起“。此时这个块级父元素和其第一个子元素就会发生上外边距合并现象，换句话说，此 时这个父元素对外展现出来的外边距将直接变成这个父元素和其第一个子元素的margin-top的较大者。<br>类似的，若块级父元素的 margin-bottom 与它的最后一个子元素的margin-bottom 之间没有父元素的 border、padding、inline  content、height、min-height、 max-height 分隔时，就会发生 下外边距合并 现象。</p>
<h3 id="空块元素"><a href="#空块元素" class="headerlink" title="空块元素"></a>空块元素</h3><p>如果存在一个空的块级元素，其 border、padding、inline、content、height、min-height都不存在。那么此时它的上下边距中间将没有任何阻隔，此时它的上下外边距将会合并。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p style=&quot;margin-bottom: 0px;&quot;&gt;这个段落的和下面段落的距离将为20px&lt;/p&gt;</div><div class="line">&lt;div style=&quot;margin-top: 20px; margin-bottom: 20px;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;p style=&quot;margin-top: 0px;&quot;&gt;这个段落的和上面段落的距离将为20px&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>当以上情形同时出现时，外边距合并会更加复杂（会比较两个以上外边距来最终计算出真实的边距值）。</p>
<p>即使外边距为0，这些规则也仍旧生效。因此，无论父元素的外边距是否为0，第一个或者最后一个子元素的外边距会被父元素的外边距”截断”( 根据上面的规则)，在负外边距的情况下，合并后的外边距为最大正外边距与最小负外边距之和。</p>
<p>当有负边距存在时，合并后的外边距将是最大正边距加上最小负边距（即负边距中绝对值最大的一个）。</p>
<p>如两个兄弟元素，上面的元素的下边距为 20px ，下面的元素的上边距为 -20px ，那么发生外边距合并后，这两个元素的实际距离将变成 0px  。</p>
</li>
</ul>
<p>BFC会阻止元素外边距合并。</p>
<h2 id="BFC-IFC-gt-块级格式化上下文-内联元素的格式化上下文"><a href="#BFC-IFC-gt-块级格式化上下文-内联元素的格式化上下文" class="headerlink" title="BFC / IFC  =&gt; 块级格式化上下文 / 内联元素的格式化上下文"></a>BFC / IFC  =&gt; 块级格式化上下文 / 内联元素的格式化上下文</h2><h3 id="BFC-原理：-渲染原理"><a href="#BFC-原理：-渲染原理" class="headerlink" title="BFC 原理：(渲染原理)"></a>BFC 原理：(渲染原理)</h3><p>  BFC 元素的垂直方向的边距会发生重叠<br>  BFC 这个元素不会与浮动元素的 box 重叠，清除浮动<br>  独立的容器，外面元素和里面元素互不影响<br>  计算 BFC 高度时，浮动元素也会参与计算</p>
<h3 id="如何创建-BFC"><a href="#如何创建-BFC" class="headerlink" title="如何创建 BFC"></a>如何创建 BFC</h3><ul>
<li>设置浮动</li>
<li>position 值不为 static relative</li>
<li>display table / table-cell / table-caction</li>
<li><p>overflow hidden auto</p>
<h2 id="BFC-使用场景"><a href="#BFC-使用场景" class="headerlink" title="BFC 使用场景"></a>BFC 使用场景</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">&lt;!-- BFC 垂直方向边距重叠 --&gt;</div><div class="line"> &lt;section id=&quot;sec&quot;&gt;</div><div class="line"> &lt;style&gt;</div><div class="line"> html,body&#123;</div><div class="line">   padding: 0;</div><div class="line">   margin: 0;</div><div class="line"> &#125;</div><div class="line"> #sec&#123;</div><div class="line">   background: yellow;</div><div class="line">   /* 增加 overflow: hidden 解决边距重叠*/</div><div class="line">   overflow: hidden;</div><div class="line"> &#125;</div><div class="line"> .child&#123;</div><div class="line">   height: 100px;</div><div class="line">   margin-top: 10px;</div><div class="line">   background: #f00;</div><div class="line"> &#125;</div><div class="line"> &lt;/style&gt;</div><div class="line">   &lt;article class=&quot;child&quot;&gt;</div><div class="line"></div><div class="line">   &lt;/article&gt;</div><div class="line"> &lt;/section&gt;</div><div class="line"></div><div class="line"> &lt;!-- BFC 垂直方向边距重叠 --&gt;</div><div class="line"> &lt;section id=&quot;margin&quot;&gt;</div><div class="line"> &lt;style&gt;</div><div class="line">   #margin &#123;</div><div class="line">     background: pink;</div><div class="line">     overflow: hidden;</div><div class="line">   &#125;</div><div class="line">   #margin&gt;p &#123;</div><div class="line">     margin: 5px auto 25px;</div><div class="line">     background: red;</div><div class="line">   &#125;</div><div class="line"> &lt;/style&gt;</div><div class="line">   &lt;p&gt;1&lt;/p&gt;</div><div class="line">   &lt;!-- 增加父级元素设置 overflow 建立 BFC 取消边距重叠 --&gt;</div><div class="line">   &lt;div style=&quot;overflow: hidden;&quot;&gt;</div><div class="line">     &lt;p&gt;2&lt;/p&gt;</div><div class="line">   &lt;/div&gt;</div><div class="line">   &lt;p&gt;3&lt;/p&gt;</div><div class="line"> &lt;/section&gt;</div><div class="line"></div><div class="line"> &lt;!-- BFC 不与浮动元素重叠 --&gt;</div><div class="line"> &lt;section id=&quot;layout&quot;&gt;</div><div class="line"> &lt;style&gt;</div><div class="line">   #layout &#123;</div><div class="line">     margin-top: 20px;</div><div class="line">     background: green;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   #layout .left &#123;</div><div class="line">     float: left;</div><div class="line">     width: 100px;</div><div class="line">     height: 100px;</div><div class="line">     background: pink;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   #layout .right &#123;</div><div class="line">     height: 110px;</div><div class="line">     background: blue;</div><div class="line">     /* 增加 overflow: auto; .left 重叠消失 */</div><div class="line">     overflow: auto;</div><div class="line">   &#125;</div><div class="line"> &lt;/style&gt;</div><div class="line">   &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</div><div class="line">   &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</div><div class="line"> &lt;/section&gt;</div><div class="line"></div><div class="line"> &lt;!-- BFC 子元素即使是 float 也会参与高度计算 --&gt;</div><div class="line"> &lt;section id=&quot;float&quot;&gt;</div><div class="line"> &lt;style&gt;</div><div class="line">   #float &#123;</div><div class="line">     margin-top: 20px;</div><div class="line">     background: blue;</div><div class="line">     /* 设置浮动 非none / overflow: auto / hidden，父级元素高度参与计算，原为 0 */</div><div class="line">     float: left;</div><div class="line">     /*overflow: hidden;*/</div><div class="line">     /*overflow: auto;*/</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   #float .float &#123;</div><div class="line">     float: left;;</div><div class="line">     font-size: 30px;</div><div class="line">   &#125;</div><div class="line"> &lt;/style&gt;</div><div class="line">   &lt;div class=&quot;float&quot;&gt;</div><div class="line">     我是浮动元素</div><div class="line">   &lt;/div&gt;</div><div class="line"> &lt;/section&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="浏览器的兼容性问题"><a href="#浏览器的兼容性问题" class="headerlink" title="浏览器的兼容性问题"></a>浏览器的兼容性问题</h2><ul>
<li>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</li>
</ul>
<p>虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。</p>
<ul>
<li>IE8 及更早IE版本不支持 填充的宽度和边框的宽度属性设。<br>解决 IE8 及更早版本不兼容问题可以在HTML页面声明 &lt; !DOCTYPE html &gt; 即可。</li>
</ul>
<ul>
<li>IE6中浮动双边距<br>因为内联元素没有此问题，所以通过设置 display:inline 解决</li>
</ul>
<h1 id="行内元素及块级元素"><a href="#行内元素及块级元素" class="headerlink" title="行内元素及块级元素"></a>行内元素及块级元素</h1><p>HTML (超文本标记语言) 元素大多数都是行内元素或块级元素。</p>
<ul>
<li>行内元素只占据它对应标签的边框所包含的空间。</li>
<li>块级元素占据其父元素（容器）的整个空间，因此创建了一个“块”。<h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2></li>
</ul>
<ol>
<li>内容<ul>
<li>一般情况下，行内元素只能包含数据和其他行内元素。</li>
</ul>
</li>
<li>格式<ul>
<li>行内元素不会以新行开始</li>
<li>块级元素会新起一行。</li>
</ul>
</li>
</ol>
<p>&gt;</p>
<ul>
<li>设置宽度width 无效。</li>
<li>设置高度height 无效，可以通过 <a href="http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/" target="_blank" rel="external">line-height</a> 来设置。</li>
<li>设置 margin 只有左右 margin 有效，上下无效。</li>
<li><p>设置 padding 只有左右 padding 有效，上下则无效。<em>注意元素范围是增大了，但是对元素周围的内容是没影响的.</em></p>
<p>如果你要将行内元素变成块级元素，那么就只需要在该标签上加上样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>块级元素可以用样式控制其高、宽的值。</p>
<h4 id="若既想让元素在行内显示，又能设置宽高"><a href="#若既想让元素在行内显示，又能设置宽高" class="headerlink" title="若既想让元素在行内显示，又能设置宽高"></a>若既想让元素在行内显示，又能设置宽高</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span></div></pre></td></tr></table></figure>
<p>行内元素不可以控制宽和高，除非你想将它转变成为块级元素。它的宽和高，是随标签里的内容而变化。</p>
<h3 id="行内元素列表"><a href="#行内元素列表" class="headerlink" title="行内元素列表"></a>行内元素列表</h3><ul>
<li>b, big, i, small, tt</li>
<li>abbr, acronym, cite, code, dfn, em, kbd, strong, samp, var</li>
<li>a, bdo, br, img, map, object, q, script, span, sub, sup</li>
<li>button, input, label, select, textarea</li>
</ul>
<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>  <em>块级元素只能出现在 <body> 元素内</body></em></p>
<ol>
<li>内容<ul>
<li>块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。</li>
</ul>
</li>
<li>格式<ul>
<li>默认情况下，块级元素会新起一行。</li>
</ul>
</li>
<li>内容模型<ul>
<li>一般块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。<h3 id="块级元素列表"><a href="#块级元素列表" class="headerlink" title="块级元素列表"></a>块级元素列表</h3></li>
</ul>
</li>
</ol>
<ul>
<li>article [HTML5] 文章内容。</li>
<li>aside [HTML5] 伴随内容。</li>
<li>audio [HTML5] 音频播放。</li>
<li>blockquote 块引用。</li>
<li>canvas [HTML5] 绘制图形。</li>
<li>dd 定义列表中定义条目描述。</li>
<li>div 文档分区。</li>
<li>dl 定义列表。</li>
<li>fieldset 表单元素分组。</li>
<li>figcaption [HTML5] 图文信息组标题</li>
<li>figure [HTML5] 图文信息组 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/figcaption" target="_blank" rel="external">(参照 figcaption)</a>。</li>
<li>footer [HTML5] 区段尾或页尾。</li>
<li>form 表单。</li>
<li>h1, h2, h3, h4, h5, h6 标题级别 1-6.</li>
<li>header [HTML5] 区段头或页头。</li>
<li>hgroup [HTML5] 标题组。</li>
<li>hr 水平分割线。</li>
<li>noscript 不支持脚本或禁用脚本时显示的内容。</li>
<li>ol 有序列表。</li>
<li>output [HTML5] 表单输出。</li>
<li>p 行。 pre 预格式化文本。</li>
<li>section [HTML5] 一个页面区段。</li>
<li>table 表格。</li>
<li>tfoot 表脚注。</li>
<li>ul 无序列表。</li>
<li><p>video [HTML5] 视频。</p>
<h2 id="可变元素"><a href="#可变元素" class="headerlink" title="可变元素"></a>可变元素</h2><blockquote>
<p>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</p>
</blockquote>
</li>
<li><p>applet - java applet</p>
</li>
<li>button - 按钮</li>
<li>del - 删除文本</li>
<li>iframe - inline frame</li>
<li>ins - 插入的文本</li>
<li>map - 图片区块(map)</li>
<li>object - object 对象</li>
<li>script - 客户端脚本</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://jeffjade.com/2015/06/24/2015-06-24-css-block-inline/" target="_blank" rel="external">CSS块级元素和行内元素-晚晴幽草轩</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elemente" target="_blank" rel="external"> MDN -行内元素</a></li>
<li><a href="http://geekplux.com/2014/04/25/several_core_concepts_of_css.html" target="_blank" rel="external">CSS 最核心的几个概念</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http:%5C%5Chexin.life/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS 缓动(转)</title>
    <link href="http:%5C%5Chexin.life/2017/07/11/title-14/"/>
    <id>http:\\hexin.life/2017/07/11/title-14/</id>
    <published>2017-07-11T12:28:04.000Z</published>
    <updated>2017-07-13T06:29:19.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="缓动的基础知识"><a href="#缓动的基础知识" class="headerlink" title="缓动的基础知识"></a>缓动的基础知识</h2><p>自然界中没有东西是从一点呈线性地移动到另一点。现实中，物体在移动时往往会加速或减速。我们的大脑习惯于期待这种运动，因此在做动画时，应利用此规律。自然的运动会让用户对您的应用感觉更舒适，从而产生更好的总体体验。</p>
<ul>
<li>缓动使您的动画感觉更自然。</li>
<li>为 UI 元素选择缓出动画。</li>
<li>避免缓入或缓入缓出动画，除非可以使其保持简短；这类动画可能让最终用户觉得很迟钝。</li>
</ul>
<p>在经典动画中，缓慢开始然后加速的动画术语是“慢入”，快速开始然后减速的动画被称为“慢出”。网络上对于这些动画最常用的术语分别是“缓入”和“缓出”。有时两种动画相组合，称为“缓入缓出”。缓动实际上是使动画不再那么尖锐或生硬的过程。</p>
<h2 id="缓动关键字"><a href="#缓动关键字" class="headerlink" title="缓动关键字"></a>缓动关键字</h2><p>CSS 变换和动画都允许您<a href="https://developers.google.com/web/fundamentals/design-and-ui/animations/choosing-the-right-easing?hl=zh-cn" target="_blank" rel="external">选择要为动画使用的缓动类型</a>。您可以使用影响相关动画的缓动（或有时称为 timing）的关键字。还可以<a href="https://developers.google.com/web/fundamentals/design-and-ui/animations/custom-easing?hl=zh-cn" target="_blank" rel="external">完全自定义您的缓动</a>，借此方式更自由地表达应用的个性。</p>
<p>以下是可在 CSS 中使用的一些关键字：</p>
<ul>
<li>linear</li>
<li>ease-in</li>
<li>ease-out</li>
<li>ease-in-out<br>资料来源：<a href="http://www.w3.org/TR/css3-transitions/#transition-timing-function-property" target="_blank" rel="external">CSS 变换，W3C</a></li>
</ul>
<p>还可以使用 steps 关键字，它允许您创建具有离散步骤的变换，但上面列出的关键字对于创建感觉自然的动画最有用，并且这绝对是您要的效果。</p>
<h2 id="线性动画"><a href="#线性动画" class="headerlink" title="线性动画"></a>线性动画</h2><hr>
<p>没有任何缓动的动画称为线性动画。线性变换的图形看起来像这样：</p>
<p>随着时间推移，其值以等量增加。采用线性运动时，动画内容往往显得很僵硬，不自然，让用户觉得不协调。一般来说，应避免线性运动。</p>
<p>不管通过 CSS 还是 JavaScript 来编写动画代码，您将发现始终有线性运动的选项。<br><img src="https://developers.google.com/web/fundamentals/design-and-ui/animations/images/linear.png?hl=zh-cn" alt="线性动画"></p>
<p><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ui/animations/box-move-linear.html" target="_blank" rel="external">查看线性动画</a></p>
<p>要通过 CSS 实现上述效果，代码将类似下面这样：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 500<span class="selector-tag">ms</span> <span class="selector-tag">linear</span>;</div></pre></td></tr></table></figure></p>
<h2 id="缓出动画"><a href="#缓出动画" class="headerlink" title="缓出动画"></a>缓出动画</h2><hr>
<p>缓出使动画在开头处比线性动画更快，还会在结尾处减速。</p>
<p>缓出一般最适合界面，因为开头时快速使动画有反应快的感觉，同时在结尾仍允许有一点自然的减速。<br><img src="https://developers.google.com/web/fundamentals/design-and-ui/animations/images/ease-out.png?hl=zh-cn" alt="缓出动画"><br><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ui/animations/box-move-ease-out.html" target="_blank" rel="external">查看缓出动画</a></p>
<p>有很多方法来实现缓出效果，但最简单的方法是 CSS 中的 ease-out 关键字：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 500<span class="selector-tag">ms</span> <span class="selector-tag">ease-out</span>;</div></pre></td></tr></table></figure></p>
<h2 id="缓入动画"><a href="#缓入动画" class="headerlink" title="缓入动画"></a>缓入动画</h2><hr>
<p>缓入动画开头慢结尾快，与缓出动画正好相反。</p>
<p>这种动画像沉重的石头掉落一样，开始时很慢，然后快速地重重撞击地面，突然沉寂下来。</p>
<p>但是，从交互的角度来看，缓入可能让人感觉有点不寻常，因为结尾很突然；在现实中移动的物体往往是减速，而不是突然停止。缓入还有让人感觉行动迟缓的不利效果，这会对网站或应用的响应速度给人的感觉产生负面影响。</p>
<p><img src="https://developers.google.com/web/fundamentals/design-and-ui/animations/images/ease-in.png?hl=zh-cn" alt=""><br><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ui/animations/box-move-ease-in.html" target="_blank" rel="external">查看缓入动画</a></p>
<p>要使用缓入动画，与缓出和线性动画类似，可以使用其关键字：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 500<span class="selector-tag">ms</span> <span class="selector-tag">ease-in</span>;</div></pre></td></tr></table></figure></p>
<h2 id="缓入缓出动画"><a href="#缓入缓出动画" class="headerlink" title="缓入缓出动画"></a>缓入缓出动画</h2><hr>
<p>缓入并缓出与汽车加速和减速相似，使用得当时，可以实现比单纯缓出更生动的效果。</p>
<p>由于缓入开头让动画有迟钝感，因此动画持续时间不要过长。300-500 毫秒的时间范围通常比较合适，但实际的数量主要取决于项目的感觉。也就是说，由于开头慢、中间快和结尾慢，动画将有更强的对比，可能让用户感到非常满意。<br><img src="https://developers.google.com/web/fundamentals/design-and-ui/animations/images/ease-in-out.png?hl=zh-cn" alt=""><br><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ui/animations/box-move-ease-in-out.html" target="_blank" rel="external">查看缓入缓出动画</a><br>要设置缓入缓出动画，可以使用 ease-in-out CSS 关键字：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 500<span class="selector-tag">ms</span> <span class="selector-tag">ease-in-out</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="转载" scheme="http:%5C%5Chexin.life/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="http:%5C%5Chexin.life/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>定制 hexo</title>
    <link href="http:%5C%5Chexin.life/2017/06/06/title-11/"/>
    <id>http:\\hexin.life/2017/06/06/title-11/</id>
    <published>2017-06-06T03:48:42.000Z</published>
    <updated>2017-06-06T16:41:35.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>时隔好久，这里对hexo的博客进行一些功能上的拓展</p>
<h2 id="1-七牛云定制空间及绑定到极简图床"><a href="#1-七牛云定制空间及绑定到极简图床" class="headerlink" title="1.七牛云定制空间及绑定到极简图床"></a>1.七牛云定制空间及绑定到极简图床</h2><blockquote>
<p>对于上传图片个人喜欢<a href="http://jiantuku.com/#/" target="_blank" rel="external">极简图床</a>，支持复制粘贴上传，截图然后粘贴用起来贼爽。</p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/26112457.jpg" alt="图片标题"><br>极简图窗对于游客每日只有10张图片的上限，开始觉得够用了，但是玩着玩着就没了。不过，他本身提供了七牛云的空间储存。</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/24671886.jpg" alt="图片标题"></p>
<ol>
<li>注册和邮箱验证这里就不赘述了，自行解决吧。</li>
<li><p>完成之后选择新建仓库<em>名字建议写成小写，他好像是默认小写的。</em></p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/76001751.jpg" alt="图片标题"></p>
</li>
<li><p>然后到个人中心找到密钥分别填入<br><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/21360219.jpg" alt="图片标题"></p>
</li>
<li><p>找到仓库下的图片处理位置，绑定的域名使用七牛提供的域名即可<br><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/60926365.jpg" alt="图片标题"></p>
</li>
</ol>
<blockquote>
<p>此时就拥有了10G的七牛免费储存空间，极简图床也不限制次数了。慢慢享用吧骚年。</p>
</blockquote>
<h2 id="2-HEXO-内容压缩"><a href="#2-HEXO-内容压缩" class="headerlink" title="2.HEXO 内容压缩"></a>2.HEXO 内容压缩</h2><blockquote>
<p>我这里使用的 NEXT 主题，它在生成 HTML 时由于主题的简洁，形成了大量留白，反而增大了文件大小，使得本来服务器就在国外的网站加载更慢。</p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/96439256.jpg" alt="图片标题"></p>
<h3 id="1-这里使用当红小生-gulp-进行文件的处理。"><a href="#1-这里使用当红小生-gulp-进行文件的处理。" class="headerlink" title="1.这里使用当红小生 gulp 进行文件的处理。"></a>1.这里使用当红小生 gulp 进行文件的处理。</h3><ol>
<li>HEXO 在根目录下新建 gulpfile.js 文件</li>
<li>我们对文件处理需要用到 gulp 的一些插件<br><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/80906841.jpg" alt="图片标题"></li>
<li>使用 npm install <strong> </strong> ** –save-dev 来下载这些插件并保存，添加到 package.json 配置项中。</li>
</ol>
<blockquote>
<p>由于 npm 服务器在国外下载较慢，安装淘宝镜像 cnpm<br> npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/62994802.jpg" alt=""> </p>
<ol>
<li>然后配置 gulpfile.js ,我们知道我们提交博客时，是将静态文件生成到 public 下，然后提交到 github 的。所以我们对文件处理时，就处理这里的静态文件即可。静态文件树形图如下（太长我删减了一部分）：<pre>
D:. public/                         
├─2017                        
│  ├─03                       
│     ├─28                    
│     └─title-1                     
│         
├─about                       
├─archives                    
│  ├─2017                     
│  │  ├─03                    
│  │  ├                   
│  │  └─pages                 
│  │      ├─2                 
│  │      └─3                 
│  └─pages                    
│      ├─2                    
│      └─3                    
├─assets                      
│  └─js                       
├─categories                  
│  ├─css                      
│  ├─hexo                     
│  ├─JavaScript               
│  ├─window                   
│  ├─其他                       
│  └─前端                       
├─css                         
├─images                      
├─js                          
│  └─src                      
│      └─schemes              
├─lib                         
│  ├─algolia-instant-search   
│  ├─canvas-nest              
│  ├─fancybox                 
│  │  └─source                
│  │      └─helpers           
│  ├─fastclick                
│  │  └─lib                   
│  ├─font-awesome             
│  │  ├─css                   
│  │  └─fonts                 
│  ├─jquery                   
│  ├─jquery_lazyload          
│  ├─three                    
│  ├─ua-parser-js             
│  │  └─dist                  
│  └─velocity                 
├─pages                       
│  ├─2                        
│  └─3                        
└─tags                        
├─css-前端                  
├─CSS学习笔记                 
├                     
└─转载                      
</pre>

</li>
</ol>
<h4 id="1-因此对文件处理的代码如下："><a href="#1-因此对文件处理的代码如下：" class="headerlink" title="1.因此对文件处理的代码如下："></a>1.因此对文件处理的代码如下：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入插件 </span></div><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    Hexo = <span class="built_in">require</span>(<span class="string">'hexo'</span>),</div><div class="line">    pump = <span class="built_in">require</span>(<span class="string">'pump'</span>), </div><div class="line">    clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>),</div><div class="line">    jsmin = <span class="built_in">require</span>(<span class="string">'gulp-jsmin'</span>),</div><div class="line"> <span class="comment">// rename = require('gulp-rename'),</span></div><div class="line">    htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>),</div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</div><div class="line">    cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>),</div><div class="line">    imageminSvgo = <span class="built_in">require</span>(<span class="string">'imagemin-svgo'</span>),</div><div class="line">    imageminJpegtran = <span class="built_in">require</span>(<span class="string">'imagemin-jpegtran'</span>),</div><div class="line">    imageminPngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 利用Hexo API 来生成博客内容，效果同在命令行运行：hexo g </span></div><div class="line"><span class="comment">// generate html with 'hexo generate'</span></div><div class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;);</div><div class="line">gulp.task(<span class="string">'generate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'generate'</span>, &#123;</div><div class="line">            <span class="attr">watch</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.exit();</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> cb()</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">        hexo.exit(err);</div><div class="line">        <span class="keyword">return</span> cb(err);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//压缩 js 文件</span></div><div class="line">gulp.task(<span class="string">'jsmin'</span>,  () =&gt;</div><div class="line">    gulp.src(<span class="string">'./public/js/src/**/*.js'</span>)</div><div class="line">        .pipe(jsmin())</div><div class="line">        <span class="comment">//.pipe(rename(&#123;suffix: '.min'&#125;))</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./public/js'</span>));</div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//压缩 html 文件</span></div><div class="line">gulp.task(<span class="string">'htmlmin'</span>, () =&gt;</div><div class="line">    gulp.src(<span class="string">'./public/**/**/**/*.html'</span>)</div><div class="line">        .pipe(htmlmin(&#123;<span class="attr">collapseWhitespace</span>: <span class="literal">true</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 压缩图片</span></div><div class="line">gulp.task(<span class="string">'imagemin'</span>, () =&gt;</div><div class="line">    gulp.src(<span class="string">'./public/images/*'</span>)</div><div class="line">        .pipe(imagemin())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>))</div><div class="line">);</div><div class="line"></div><div class="line">imagemin([<span class="string">'./public/images/*.&#123;jpg,png&#125;'</span>], <span class="string">'./public/imagess'</span>, &#123;</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        imageminJpegtran(),</div><div class="line">        imageminPngquant(&#123;<span class="attr">quality</span>: <span class="string">'65-80'</span>&#125;)</div><div class="line">    ]</div><div class="line">&#125;);</div><div class="line">   </div><div class="line">imagemin([<span class="string">'./public/images/*.svg'</span>], <span class="string">'./public/images'</span>, &#123;</div><div class="line">    <span class="attr">use</span>: [</div><div class="line">        imageminSvgo(&#123;</div><div class="line">            <span class="attr">plugins</span>: [</div><div class="line">                &#123;<span class="attr">removeViewBox</span>: <span class="literal">false</span>&#125;</div><div class="line">            ]</div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//压缩 css</span></div><div class="line">gulp.task(<span class="string">'minify-css'</span>,() =&gt;</div><div class="line">     gulp.src(<span class="string">'./public/css/*.css'</span>)</div><div class="line">        .pipe(cleanCSS(&#123;<span class="attr">compatibility</span>: <span class="string">'ie8'</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public/css'</span>))</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">//默认任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">"generate"</span>,<span class="string">"minify-css"</span>,<span class="string">"jsmin"</span>,<span class="string">"htmlmin"</span>,<span class="string">"imagemin"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'gulp is finished!'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// gulp.task("watch",function() &#123;</span></div><div class="line"><span class="comment">//     gulp.watch("public/*",["default"]);</span></div><div class="line"><span class="comment">// &#125;);</span></div></pre></td></tr></table></figure>
<blockquote>
<p>之后命令行运行 gulp 即可压缩.因为将生成静态文件的步骤hexo generate 集成到了 gulp 中，所以我们以后可以先 gulp 然后 hexo deploy 提交。</p>
</blockquote>
<p>输出如下：</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/29994306.jpg" alt=""></p>
<p>效果如图：</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/21765926.jpg" alt=""></p>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="https://www.karlzhou.com/articles/compress-minify-hexo/" target="_blank" rel="external">优化Hexo博客 - 压缩 HTML、CSS、JS、IMG等</a></li>
</ul>
</blockquote>
<h2 id="3-添加音乐外链"><a href="#3-添加音乐外链" class="headerlink" title="3. 添加音乐外链"></a>3. 添加音乐外链</h2><blockquote>
<p>如果想在看博客的时候听一些喜欢的音乐怎么办呢？</p>
</blockquote>
<h3 id="1-可以直接在-markdown-中写入-HTML-代码（网易云，虾米均支持外链）"><a href="#1-可以直接在-markdown-中写入-HTML-代码（网易云，虾米均支持外链）" class="headerlink" title="1. 可以直接在 markdown 中写入 HTML 代码（网易云，虾米均支持外链）"></a>1. 可以直接在 markdown 中写入 HTML 代码（网易云，虾米均支持外链）</h3><h4 id="1-embed"><a href="#1-embed" class="headerlink" title="1. embed"></a>1. embed</h4> <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"//music.163.com/style/swf/widget.swf?sid=452986458&amp;type=2&amp;auto=1&amp;width=320&amp;height=66"</span> <span class="attr">width</span>=<span class="string">"340"</span> <span class="attr">height</span>=<span class="string">"86"</span>  <span class="attr">allowNetworking</span>=<span class="string">"all"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><embed src="//music.163.com/style/swf/widget.swf?sid=452986458&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all"></h2><h4 id="2-javascript"><a href="#2-javascript" class="headerlink" title="2. javascript"></a>2. javascript</h4><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.xiami.com/widget/player-single?uid=93773004&amp;sid=1769292418&amp;mode=js&quot;&gt;&lt;/script&gt;
</code></pre><script type="text/javascript" src="http://www.xiami.com/widget/player-single?uid=93773004&sid=1769292418&mode=js"></script>

<hr>
<h4 id="3-iframe"><a href="#3-iframe" class="headerlink" title="3. iframe"></a>3. iframe</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=452986458&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=452986458&auto=1&height=66"></iframe>


<hr>
<h3 id="5-HEXO-的插件-aplayer-dplayer-没有用过就不多说了"><a href="#5-HEXO-的插件-aplayer-dplayer-没有用过就不多说了" class="headerlink" title="5. HEXO 的插件 aplayer / dplayer (没有用过就不多说了)"></a>5. HEXO 的插件 aplayer / dplayer (没有用过就不多说了)</h3><blockquote>
<p>hexo-tag-aplayer:<a href="https://github.com/grzhan/hexo-tag-aplayer#upstream-issue" target="_blank" rel="external">https://github.com/grzhan/hexo-tag-aplayer#upstream-issue</a><br>hexo-tag-dplayer:<a href="https://github.com/NextMoe/hexo-tag-dplayer" target="_blank" rel="external">https://github.com/NextMoe/hexo-tag-dplayer</a></p>
</blockquote>
<h3 id="2-将音乐框添加到-slideBar"><a href="#2-将音乐框添加到-slideBar" class="headerlink" title="2. 将音乐框添加到 slideBar"></a>2. 将音乐框添加到 slideBar</h3><p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/75207769.jpg" alt="slideBar"></p>
<blockquote>
<p>其实方式是一样的，将外链的代码 粘贴到你要显示的地方即可,如图：</p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/75559141.jpg" alt="图片标题"></p>
<h3 id="1-点击出现心型特效，及背景线条"><a href="#1-点击出现心型特效，及背景线条" class="headerlink" title="1. 点击出现心型特效，及背景线条"></a>1. 点击出现心型特效，及背景线条</h3><p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/21220659.jpg" alt="图片标题"></p>
<h4 id="1-心型特效代码-love-js"><a href="#1-心型特效代码-love-js" class="headerlink" title="1. 心型特效代码 love.js"></a>1. 心型特效代码 love.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">.8</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;</div><div class="line">t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;</div><div class="line"><span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</div></pre></td></tr></table></figure>
<h4 id="2-背景特效代码-par-js"><a href="#2-背景特效代码-par-js" class="headerlink" title="2.背景特效代码 par.js"></a>2.背景特效代码 par.js</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">n,e,t</span>)</span>&#123;<span class="keyword">return</span> n.getAttribute(e)||t&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">document</span>.getElementsByTagName(n)&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=e(<span class="string">"script"</span>),o=t.length,i=t[o<span class="number">-1</span>];<span class="keyword">return</span>&#123;<span class="attr">l</span>:o,<span class="attr">z</span>:n(i,<span class="string">"zIndex"</span>,<span class="number">-1</span>),<span class="attr">o</span>:n(i,<span class="string">"opacity"</span>,<span class="number">.5</span>),<span class="attr">c</span>:n(i,<span class="string">"color"</span>,<span class="string">"0,0,0"</span>),<span class="attr">n</span>:n(i,<span class="string">"count"</span>,<span class="number">99</span>)&#125;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;c=u.width=<span class="built_in">window</span>.innerWidth||<span class="built_in">document</span>.documentElement.clientWidth||<span class="built_in">document</span>.body.clientWidth,a=u.height=<span class="built_in">window</span>.innerHeight||<span class="built_in">document</span>.documentElement.clientHeight||<span class="built_in">document</span>.body.clientHeight&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>)</span>&#123;l.clearRect(<span class="number">0</span>,<span class="number">0</span>,c,a);<span class="keyword">var</span> n,e,t,o,u,d,x=[w].concat(y);y.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;<span class="keyword">for</span>(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;c||i.x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>,i.ya*=i.y&gt;a||i.y&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>,l.fillRect(i.x<span class="number">-.5</span>,i.y<span class="number">-.5</span>,<span class="number">1</span>,<span class="number">1</span>),e=<span class="number">0</span>;e&lt;x.length;e++)n=x[e],i!==n&amp;&amp;<span class="literal">null</span>!==n.x&amp;&amp;<span class="literal">null</span>!==n.y&amp;&amp;(o=i.x-n.x,u=i.y-n.y,d=o*o+u*u,d&lt;n.max&amp;&amp;(n===w&amp;&amp;d&gt;=n.max/<span class="number">2</span>&amp;&amp;(i.x-=<span class="number">.03</span>*o,i.y-=<span class="number">.03</span>*u),t=(n.max-d)/n.max,l.beginPath(),l.lineWidth=t/<span class="number">2</span>,l.strokeStyle=<span class="string">"rgba("</span>+m.c+<span class="string">","</span>+(t+<span class="number">.2</span>)+<span class="string">")"</span>,l.moveTo(i.x,i.y),l.lineTo(n.x,n.y),l.stroke()));x.splice(x.indexOf(i),<span class="number">1</span>)&#125;),r(i)&#125;</div><div class="line"><span class="keyword">var</span> c,a,u=<span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>),m=t(),d=<span class="string">"c_n"</span>+m.l,l=u.getContext(<span class="string">"2d"</span>),r=<span class="built_in">window</span>.requestAnimationFrame||<span class="built_in">window</span>.webkitRequestAnimationFrame||<span class="built_in">window</span>.mozRequestAnimationFrame||<span class="built_in">window</span>.oRequestAnimationFrame||<span class="built_in">window</span>.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="built_in">window</span>.setTimeout(n,<span class="number">1e3</span>/<span class="number">45</span>)&#125;,x=<span class="built_in">Math</span>.random,w=&#123;<span class="attr">x</span>:<span class="literal">null</span>,<span class="attr">y</span>:<span class="literal">null</span>,<span class="attr">max</span>:<span class="number">2e4</span>&#125;;u.id=d,u.style.cssText=<span class="string">"position:fixed;top:0;left:0;z-index:"</span>+m.z+<span class="string">";opacity:"</span>+m.o,e(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(u),o(),<span class="built_in">window</span>.onresize=o,<span class="built_in">window</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;n=n||<span class="built_in">window</span>.event,w.x=n.clientX,w.y=n.clientY&#125;,<span class="built_in">window</span>.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;w.x=<span class="literal">null</span>,w.y=<span class="literal">null</span>&#125;;<span class="keyword">for</span>(<span class="keyword">var</span> y=[],s=<span class="number">0</span>;m.n&gt;s;s++)&#123;<span class="keyword">var</span> f=x()*c,h=x()*a,g=<span class="number">2</span>*x()<span class="number">-1</span>,p=<span class="number">2</span>*x()<span class="number">-1</span>;y.push(&#123;<span class="attr">x</span>:f,<span class="attr">y</span>:h,<span class="attr">xa</span>:g,<span class="attr">ya</span>:p,<span class="attr">max</span>:<span class="number">6e3</span>&#125;)&#125;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;i()&#125;,<span class="number">100</span>)&#125;();</div></pre></td></tr></table></figure>
<h2 id="4-其他特效如头像旋转等"><a href="#4-其他特效如头像旋转等" class="headerlink" title="4. 其他特效如头像旋转等"></a>4. 其他特效如头像旋转等</h2><blockquote>
<p>直接如图：</p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/42990326.jpg" alt="图片标题"><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.site-author-image</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</div><div class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</div><div class="line">  <span class="attribute">height</span>: $site-author-image-height;</div><div class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line"> </div><div class="line">  <span class="comment">/* 头像圆形 */</span></div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</div><div class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">50%</span>;</div><div class="line"></div><div class="line">   <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1s</span> ease-out;</div><div class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1s</span> ease-out;</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">1s</span> ease-out;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote class="blockquote-center"> 做自己喜欢的事情才会有动力 </blockquote>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="hexo" scheme="http:%5C%5Chexin.life/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http:%5C%5Chexin.life/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到 cmder</title>
    <link href="http:%5C%5Chexin.life/2017/06/06/title-10/"/>
    <id>http:\\hexin.life/2017/06/06/title-10/</id>
    <published>2017-06-05T17:01:56.000Z</published>
    <updated>2017-07-11T10:10:20.714Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="咸鱼也得做特别咸的那种"><a href="#咸鱼也得做特别咸的那种" class="headerlink" title=" 咸鱼也得做特别咸的那种 "></a><blockquote class="blockquote-center"> 咸鱼也得做特别咸的那种 </blockquote></h2><p>$ 最近电脑受不了了，折腾比较多,对于好多东西装了N次，在这里简单记录一下。$</p>
<h2 id="win-下命令行神器-cmder"><a href="#win-下命令行神器-cmder" class="headerlink" title="win 下命令行神器 cmder"></a><a href="http://cmder.net/" target="_blank" rel="external">win 下命令行神器 cmder</a></h2><p>在 win 下 的命令行神器 cmder，原始 cmd 难看不说，功能也少，这里推荐一下 cmder。可以直接下载 mini 版本，只有 6 mb 大小，完整版本包含了 git 等一堆功能，git 已经安装过了， 这里我就选择了 Mini 版。</p>
<blockquote>
<p>安装很简单，直接下载解压即可使用</p>
</blockquote>
<ul>
<li>不过为了方便，我们添加一下环境变量。 即可 Win + R 输入 cmder 唤出。<br><img src="http://or3233yyd.bkt.clouddn.com/17-6-6/11973826.jpg" alt=" Win + R 输入 cmder "></li>
<li><p>但是呢，好像还是不够方便，此时我们可以将它添加到我们的鼠标右键，像 git 巴蜀 here 那样。打开 cmder 终端输入下面命令</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cmder.exe /REGISTER ALL    <span class="comment">//如果没有权限 则输入 Cmder.exe /REGISTER USER</span></div></pre></td></tr></table></figure>
</li>
<li><p>然后是去除文字重叠， win + alt + p 或者点右下角图标选择设置 setting .</p>
</li>
<li>然后将 monospace 前面的对勾去掉即可。<br><img src="http://or3233yyd.bkt.clouddn.com/17-6-6/27521085.jpg" alt="将 monospace 前面的对勾去掉"></li>
<li>如果习惯 git 里面的 \$ 符号的话。可以打开 D:\cmder_mini\vendor\clink.lua 找到44行左右，将 符号改为 \$</li>
</ul>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/10257983.jpg" alt="enter image description here"></p>
<p>效果如图：<br><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/75785359.jpg" alt="enter image description here"></p>
<blockquote>
<p> 基本目前所需要的功能差不多就这样。</p>
</blockquote>
<ul>
<li><a href="http://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/" target="_blank" rel="external">晚晴幽草轩轩主</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="window" scheme="http:%5C%5Chexin.life/categories/window/"/>
    
    
      <category term="其他" scheme="http:%5C%5Chexin.life/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>px、em和rem</title>
    <link href="http:%5C%5Chexin.life/2017/05/23/title-9/"/>
    <id>http:\\hexin.life/2017/05/23/title-9/</id>
    <published>2017-05-23T14:06:40.000Z</published>
    <updated>2017-07-29T08:23:53.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><blockquote class="blockquote-center"> 再牛逼的梦想也挡不住傻逼似的坚持 ~ –菜鸟教程 </blockquote></p>
<h2 id="gt-偶然遇到一个原生JS去除-className-的技巧-Element-className-replace-‘testClassName’-‘realClassName’"><a href="#gt-偶然遇到一个原生JS去除-className-的技巧-Element-className-replace-‘testClassName’-‘realClassName’" class="headerlink" title="&gt; 偶然遇到一个原生JS去除 className 的技巧 Element.className.replace(‘testClassName’, ‘realClassName’);"></a>&gt; 偶然遇到一个原生JS去除 className 的技巧 Element.className.replace(‘testClassName’, ‘realClassName’);</h2><h2 id="px"><a href="#px" class="headerlink" title="px"></a>px</h2><blockquote>
<p>px : 相对长度单位。像素px是相对于显示器屏幕分辨率而言的。<br> 特点 :</p>
<ul>
<li>IE无法调整那些使用px作为单位的字体大小；</li>
<li>国外的大部分网站能够调整的原因在于其使用了 em 或 rem 作为字体单位；</li>
<li>Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。<h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</li>
<li>em的值并不是固定的；</li>
<li>em会继承父级元素的字体大小。</li>
</ul>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;   <span class="comment">/* 20px */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-class">.level-1</span>&#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0.5em</span>;   <span class="comment">/* 10px */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-class">.level-2</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;     <span class="comment">/* 20px */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.level-3</span> &#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0.5em</span>;      <span class="comment">/* 10px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><blockquote>
<p>rem是CSS3新增的一个相对单位（root  em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但<strong>相对的只是HTML根元素</strong>。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;   <span class="comment">/* 20px */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-class">.level-1</span>&#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0.5rem</span>;   <span class="comment">/* 10px */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-class">.level-2</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;     <span class="comment">/* 40px */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.level-3</span> &#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0.5rem</span>;      <span class="comment">/* 10px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">font-size</span>:.<span class="number">875rem</span>;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注意： 选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。<br>px 与 rem 的选择？<br>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 。<br>对于需要适配各种移动设备，则使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备。</p>
</blockquote>
<ul>
<li><a href="http://www.runoob.com/w3cnote/px-em-rem-different.html" target="_blank" rel="external">px、em、rem的区别及介绍-菜鸟教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="css" scheme="http:%5C%5Chexin.life/categories/css/"/>
    
    
      <category term="css 前端" scheme="http:%5C%5Chexin.life/tags/css-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>copy小插件</title>
    <link href="http:%5C%5Chexin.life/2017/05/06/title-8/"/>
    <id>http:\\hexin.life/2017/05/06/title-8/</id>
    <published>2017-05-06T07:12:20.000Z</published>
    <updated>2017-07-29T08:22:28.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><blockquote class="blockquote-center"> hacker 是擅于解决问题的人 </blockquote></p>
<h1 id="copy小插件"><a href="#copy小插件" class="headerlink" title="copy小插件"></a>copy小插件</h1><p>昨天舍友在写一个报告的时候，准确的来说是从网上搜罗~然而在 360doc 看到了一个满意的，无奈下载不了，也没法复制粘贴，于是就试了一下。</p>
<blockquote>
<p>然后我打开开发者工具(F12)<br>一行代码搞定<br><img src="http://i1.piimg.com/588926/c47501ec4bf4e55a.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//document.getElementsByTagName('body')[0].oncopy = null;</span></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].oncopy = <span class="string">''</span>;    <span class="comment">//获取body元素的oncpoy事件，直接置空~</span></div></pre></td></tr></table></figure></p>
<p>虽然很简单，但是还了一个页面它就失效了，可以再次打开开发者工具，再次置空就行了<br>有更好的办法或者一劳永逸的办法~希望大神指教一下</p>
</blockquote>
<p>这是从网上搜到的 chrome 插件的核心代码，制空 copy 事件，并取消页面复制粘贴等冒泡事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">oncopy</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(body)[<span class="number">0</span>].oncopy = <span class="string">''</span>;</div><div class="line">&#125;)();</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"paste"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125;, <span class="literal">true</span>);       <span class="comment">// true - 事件句柄在捕获阶段执行</span></div><div class="line"></div><div class="line"><span class="comment">//for re-enabling 'copy'</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"copy"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125;, <span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//for re-enabling 'cut'</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"cut"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125;, <span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//for re-enabling 'right-clicks'</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"contextmenu"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125;, <span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="JavaScript" scheme="http:%5C%5Chexin.life/categories/JavaScript/"/>
    
    
      <category term="插件" scheme="http:%5C%5Chexin.life/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
