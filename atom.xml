<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dayDream&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http:%5C%5Chexin.life/"/>
  <updated>2017-07-30T16:40:32.936Z</updated>
  <id>http:\\hexin.life/</id>
  
  <author>
    <name>白日梦想家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题整理</title>
    <link href="http:%5C%5Chexin.life/2017/07/29/title-21/"/>
    <id>http:\\hexin.life/2017/07/29/title-21/</id>
    <published>2017-07-29T08:09:22.000Z</published>
    <updated>2017-07-30T16:40:32.936Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="使用-typeof-能得到哪些基础类型"><a href="#使用-typeof-能得到哪些基础类型" class="headerlink" title="使用 typeof 能得到哪些基础类型"></a>使用 typeof 能得到哪些基础类型</h4><ul>
<li>undefined</li>
<li>boolean</li>
<li>Number</li>
<li>String</li>
<li>Object          =&gt; null, object, array</li>
<li>Function<h4 id="何时使用-何时使用"><a href="#何时使用-何时使用" class="headerlink" title="何时使用 === 何时使用 =="></a>何时使用 === 何时使用 ==</h4></li>
<li>需要判断类型是否相等时使用全等(===)</li>
<li>不需要判断类型是否相等，即需要隐式类型转换的时候使用 ==<h4 id="window-onload-和-DOMContentLoaded-的区别"><a href="#window-onload-和-DOMContentLoaded-的区别" class="headerlink" title="window.onload 和 DOMContentLoaded 的区别"></a>window.onload 和 DOMContentLoaded 的区别</h4><h5 id="window-onload"><a href="#window-onload" class="headerlink" title="window.onload"></a>window.onload</h5></li>
<li>window.onload 需要等到全部的资源加载完成才会触发，不能够编写多个，编写多个时只会执行最后一个,该方法可以绑定到任意元素上<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">        window.onload = function() &#123;</div><div class="line">            console.log(&apos;DOM READY&apos;, 1)</div><div class="line">        &#125;</div><div class="line">        window.onload = function() &#123;</div><div class="line">            console.log(&apos;DOM READY&apos;, 2)</div><div class="line">        &#125;</div><div class="line">        window.onload = function() &#123;</div><div class="line">                console.log(&apos;DOM READY&apos;, 3)</div><div class="line">            &#125;</div><div class="line">            //DOM READY 3</div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h5><ul>
<li>(HTML5) DOMContentLoaded 类似于 jQuery 的$(document).ready(),页面文档（DOM）完全加载并解析完毕之后触发，不会等图片，iframe, css 等资源加载完成。 如果多次使用，会按顺序依次执行相应任务</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        document.addEventListener("DOMContentLoaded", function (event) &#123;</div><div class="line">            alert("DOM ready1");</div><div class="line">        &#125;);</div><div class="line">        document.addEventListener("DOMContentLoaded", function (event) &#123;</div><div class="line">            alert("DOM ready2");</div><div class="line">        &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        document.addEventListener("DOMContentLoaded", function (event) &#123;</div><div class="line">            alert("DOM ready3");</div><div class="line">        &#125;);</div><div class="line">        document.addEventListener("DOMContentLoaded", function (event) &#123;</div><div class="line">            alert("DOM ready4");</div><div class="line">        &#125;);</div><div class="line">// DOM ready1</div><div class="line">// DOM ready2</div><div class="line">// DOM ready3</div><div class="line">// DOM ready4</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>H5之前使用document.onreadystatechange 事件并手动判断document.readyState == ‘complete’   来代替。</p>
</blockquote>
<h5 id="document-readyState-readtstatechange"><a href="#document-readyState-readtstatechange" class="headerlink" title="document.readyState / readtstatechange"></a>document.readyState / readtstatechange</h5><p>用来表示 DOM 的加载状态，该属性值发生变化时会触发 readtstatechange 事件。有三种取值：</p>
<ul>
<li>loading:    DOM 加载中</li>
<li>interactive:    DOM 就绪但资源仍在加载中</li>
<li>compelte :    DOM 加载完成</li>
</ul>
<p>由于 IE8 支持 document.readState 属性,因此在 IE8 中常常用来做 DOMContentLoaded 的降级 (fallback)</p>
<blockquote>
<p> 注意IE8以前的IE不支持document.readyState属性。 可以执行 document.documentElement.doScroll(“left”)， 当DOM未就绪时执行该方法会抛出错误，以此检测DOM是否就绪。</p>
<h5 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h5><p>jQuery也提供了三种方法载入页面事件</p>
<ul>
<li>$(document).ready(callback)：DOM就绪时执行回调函数，返回值为 docuument 的jQuery集合</li>
<li>$(function() {})：常用写法，返回和参数同上</li>
<li>$(window).load()：当 DOM 完全加载完毕时，页面渲染完成即图片等资源加载完成时触发<br><a href="https://github.com/jquery/jquery/blob/master/src/core/ready.js" target="_blank" rel="external">.ready() 的实现</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( <span class="built_in">document</span>.readyState === <span class="string">"complete"</span> ||</div><div class="line">    ( <span class="built_in">document</span>.readyState !== <span class="string">"loading"</span> &amp;&amp; !<span class="built_in">document</span>.documentElement.doScroll ) ) &#123;</div><div class="line">    <span class="comment">// Handle it asynchronously to allow scripts the opportunity to delay ready</span></div><div class="line">    <span class="built_in">window</span>.setTimeout( jQuery.ready );</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Use the handy event callback</span></div><div class="line">    <span class="built_in">document</span>.addEventListener( <span class="string">"DOMContentLoaded"</span>, completed );</div><div class="line">    <span class="comment">// A fallback to window.onload, that will always work</span></div><div class="line">    <span class="built_in">window</span>.addEventListener( <span class="string">"load"</span>, completed );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ul>
<li><a href="http://harttle.com/2016/05/14/binding-document-ready-event.html" target="_blank" rel="external">兼容所有浏览器的 DOM 载入事件</a></li>
</ul>
<h4 id="用-JS创建10个-a-标签点击弹出对应序号"><a href="#用-JS创建10个-a-标签点击弹出对应序号" class="headerlink" title="用 JS创建10个 a 标签点击弹出对应序号"></a><a href="http://hexin.life/more/js-test-1.html">用 JS创建10个 a 标签点击弹出对应序号</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> body = <span class="built_in">document</span>.body;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                <span class="keyword">let</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line"></div><div class="line">                a.textContent = <span class="string">`<span class="subst">$&#123;i&#125;</span>`</span>;</div><div class="line">                a.style.cssText = <span class="string">'margin: 5px;'</span> + <span class="string">'color: #363636;'</span> + <span class="string">'font-size: 16px'</span>;</div><div class="line"></div><div class="line">                body.appendChild(a);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">let</span> ac = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</div><div class="line">            <span class="comment">//console.log(ac)</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line"></div><div class="line">                ac[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        alert(i)</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// ac[i].addEventListener('click', function() &#123;</span></div><div class="line">                    <span class="comment">//     alert(ac[i].textContent)</span></div><div class="line">                    <span class="comment">// &#125;)</span></div><div class="line">            &#125;</div><div class="line">        &#125;)()</div></pre></td></tr></table></figure>
<h4 id="简述如何实现一个模块加载器，实现类似-requirejs-的基本功能"><a href="#简述如何实现一个模块加载器，实现类似-requirejs-的基本功能" class="headerlink" title="简述如何实现一个模块加载器，实现类似 requirejs 的基本功能"></a>简述如何实现一个模块加载器，实现类似 requirejs 的基本功能</h4><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="实现数组的随机排序"><a href="#实现数组的随机排序" class="headerlink" title="实现数组的随机排序"></a>实现数组的随机排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组随机排序</span></div><div class="line">            <span class="keyword">var</span> arr = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">100</span>];</div><div class="line"></div><div class="line">            <span class="keyword">let</span> len = arr.length;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">RandomArray</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (arr.length == <span class="number">1</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> arr;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">                    <span class="keyword">let</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * len);</div><div class="line">                    arr.push(arr[random]);</div><div class="line">                    arr.splice(random, <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">console</span>.log(arr);</div><div class="line">                <span class="keyword">return</span> arr;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            RandomArray(arr);</div></pre></td></tr></table></figure>
<p>更多实现：</p>
<ul>
<li><a href="http://div.io/topic/1610" target="_blank" rel="external">数组元素随机化排序算法实现</a></li>
<li><a href="https://www.w3cplus.com/javascript/how-to-randomize-shuffle-a-javascript-array.html" target="_blank" rel="external">数组随机排序</a></li>
<li><a href="https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/#top" target="_blank" rel="external">Fisher–Yates shuffle 洗牌算法</a><h4 id="实现数组的去重"><a href="#实现数组的去重" class="headerlink" title="实现数组的去重"></a>实现数组的去重</h4><h5 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">var arr = [1, &apos;1&apos;, 1, 2, 3, 2, 4, &apos;5&apos;, 5];</div><div class="line"></div><div class="line">function duplicatesWithString(arr) &#123;</div><div class="line">    var newArr = [];</div><div class="line">    var tmpArr = [];</div><div class="line">    arr.forEach(function(val) &#123;</div><div class="line">        var key = (typeof val) + val;</div><div class="line">        if(!tmpArr[key]) &#123;            //如果为 undefined 就进入循环</div><div class="line">            tmpArr[key] = true;       //设置为 true 表示已经存在该数字</div><div class="line">            newArr.push(val)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    return newArr;</div><div class="line">&#125;</div><div class="line"></div><div class="line">duplicatesWithString(arr);    // =&gt;  [1, &quot;1&quot;, 2, 3, 4, &quot;5&quot;, 5]</div><div class="line"></div><div class="line">/******************************/</div><div class="line"></div><div class="line">//如果想去掉字符串</div><div class="line">function duplicatesNoString(arr) &#123;</div><div class="line">    var newArr = [];</div><div class="line">    var tmpArr = [];</div><div class="line">    arr.forEach(function(val) &#123;</div><div class="line">        if(typeof val !== &apos;string&apos;) &#123;</div><div class="line">            if(!tmpArr[val]) &#123;            //如果为 undefined 就进入循环</div><div class="line">                tmpArr[val] = true;       //设置为 true 表示已经存在该数字</div><div class="line">                newArr.push(val);      </div><div class="line">            &#125;</div><div class="line">        &#125;		</div><div class="line">    &#125;)</div><div class="line">    return newArr;</div><div class="line">&#125;</div><div class="line">duplicatesNoString(arr)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h5><p>ES6中新增 set 数据结构</p>
<blockquote>
<p>set 中不能添加重复元素，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var mySet = new Set();</div><div class="line"></div><div class="line">mySet.add(1); // Set &#123; 1 &#125;</div><div class="line">mySet.add(5); // Set &#123; 1, 5 &#125;</div><div class="line">mySet.add(5); // Set &#123; 1, 5 &#125;</div><div class="line">mySet.add(&apos;some text&apos;); // Set &#123; 1, 5, &apos;some text&apos; &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<ol>
<li><p>因此我们可利用这个特性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let arr1 = [1, &apos;1&apos;, 1, 2, 3, 2, 4, &apos;5&apos;, 5];</div><div class="line">let set = new Set(arr1);</div><div class="line">console.log(set) // =&gt;&#123;1, &quot;1&quot;, 2, 3, 4,&quot;5&quot;, 5&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ES6中Array新增了一个静态方法Array.from，可以把类似数组的对象转换为数组(如通过 QuerySelectAll 得到的 Node List)</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let arr2 = [1, &apos;1&apos;, 1, 2, 3, 2, 4, &apos;5&apos;, 5];</div><div class="line">let array = Array.from(new Set(arr2));</div><div class="line">console.log(array) // =&gt;[1, &quot;1&quot;, 2, 3, 4, &quot;5&quot;, 5]</div></pre></td></tr></table></figure>
<h5 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h5><p><a href="http://blog.csser.me/posts/E4B880E8A18CE4BBA3E7A081E5AE9EE78EB0E695B0E7BB84E58EBBE9878DEFBC88ES6EFBC89" target="_blank" rel="external">一行代码实现数组去重（ES6）</a></p>
<h4 id="实现一个函数，输入-123456789-输出-123，465，789"><a href="#实现一个函数，输入-123456789-输出-123，465，789" class="headerlink" title="实现一个函数，输入 123456789 输出 123，465，789"></a>实现一个函数，输入 123456789 输出 123，465，789</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function cal(arr) &#123;</div><div class="line">        var newArr = [];</div><div class="line">        var arr = typeof arr === &apos;string&apos; ? arr : arr.toString();</div><div class="line">        arr = arr.split(&apos;&apos;);</div><div class="line">        arr.forEach(function(value, index) &#123;</div><div class="line">            if(index % 3 === 0 &amp;&amp; index != 0) &#123;</div><div class="line">                newArr.push(&apos;,&apos;)</div><div class="line">            &#125;</div><div class="line">            newArr.push(arr[index]);</div><div class="line">        &#125;)</div><div class="line">        return newArr.join(&apos;&apos;);</div><div class="line">    &#125;</div><div class="line">// 判断为三则push进新的数组</div></pre></td></tr></table></figure>
<h3 id="HTML-知识"><a href="#HTML-知识" class="headerlink" title="HTML 知识"></a>HTML 知识</h3><h4 id="用-div-实现-textarea"><a href="#用-div-实现-textarea" class="headerlink" title="用 div 实现 textarea"></a><a href="http://hexin.life/more/用div制作textarea.html">用 div 实现 textarea</a></h4><blockquote>
<p>Textarea 对象代表 HTML 表单中的一个文本域 (text-area)。</p>
</blockquote>
<ol>
<li>首先我们需要可输入功能<ul>
<li>HTML5 新增 <a href="http://www.runoob.com/tags/att-global-contenteditable.html" target="_blank" rel="external">contenteditable</a> 属性<br>他有 true 和 flase 俩个值，true  指定元素是可编辑的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div contenteditable=&apos;true&apos;， class=&apos;div-text&apos;&gt;</div><div class="line">        hello</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>此时效果已经有了，点击是自带聚焦发光还挺好看的，但是只有点击上的时候才会显示可输入框，我们加一个 border 模拟一下即可。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div-text</span>&#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">min-width</span>: <span class="number">80px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.div-text</span>&#123;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-7-31/38214871.jpg" alt="测试图片"><br>关于右下角的拖动标志，用 after 和 before 应该就可以实现了。</p>
<blockquote>
<p>textarea 去除右下角的拖动图标<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">resize</span>: <span class="selector-tag">none</span>;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="CSS-知识"><a href="#CSS-知识" class="headerlink" title="CSS 知识"></a>CSS 知识</h3><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a><a href="http://hexin.life/more/圣杯.html">圣杯布局</a></h4><h5 id="首先是-HTML-结构"><a href="#首先是-HTML-结构" class="headerlink" title="首先是 HTML 结构"></a>首先是 HTML 结构</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="CSS-布局"><a href="#CSS-布局" class="headerlink" title="CSS 布局"></a>CSS 布局</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>,<span class="selector-tag">html</span> &#123;</div><div class="line">       <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">       <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="selector-class">.container</span> &#123;</div><div class="line">       <span class="attribute">margin-right</span>: <span class="number">200px</span>;</div><div class="line">       <span class="attribute">margin-left</span>: <span class="number">200px</span>;</div><div class="line">   &#125;</div><div class="line">    </div><div class="line">   <span class="selector-class">.left</span>,<span class="selector-class">.center</span>,<span class="selector-class">.right</span>&#123;</div><div class="line">       <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">       <span class="attribute">position</span>: relative;</div><div class="line">       <span class="attribute">float</span>: left;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="selector-class">.left</span>&#123;</div><div class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">       <span class="attribute">right</span>: <span class="number">200px</span>;</div><div class="line">       <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</div><div class="line">       <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="selector-class">.center</span>&#123;</div><div class="line">       <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">       <span class="attribute">background-color</span>: red;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="selector-class">.right</span>&#123;</div><div class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">       <span class="attribute">margin-right</span>: -<span class="number">100%</span>;</div><div class="line">       <span class="attribute">background-color</span>: blue;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a><a href="http://hexin.life/more/双飞翼布局--三列中间自适应.html">双飞翼布局</a></h4><h5 id="首先是-HTML-结构-1"><a href="#首先是-HTML-结构-1" class="headerlink" title="首先是 HTML 结构"></a>首先是 HTML 结构</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>左侧定宽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>右侧定宽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="CSS-布局-1"><a href="#CSS-布局-1" class="headerlink" title="CSS 布局"></a>CSS 布局</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>,<span class="selector-tag">html</span>&#123;</div><div class="line">       <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">       <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">       <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="selector-class">.left</span> &#123;</div><div class="line">       <span class="attribute">position</span>: relative;</div><div class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">       <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">       <span class="attribute">float</span>: left;</div><div class="line">       <span class="attribute">margin-right</span>: -<span class="number">200px</span>;</div><div class="line">       <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">       <span class="attribute">text-align</span>: center;</div><div class="line">       <span class="attribute">line-height</span>: <span class="number">300px</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="selector-class">.right</span>&#123;</div><div class="line">       <span class="attribute">position</span>: relative;</div><div class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">       <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">       <span class="attribute">float</span>: right;</div><div class="line">       <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</div><div class="line">       <span class="attribute">background</span>: red;</div><div class="line">       <span class="attribute">text-align</span>: center;</div><div class="line">       <span class="attribute">line-height</span>: <span class="number">300px</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="selector-class">.main</span>&#123;</div><div class="line">       <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">       <span class="attribute">float</span>: left;</div><div class="line">       <span class="attribute">background-color</span>: blue;</div><div class="line">       <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">       <span class="attribute">line-height</span>: <span class="number">300px</span>;</div><div class="line">       <span class="attribute">text-align</span>: center;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="selector-class">.center</span>&#123;</div><div class="line">       <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">200px</span>;    </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h5><blockquote>
<p><a href="https://www.zhihu.com/question/21504052" target="_blank" rel="external">CSS布局中圣杯布局与双飞翼布局的实现思路差异在哪里？</a><br><a href="http://www.imooc.com/wenda/detail/254035" target="_blank" rel="external">双飞翼布局介绍-始于淘宝UED</a><br><a href="https://segmentfault.com/a/1190000004524159" target="_blank" rel="external">关于「圣杯布局」</a></p>
</blockquote>
<h4 id="Flex-实现圣杯布局"><a href="#Flex-实现圣杯布局" class="headerlink" title="Flex 实现圣杯布局"></a><a href="http://hexin.life/more/flex圣杯.html">Flex 实现圣杯布局</a></h4><h5 id="首先是-HTML-结构-2"><a href="#首先是-HTML-结构-2" class="headerlink" title="首先是 HTML 结构"></a>首先是 HTML 结构</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">       header</div><div class="line">   <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">       footer</div><div class="line">   <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="CSS-布局-2"><a href="#CSS-布局-2" class="headerlink" title="CSS 布局"></a>CSS 布局</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>,<span class="selector-tag">html</span> &#123;</div><div class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-class">.all</span>&#123;</div><div class="line">            <span class="attribute">display</span>: flex;</div><div class="line">            <span class="attribute">flex-direction</span>: column; </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-tag">header</span>,<span class="selector-tag">footer</span>&#123;</div><div class="line">            <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> auto;</div><div class="line">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,.4);</div><div class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.container</span> &#123;</div><div class="line">            <span class="attribute">display</span>: flex;</div><div class="line">            <span class="comment">/* flex: 3;  */</span>         </div><div class="line">            <span class="comment">/* 一共分为三份 */</span></div><div class="line"></div><div class="line">            <span class="attribute">flex-direction</span>: row;          </div><div class="line">            <span class="comment">/* 水平正向排列 */</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">/* 左右俩份，当屏幕缩小时，不缩小 */</span></div><div class="line">        <span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</div><div class="line">            <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;           <span class="comment">/*flex: x =&gt; &#123;默认为0,有剩余空间不放大&#125;  1 =&gt; &#123;默认为为1，空间不足缩小&#125;  size =&gt; &#123;默认 auto ,占据固定空间&#125;  =&gt; 后二可以省略*/</span></div><div class="line">            <span class="attribute">background-color</span>: blue;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="selector-class">.center</span>&#123;</div><div class="line">            <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h5 id="关于-flex-用法"><a href="#关于-flex-用法" class="headerlink" title="关于 flex 用法"></a>关于 flex 用法</h5><blockquote>
<p><a href="http://www.runoob.com/w3cnote/flex-grammar.html" target="_blank" rel="external">Flex 布局语法教程</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="external">Flex 布局教程：语法篇–阮一峰</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇</a></p>
</blockquote>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><h3 id="功能类"><a href="#功能类" class="headerlink" title="功能类"></a>功能类</h3><h4 id="实现联动"><a href="#实现联动" class="headerlink" title="实现联动"></a><a href="http://hexin.life/more/linkage.html">实现联动</a></h4><h4 id="放大镜"><a href="#放大镜" class="headerlink" title="放大镜"></a><a href="http://hexin.life/more/mangnifyLens.html">放大镜</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试准备" scheme="http:%5C%5Chexin.life/tags/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>字符串的乘法</title>
    <link href="http:%5C%5Chexin.life/2017/07/29/title-20/"/>
    <id>http:\\hexin.life/2017/07/29/title-20/</id>
    <published>2017-07-29T07:55:33.000Z</published>
    <updated>2017-07-30T15:57:00.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><ol>
<li>创建一个n+1的空数组，调用join方法。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.times = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;<span class="comment">//IE6 530-640 FF3 400~550 IE8 840 ~1110   chrome 600~1000</span></div><div class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>)).join(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">2. 创建一个对象，拥有length属性，然后利用call()方法去调用数组原型的join方法。这样就不用创建数组了。</div></pre></td></tr></table></figure>
<p>String.prototype.times = function(n) {//IE6 570~600  FF3 320~430  chrome 550~900 IE8 422~490<br>  return Array.prototype.join.call({length:n+1}, this);<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 它先把Array.prototype.join与对象缓存起来，这样每次就不用从Array的原型查找join方法与创建对象。</div></pre></td></tr></table></figure></p>
<p>String.prototype.times = (function(){//IE6 500~600  FF3 322~390 chrome 581~900 IE8 430~500<br>  var join = Array.prototype.join,//利用闭包，每次的结果都非常不稳定，让浏览器无法进行优化<br>  obj = { };<br>  return function(n) {<br>    obj.length = n + 1;<br>    return join.call(obj, this);<br>  }<br>})();<br>```</p>
<blockquote>
<p>更多(本人理解有限):<br><a href="http://www.cnblogs.com/rubylouvre/archive/2009/11/08/1598383.html" target="_blank" rel="external">字符串的乘法-司徒正美</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS练习之--模拟call_apply</title>
    <link href="http:%5C%5Chexin.life/2017/07/29/title-19/"/>
    <id>http:\\hexin.life/2017/07/29/title-19/</id>
    <published>2017-07-29T07:35:46.000Z</published>
    <updated>2017-07-29T08:13:37.274Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="apply-和-call"><a href="#apply-和-call" class="headerlink" title="apply 和 call"></a>apply 和 call</h2><p>在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法。<br>call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。<br>例1；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var jaw = &#123; </div><div class="line">    name: &apos;jaw&apos;, </div><div class="line">    sayHello: function(age) &#123; </div><div class="line">        console.log(&apos;hello i am &apos; + this.name + &quot; i&apos;m &quot; + age + &apos; years old &apos;) </div><div class="line">    &#125; </div><div class="line">&#125;;</div><div class="line"></div><div class="line">var liu = &#123; </div><div class="line">    name: &apos;liu&apos; </div><div class="line">&#125;;</div><div class="line">jaw.sayHello(22); // hello i am jaw i&apos;m 22 years old</div><div class="line">jaw.sayHello.apply(liu, [24]);  //hello i am liu i&apos;m 24 years old </div><div class="line">jaw.sayHello.call(liu, 23);  //hello i am liu i&apos;m 23 years old</div></pre></td></tr></table></figure></p>
<p>例2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function a()&#123;</div><div class="line">    y=function()&#123;</div><div class="line">    x=2;</div><div class="line">&#125;; </div><div class="line">return function()&#123;</div><div class="line">    var x=3;y();console.log(this.x)</div><div class="line">&#125;.apply(this, arguments)&#125; </div><div class="line">a();    //2</div></pre></td></tr></table></figure></p>
<p>两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数：</p>
<ul>
<li>apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，</li>
<li>call则作为call的参数传入（从第二个参数开始）。</li>
</ul>
<p>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。<br>在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。</p>
<blockquote>
<p>通过 call() 或 apply() 方法你可以设置 this 的值, 且作为已存在对象的新方法调用。</p>
</blockquote>
<h2 id="apply-模拟实现"><a href="#apply-模拟实现" class="headerlink" title="apply 模拟实现"></a>apply 模拟实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Function.prototype.applyOne = function (context) &#123;</div><div class="line">    var context = context || window;     //如果没有参数时指向window</div><div class="line">    var args = arguments[1];               //获取传入的数组</div><div class="line">    var fn = testSymbol(context);</div><div class="line"></div><div class="line">    context[fn] = this;                	//fn属性不存在</div><div class="line">    </div><div class="line">    if(args == void 0) &#123;          //没有参数即直接运行</div><div class="line">        return context[fn]();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var fnStr = &apos;context[fn](&apos;;             </div><div class="line">     </div><div class="line">    for (var i = 0; i &lt; args.length; i++) &#123;</div><div class="line">     	fnStr += i == args.length - 1 ? args[i] : args[i] + &apos;,&apos;;</div><div class="line">     &#125;;            </div><div class="line">     	fnStr += &apos;)&apos;;           //得到context[fn](arg1,arg2,arg3....)</div><div class="line">     	var returnValue = eval(fnStr);      //</div><div class="line">     	delete context[fn];            //删除这个属性</div><div class="line">     	return returnValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//简单模拟es6的Symbol保证属性的唯一性</div><div class="line">function testSymbol(obj) &#123;            </div><div class="line">    var unquie_obj = &apos;00&apos; + Math.random();</div><div class="line">    if (obj.hasOwnProperty(unquie_obj)) &#123;</div><div class="line">        arguments.callee(obj);</div><div class="line">    &#125; else &#123;</div><div class="line">        return unquie_obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="这里对-call-进行模拟实现"><a href="#这里对-call-进行模拟实现" class="headerlink" title="这里对 call 进行模拟实现"></a>这里对 call 进行模拟实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//call</div><div class="line">Function.prototype.callOne = function (context) &#123;</div><div class="line">    return this.applyOne(([].shift.applyOne(arguments)),arguments);        //将参数依次弹出即可</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http:%5C%5Chexin.life/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 表单编码 enctype</title>
    <link href="http:%5C%5Chexin.life/2017/07/27/title-18/"/>
    <id>http:\\hexin.life/2017/07/27/title-18/</id>
    <published>2017-07-26T16:12:42.000Z</published>
    <updated>2017-07-30T15:58:36.723Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>在web开发中最常见的莫过于GET和POST，其中 GET 一般将参数编码在 url 中（HTTP header）来传递数据； 而POST或PUT数据必须放在消息主体（entity-body）中，这样的数据便是HTTP表单，表单数据的编码方式应在 HTTP 头中进行设置（Content-Type header字段），常见的编码方式有（HTTP采用MIME框架，编码方式可以是任何MIME类型）：</p>
<ol>
<li>URLencoded: application/x-www-form-urlencoded</li>
<li>Multipart: multipart/form-data</li>
<li>JSON: application/json</li>
<li>XML: text/xml</li>
<li>纯文本: text/plain</li>
</ol>
<p>在Web开发中，前三种格式非常常见。HTML中 &lt; form &gt; 支持 urlencoded,multipart,plain text，通过 enctype 属性来进行设置。AJAX 中默认的则是 JSON 编码格式。</p>
<h1 id="URLencoded"><a href="#URLencoded" class="headerlink" title="URLencoded"></a>URLencoded</h1><p>HTML中 &lt; form &gt; 标签的enctype属性用来指定表单编码格式，默认为 application/x-www-form-urlencoded，即以下两个表单完全等价。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">'post'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'title'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'subtitle'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">'post'</span> <span class="attr">enctype</span>=<span class="string">'application/x-www-form-urlencoded'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'title'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'subtitle'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述表单将会显示为两个文本框和一个提交按钮。我们在文本框中分别写入 test 和中国后，点击提交按钮。产生的 HTTP 请求可能是这样的：</p>
<blockquote>
<p>可以打开 Chrome 控制台的 Network 标签，找到这次请求，便可以看到下面的信息。</p>
</blockquote>
<p>请求头（这里只给出了Content-Type 字段）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type: application/x-www-form-urlencoded</div></pre></td></tr></table></figure></p>
<p>请求体：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">title=test&amp;subtitle=%E4%B8%AD%E5%9B%BD</div></pre></td></tr></table></figure>
<blockquote>
<p>这里你看到的%E4%B8%AD%E5%9B%BD即是中国按照base64编码（url通用的编码方式）后的结果。可以在Chrome Console中通过decodeURI(‘%E4%B8%AD%E5%9B%BD’)来解码。</p>
</blockquote>
<h1 id="Multipart"><a href="#Multipart" class="headerlink" title="Multipart"></a>Multipart</h1><p>multipart 编码方式则需要设置 enctype 为 multipart/form-data。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"harttle"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"avatar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里我们还设置了&lt; input type=’text’ &gt;的默认值为 harttle。<br>该表单将会显示为一个文本框、一个文件按钮、一个提交按钮。然后我们选择一个文件：chrome.png，点击表单提交后产生的请求可能是这样的：</p>
<p>请求头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</div></pre></td></tr></table></figure></p>
<p>请求体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</div><div class="line">Content-Disposition: form-data; name=&quot;title&quot;</div><div class="line"></div><div class="line">harttle</div><div class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</div><div class="line">Content-Disposition: form-data; name=&quot;avatar&quot;; filename=&quot;chrome.png&quot;</div><div class="line">Content-Type: image/png</div><div class="line"></div><div class="line"> ... content of chrome.png ...</div><div class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这便是一个multipart编码的表单。Content-Type中还包含了boundary的定义，它用来分隔请求体中的每个字段。正是这一机制，使得请求体中可以包含二进制文件（当然文件中不能包含boundary）。</p>
</blockquote>
<p>除了application/x-www-form-urlencoded和multipart/form-data，HTML的&lt; form &gt;还支持text/plain。此外，如果想提交其他编码类型的表单，必须通过AJAX技术，接下来我们介绍一个常用的JSON数据的提交。</p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>从JavaScript中提交 JSON 数据真是再方便不过了，jquery、angularJS 等框架都封装了更好用的 AJAX 方法。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$.post(&apos;/xxx&apos;, &#123;</div><div class="line">        title: &apos;test&apos;,</div><div class="line">        content: [1,2,3]</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>该JavaScript执行后可能生成如下的 HTTP 请求：</p>
<p>请求头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type: application/json;charset=utf-8</div></pre></td></tr></table></figure></p>
<p>请求体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;title&quot;:&quot;test&quot;,&quot;content&quot;:[1,2,3]&#125;</div></pre></td></tr></table></figure></p>
<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>请求头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">POST http://www.example.com HTTP/1.1</div><div class="line">Content-Type: text/xml</div></pre></td></tr></table></figure></p>
<p>请求体：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--?xml version=&quot;1.0&quot;?--&gt;</div><div class="line">&lt;methodcall&gt;</div><div class="line">    &lt;methodname&gt;examples.getStateName&lt;/methodname&gt;</div><div class="line">    &lt;params&gt;</div><div class="line">        &lt;param&gt;</div><div class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</div><div class="line">    &lt;/params&gt;</div><div class="line">&lt;/methodcall&gt;</div></pre></td></tr></table></figure></p>
<p>转载来自： <a href="http://harttle.com/2016/04/11/http-form-encoding.html" target="_blank" rel="external">http://harttle.com/2016/04/11/http-form-encoding.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="转载" scheme="http:%5C%5Chexin.life/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="http:%5C%5Chexin.life/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习</title>
    <link href="http:%5C%5Chexin.life/2017/07/17/title-17/"/>
    <id>http:\\hexin.life/2017/07/17/title-17/</id>
    <published>2017-07-16T16:12:42.000Z</published>
    <updated>2017-07-30T15:59:40.495Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>为了方便查询和学习，这里对正则表达式做一个整理<br>这里推荐一个正则练习的网站 , 将晦涩的正则表达式用图形描述出来</p>
<p> <a href="https://regexper.com/" target="_blank" rel="external">RegExper</a> <a href="https://regexper.com/" target="_blank" rel="external">https://regexper.com/</a></p>
<p>像这个样子(邮箱验证)：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/5643026.jpg" alt=""></p>
<h1 id="关于正则表达式"><a href="#关于正则表达式" class="headerlink" title="关于正则表达式"></a>关于正则表达式</h1><blockquote>
<p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p>
</blockquote>
<p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p>
<ul>
<li>假设你在一篇英文小说里查找 hi，你可以使用正则表达式hi。<br>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是h,后一个是i。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配 hi, HI, Hi, hI 这四种情况中的任意一种。<br>不幸的是，很多单词里包含hi这两个连续的字符，比如 him hi history high 等等。用hi来查找的话，这里边的hi也会被找出来。如果要精确地查找hi这个单词的话，我们应该使用 \bhi\b 。</li>
</ul>
<blockquote>
<p>使用正则表达式 : </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+\s/g</span>;  </div><div class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\w+\\s"</span>, <span class="string">"g"</span>);</div></pre></td></tr></table></figure>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/64808664.jpg" alt=""></p>
<blockquote>
<p>. 只能匹配一个字节的字符，不能识别换行符,回车符，行分隔符，段分隔符等<br>换行符,回车符，行分隔符，段分隔符 需要用 s 修饰符来识别， s 修饰符目前处于提案状态</p>
</blockquote>
<h2 id="反义字符"><a href="#反义字符" class="headerlink" title="反义字符"></a>反义字符</h2><p> <img src="http://or3233yyd.bkt.clouddn.com//17-7-16/44870681.jpg" alt=""></p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p> <img src="http://or3233yyd.bkt.clouddn.com//17-7-16/15839701.jpg" alt=""></p>
<h2 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/94805709.jpg" alt=""></p>
<h2 id="分组-捕获"><a href="#分组-捕获" class="headerlink" title="分组 / 捕获"></a>分组 / 捕获</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/9991323.jpg" alt=""></p>
<p>下面的脚本使用replace()方法来转换字符串中的单词。在匹配到的替换文本中，脚本使用替代的 <pre>$1 , $2</pre> 表示第一个和第二个括号的子字符串匹配。</p>
<blockquote>
<p>var re = /(\w+)\s(\w+)/;<br>var str = “John Smith”;<br>var newstr = str.replace(re, “$2, $1”);<br>console.log(newstr);</p>
</blockquote>
<p>这个表达式输出 “Smith  John”。</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/79456676.jpg" alt=""></p>
<h2 id="贪婪-惰性"><a href="#贪婪-惰性" class="headerlink" title="贪婪 / 惰性"></a>贪婪 / 惰性</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/87221432.jpg" alt=""></p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/6803210.jpg" alt=""></p>
<h3 id="ES6-新增修饰符"><a href="#ES6-新增修饰符" class="headerlink" title="ES6 新增修饰符"></a>ES6 新增修饰符</h3><h4 id="y-修饰符"><a href="#y-修饰符" class="headerlink" title="y 修饰符"></a>y 修饰符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">'bb_b=b+bbb++bb'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/b+/g</span>;    </div><div class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/b+/y</span>;    </div><div class="line"></div><div class="line"><span class="keyword">let</span> exec1 = reg1.exec(str);</div><div class="line"><span class="keyword">let</span> exec2 = reg2.exec(str);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'OneExec:\n'</span> + <span class="string">'exec1: '</span> + exec1 + <span class="string">'\texec1: '</span> + exec2)  <span class="comment">//bb   bb</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'TwoExec:\n'</span> + <span class="string">'exec1: '</span> + reg1.exec(str) + <span class="string">'\texec1: '</span> + reg2.exec(str)) <span class="comment">// b  null  //g 第二次自动匹配下一个位置,而 y 不是</span></div><div class="line"><span class="built_in">console</span>.log(reg1.sticky, reg2.sticky)    <span class="comment">// 检测是否开启了 y</span></div></pre></td></tr></table></figure>
<h4 id="u-修饰符-unicode"><a href="#u-修饰符-unicode" class="headerlink" title="u 修饰符 (unicode)"></a>u 修饰符 (unicode)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">var</span> str = <span class="string">'\uD83D\uDC2A'</span>;	</div><div class="line"></div><div class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^\uD83D/</span>;</div><div class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^\uD83D/u</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'u1: '</span> + reg1.test(str))    <span class="comment">//true        //当作俩个字节处理</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'u2: '</span> + reg2.test(str))	<span class="comment">//false		// 当作了一个字节处理</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/</span>.test(<span class="string">'a'</span>));  <span class="comment">// false   这里不识别 \u&#123;61&#125; 中的 &#123;61&#125;-&gt; unicode编码 // a 的 unicode编码是 61</span></div><div class="line"><span class="built_in">console</span>.log(<span class="regexp">/\u&#123;61&#125;/u</span>.test(<span class="string">'a'</span>));   <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'\u&#123;54564&#125;'</span>);    <span class="comment">//񔕤</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'\u&#123;2048&#125;'</span>);     <span class="comment">//⁈</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> z1 = <span class="string">'񔕤'</span>;</div><div class="line"><span class="keyword">let</span> z2 = <span class="string">'⁈'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> reg3 = <span class="regexp">/^.$/</span>;</div><div class="line"><span class="keyword">let</span> reg4 = <span class="regexp">/^.$/u</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> test3 = reg3.test(z1);</div><div class="line"><span class="keyword">let</span> test4 = reg3.test(z2);       <span class="comment">//  . 只能匹配一个字节的字符，也不能识别换行符等</span></div><div class="line"><span class="keyword">let</span> test5 = reg4.test(z1);       <span class="comment">//大于俩个字节时，使用 u 修饰符</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'z1: '</span> + test3 + <span class="string">' z2: '</span> + test4 + <span class="string">' z1(u): '</span> + test5);   <span class="comment">// z1: false z2: true z1(u): true</span></div></pre></td></tr></table></figure>
<h2 id="ES6-新增"><a href="#ES6-新增" class="headerlink" title="ES6 新增"></a>ES6 新增</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">let</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);    <span class="comment">// round1</span></div><div class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/g</span>);        <span class="comment">// round2   ES5 只能输入一个参数</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> test1 = reg1.test(<span class="string">'xyz123'</span>); <span class="comment">//true</span></div><div class="line"><span class="keyword">let</span> test2 = reg2.test(<span class="string">'xyz123'</span>); <span class="comment">//true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//  --&gt;  flag   es6 新添加，用来获取正则的修饰符 </span></div><div class="line"><span class="built_in">console</span>.log(test1, test2, reg1.flags, reg2.flags)</div><div class="line"><span class="keyword">let</span> reg3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/g</span>, <span class="string">'i'</span>);  <span class="comment">// ES6 允许这种情况输入俩个参数</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> flag3 = reg3.flags;   </div><div class="line"><span class="built_in">console</span>.log(flag3);    <span class="comment">// -&gt; i    这里 i 覆盖了前面的g</span></div></pre></td></tr></table></figure>
<h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><h3 id="正则表达式属性"><a href="#正则表达式属性" class="headerlink" title="正则表达式属性"></a>正则表达式属性</h3><p><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/42241406.jpg" alt=""></p>
<blockquote>
<p>lastindex 只在全局匹配时有效<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/39465782.jpg" alt=""></p>
</blockquote>
<hr>
<blockquote>
<p>var myRe = new RegExp(“d(b+)d”, “g”);<br>var myArray = myRe.exec(“cdbbdbsbz”);</p>
</blockquote>
<p>通过这些脚本，匹配成功后将返回一个数组并且更新正则表达式的属性，如下表所示。<br>正则表达式执行返回信息</p>
<p>对象 ———— 属性或索引描述      ————–    在例子中对应的值</p>
<ol>
<li>myArray    </li>
</ol>
<ul>
<li><ul>
<li>匹配到的字符串和所有被记住的子字符串。    [“dbbd”, “bb”]</li>
</ul>
</li>
<li><ul>
<li>index    在输入的字符串中匹配到的以0开始的索引值。    1</li>
</ul>
</li>
<li><ul>
<li>input    初始字符串。    “cdbbdbsbz”</li>
</ul>
</li>
<li><ul>
<li>[0]    匹配到的所有字符串（并不是匹配后记住的字符串）。注：原文”The last matched characters.”，应该是原版错误。匹配到的最后一个字符索引。    “dbbd”</li>
</ul>
</li>
</ul>
<ol>
<li>myRe     </li>
</ol>
<ul>
<li><ul>
<li>lastIndex    下一个匹配的索引值。（这个属性只有在使用g参数时可用在 通过参数进行高级搜索 一节有详细的描述.)    5</li>
</ul>
</li>
<li><ul>
<li>source    模式文本。在正则表达式创建时更新，不执行。    “d(b+)d”<br><img src="http://or3233yyd.bkt.clouddn.com//17-7-16/50215172.jpg" alt=""></li>
</ul>
</li>
</ul>
<p>正则表达式可以被用于 RegExp 的 exec 和 test 方法以及 String 的 match、replace、search和 split 方法。</p>
<h3 id="方法及描述"><a href="#方法及描述" class="headerlink" title="方法及描述 :"></a>方法及描述 :</h3><ul>
<li>exec &nbsp;&nbsp;一个在 <em>正则 RegExp</em> 中执行查找匹配的 <em>字符串 String</em> 方法，它返回一个数组（未匹配到则返回null）。<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/21413750.jpg" alt=""></li>
<li>match&nbsp;&nbsp;一个在 <em>字符串</em> 中执行查找匹配的 <em>String</em> 方法，它返回一个数组或者在未匹配到时返回null。<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/71719153.jpg" alt=""></li>
<li>search&nbsp;&nbsp;一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</li>
<li>test&nbsp;&nbsp;一个在字符串中测试是否匹配的RegExp方法，它返回true或false。<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-16/60520995.jpg" alt=""><br>这里根据测试次数不同， lastindex 值改变，结果会有所不同<br>例： <img src="http://or3233yyd.bkt.clouddn.com//17-7-16/46262496.jpg" alt=""></li>
<li>replace&nbsp;&nbsp;一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。<br>例：<img src="http://or3233yyd.bkt.clouddn.com//17-7-17/79744675.jpg" alt=""><br>其中 function 方法：<img src="http://or3233yyd.bkt.clouddn.com//17-7-17/190159.jpg" alt=""></li>
<li>split&nbsp;&nbsp;一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。<br>例： <img src="http://or3233yyd.bkt.clouddn.com//17-7-16/22074543.jpg" alt=""></li>
</ul>
<h1 id="常见的正则表达式"><a href="#常见的正则表达式" class="headerlink" title="常见的正则表达式"></a>常见的正则表达式</h1><ul>
<li><p>邮箱：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/</div></pre></td></tr></table></figure>
</li>
<li><p>URL 地址： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^https?:\/\/(([a-zA-Z0-9_-])+(\.)?)*(:\d+)?(\/((\.)?(\?)?=?&amp;?[a-zA-Z0-9_-](\?)?)*)*$/i</div></pre></td></tr></table></figure>
</li>
<li><p>手机号码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/</div></pre></td></tr></table></figure>
</li>
<li><p>匹配身份证号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^(^[1-9]\d&#123;7&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;$)|(^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d&#123;4&#125;)|\d&#123;3&#125;[Xx])$)$/</div></pre></td></tr></table></figure>
</li>
<li><p>邮政编码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^[1-9]\d&#123;5&#125;(?!\d)$/</div></pre></td></tr></table></figure>
</li>
<li><p>匹配日期(yyyy-mm-dd)： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^[1-2][0-9][0-9][0-9]-[0-1]&#123;0,1&#125;[0-9]-[0-3]&#123;0,1&#125;[0-9]$/</div></pre></td></tr></table></figure>
</li>
<li><p>匹配 HTML 标签： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/&lt;(\S*?) [^*&gt;.*?&lt;/\1&gt;|&lt;.*?/&gt;/gm</div></pre></td></tr></table></figure>
</li>
<li><p>匹配中文字符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/[\u4e00-\u9fa5]/gm</div></pre></td></tr></table></figure>
</li>
<li><p>只能输入数字： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^\d+$/</div></pre></td></tr></table></figure>
</li>
<li><p>只能由英文字母/数字/下划线组成： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^\w+$/</div></pre></td></tr></table></figure>
</li>
<li><p>只能英文和数字组成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^[a-z0-9]+$/i</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="正则表达式学习"><a href="#正则表达式学习" class="headerlink" title="正则表达式学习"></a>正则表达式学习</h1><p><a href="https://msdn.microsoft.com/zh-cn/library/az24scfc%28v=vs.110%29.aspx" target="_blank" rel="external">正则表达式快速参考-MSDN</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">正则表达式-MDN</a><br><a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a><br><a href="http://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="external">菜鸟教程-正则表达式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="正则表达式" scheme="http:%5C%5Chexin.life/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http:%5C%5Chexin.life/2017/07/11/title-16/"/>
    <id>http:\\hexin.life/2017/07/11/title-16/</id>
    <published>2017-07-11T13:32:07.000Z</published>
    <updated>2017-07-11T13:32:07.653Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>盒模型 行内元素及块级元素区别</title>
    <link href="http:%5C%5Chexin.life/2017/07/11/title-15/"/>
    <id>http:\\hexin.life/2017/07/11/title-15/</id>
    <published>2017-07-11T13:30:56.000Z</published>
    <updated>2017-07-13T07:43:24.216Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p><img src="https://developer.mozilla.org/files/72/boxmodel%20(1" alt="">.png)</p>
<p>在一个文档中，每个元素都被表示为一个矩形的盒子。确定这些盒子的尺寸, 属性 — 像它的颜色，背景，边框方面 — 和位置是渲染引擎的目标。</p>
<p>在CSS中，使用标准盒模型描述这些矩形盒子中的每一个。这个模型描述了元素所占空间的内容。每个盒子有四个边：外边距边, 边框边, 内填充边 与 内容边。 </p>
<h2 id="盒模型-1"><a href="#盒模型-1" class="headerlink" title="盒模型"></a>盒模型</h2><p><img src="http://www.runoob.com/images/box-model.gif" alt=""></p>
<ul>
<li><p>内容区域content area 是包含元素真实内容的区域。它通常包含背景、颜色或者图片等，位于内容边界的内部，它的大小为内容宽度 或 content-box宽及内容高度或content-box高。</p>
</li>
<li><p>如果 box-sizing 为默认值， width, min-width, max-width, height, min-height 与 max-height 控制内容大小。</p>
</li>
<li><p>内边距区域 padding area 延伸到包围padding的边框。如果内容区域 content area 设置了背景、颜色或者图片，这些样式将会延伸到 padding 上(译者注：而不仅仅是作用于内容区域)。它位于内边距边界内部, 它的大小为 padding-box  宽与 padding-box 高。</p>
</li>
</ul>
<p>内边距与内容边界之间的空间可以由 padding-top, padding-right, padding-bottom, padding-left 和简写属性 padding 控制。</p>
<ul>
<li><p>边框区域 border area 是包含边框的区域，扩展了内边距区域。它位于边框边界内部，大小为 border-box  宽和 border-box 高。由 border-width 及简写属性 border控制。</p>
</li>
<li><p>外边距区域 margin area 用空白区域扩展边框区域，以分开相邻的元素。它的大小为  margin-box 的高宽。</p>
</li>
</ul>
<p>外边距区域大小由 margin-top, margin-right, margin-bottom, margin-left 及简写属性 margin 控制。</p>
<h2 id="盒模型宽高计算"><a href="#盒模型宽高计算" class="headerlink" title="盒模型宽高计算"></a>盒模型宽高计算</h2><p>最终元素的总宽度计算公式是这样的：</p>
<ul>
<li>总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距</li>
<li>width = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</li>
</ul>
<p>元素的总高度最终计算公式是这样的：</p>
<ul>
<li>总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</li>
<li>height = margin-top + border-top + padding-top + width + padding-bottom + border-bottom + margin-bottom</li>
</ul>
<p>而IE对宽度的诠释不一样。符合 W3C 标准的浏览器认为一个元素的宽度只等于其 content 的宽度，其余都要额外算。如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.example</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>则他最终的宽度应为：<br>宽度 = width + padding <em> 2 + border</em> 2 + margin * 2  = 270px;</li>
<li><p>而在 IE（低于IE9） 下，最终宽度为：<br>宽度 = width + margin* 2 = 240px;</p>
<blockquote>
<p> W3C 最后为了解决这个问题，在 CSS3 中加了 box-sizing 这个属性。当我们设置 box-sizing: border-box; 时，border 和 padding 就被包含在了宽高之内，和 IE 之前的标准是一样的。</p>
</blockquote>
<p>所以，为了避免你同一份 css 在不同浏览器下表现不同，最好加上：</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="浏览器的兼容性问题"><a href="#浏览器的兼容性问题" class="headerlink" title="浏览器的兼容性问题"></a>浏览器的兼容性问题</h2><ul>
<li>一旦为页面设置了恰当的 DTD，大多数浏览器都会按照上面的图示来呈现内容。然而 IE 5 和 6 的呈现却是不正确的。根据 W3C 的规范，元素内容占据的空间是由 width 属性设置的，而内容周围的 padding 和 border 值是另外计算的。不幸的是，IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。</li>
</ul>
<p>虽然有方法解决这个问题。但是目前最好的解决方案是回避这个问题。也就是，不要给元素添加具有指定宽度的内边距，而是尝试将内边距或外边距添加到元素的父元素和子元素。</p>
<ul>
<li>IE8 及更早IE版本不支持 填充的宽度和边框的宽度属性设。<br>解决 IE8 及更早版本不兼容问题可以在HTML页面声明 &lt; !DOCTYPE html &gt; 即可。</li>
</ul>
<ul>
<li>IE6中浮动双边距<br>因为内联元素没有此问题，所以通过设置 display:inline 解决</li>
</ul>
<h1 id="行内元素及块级元素"><a href="#行内元素及块级元素" class="headerlink" title="行内元素及块级元素"></a>行内元素及块级元素</h1><p>HTML (超文本标记语言) 元素大多数都是行内元素或块级元素。</p>
<ul>
<li>行内元素只占据它对应标签的边框所包含的空间。</li>
<li>块级元素占据其父元素（容器）的整个空间，因此创建了一个“块”。<h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2></li>
</ul>
<ol>
<li>内容<ul>
<li>一般情况下，行内元素只能包含数据和其他行内元素。</li>
</ul>
</li>
<li>格式<ul>
<li>行内元素不会以新行开始</li>
<li>块级元素会新起一行。</li>
</ul>
</li>
</ol>
<blockquote>
<ul>
<li>设置宽度width 无效。</li>
<li>设置高度height 无效，可以通过 <a href="http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/" target="_blank" rel="external">line-height</a> 来设置。</li>
<li>设置 margin 只有左右 margin 有效，上下无效。</li>
<li>设置 padding 只有左右 padding 有效，上下则无效。<em>注意元素范围是增大了，但是对元素周围的内容是没影响的.</em></li>
</ul>
</blockquote>
<p> 如果你要将行内元素变成块级元素，那么就只需要在该标签上加上样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</div></pre></td></tr></table></figure></p>
<p>块级元素可以用样式控制其高、宽的值。</p>
<h4 id="若既想让元素在行内显示，又能设置宽高"><a href="#若既想让元素在行内显示，又能设置宽高" class="headerlink" title="若既想让元素在行内显示，又能设置宽高"></a>若既想让元素在行内显示，又能设置宽高</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span></div></pre></td></tr></table></figure>
<p>行内元素不可以控制宽和高，除非你想将它转变成为块级元素。它的宽和高，是随标签里的内容而变化。</p>
<h3 id="行内元素列表"><a href="#行内元素列表" class="headerlink" title="行内元素列表"></a>行内元素列表</h3><ul>
<li>b, big, i, small, tt</li>
<li>abbr, acronym, cite, code, dfn, em, kbd, strong, samp, var</li>
<li>a, bdo, br, img, map, object, q, script, span, sub, sup</li>
<li>button, input, label, select, textarea</li>
</ul>
<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>  <em>块级元素只能出现在 <body> 元素内</body></em></p>
<ol>
<li>内容<ul>
<li>块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。</li>
</ul>
</li>
<li>格式<ul>
<li>默认情况下，块级元素会新起一行。</li>
</ul>
</li>
<li>内容模型<ul>
<li>一般块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。<h3 id="块级元素列表"><a href="#块级元素列表" class="headerlink" title="块级元素列表"></a>块级元素列表</h3></li>
</ul>
</li>
</ol>
<ul>
<li>article [HTML5] 文章内容。</li>
<li>aside [HTML5] 伴随内容。 </li>
<li>audio [HTML5] 音频播放。 </li>
<li>blockquote 块引用。</li>
<li>canvas [HTML5] 绘制图形。 </li>
<li>dd 定义列表中定义条目描述。 </li>
<li>div 文档分区。 </li>
<li>dl 定义列表。 </li>
<li>fieldset 表单元素分组。 </li>
<li>figcaption [HTML5] 图文信息组标题 </li>
<li>figure [HTML5] 图文信息组 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/figcaption" target="_blank" rel="external">(参照 figcaption)</a>。 </li>
<li>footer [HTML5] 区段尾或页尾。 </li>
<li>form 表单。 </li>
<li>h1, h2, h3, h4, h5, h6 标题级别 1-6. </li>
<li>header [HTML5] 区段头或页头。 </li>
<li>hgroup [HTML5] 标题组。 </li>
<li>hr 水平分割线。 </li>
<li>noscript 不支持脚本或禁用脚本时显示的内容。 </li>
<li>ol 有序列表。</li>
<li>output [HTML5] 表单输出。 </li>
<li>p 行。 pre 预格式化文本。 </li>
<li>section [HTML5] 一个页面区段。 </li>
<li>table 表格。 </li>
<li>tfoot 表脚注。 </li>
<li>ul 无序列表。 </li>
<li><p>video [HTML5] 视频。</p>
<h2 id="可变元素"><a href="#可变元素" class="headerlink" title="可变元素"></a>可变元素</h2><blockquote>
<p>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</p>
</blockquote>
</li>
<li><p>applet - java applet</p>
</li>
<li>button - 按钮</li>
<li>del - 删除文本</li>
<li>iframe - inline frame</li>
<li>ins - 插入的文本</li>
<li>map - 图片区块(map)</li>
<li>object - object 对象</li>
<li>script - 客户端脚本</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://jeffjade.com/2015/06/24/2015-06-24-css-block-inline/" target="_blank" rel="external">CSS块级元素和行内元素-晚晴幽草轩</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elemente" target="_blank" rel="external"> MDN -行内元素</a></li>
<li><a href="http://geekplux.com/2014/04/25/several_core_concepts_of_css.html" target="_blank" rel="external">CSS 最核心的几个概念</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http:%5C%5Chexin.life/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS 缓动(转)</title>
    <link href="http:%5C%5Chexin.life/2017/07/11/title-14/"/>
    <id>http:\\hexin.life/2017/07/11/title-14/</id>
    <published>2017-07-11T12:28:04.000Z</published>
    <updated>2017-07-13T06:29:19.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="缓动的基础知识"><a href="#缓动的基础知识" class="headerlink" title="缓动的基础知识"></a>缓动的基础知识</h2><p>自然界中没有东西是从一点呈线性地移动到另一点。现实中，物体在移动时往往会加速或减速。我们的大脑习惯于期待这种运动，因此在做动画时，应利用此规律。自然的运动会让用户对您的应用感觉更舒适，从而产生更好的总体体验。</p>
<ul>
<li>缓动使您的动画感觉更自然。</li>
<li>为 UI 元素选择缓出动画。</li>
<li>避免缓入或缓入缓出动画，除非可以使其保持简短；这类动画可能让最终用户觉得很迟钝。</li>
</ul>
<p>在经典动画中，缓慢开始然后加速的动画术语是“慢入”，快速开始然后减速的动画被称为“慢出”。网络上对于这些动画最常用的术语分别是“缓入”和“缓出”。有时两种动画相组合，称为“缓入缓出”。缓动实际上是使动画不再那么尖锐或生硬的过程。</p>
<h2 id="缓动关键字"><a href="#缓动关键字" class="headerlink" title="缓动关键字"></a>缓动关键字</h2><p>CSS 变换和动画都允许您<a href="https://developers.google.com/web/fundamentals/design-and-ui/animations/choosing-the-right-easing?hl=zh-cn" target="_blank" rel="external">选择要为动画使用的缓动类型</a>。您可以使用影响相关动画的缓动（或有时称为 timing）的关键字。还可以<a href="https://developers.google.com/web/fundamentals/design-and-ui/animations/custom-easing?hl=zh-cn" target="_blank" rel="external">完全自定义您的缓动</a>，借此方式更自由地表达应用的个性。</p>
<p>以下是可在 CSS 中使用的一些关键字：</p>
<ul>
<li>linear</li>
<li>ease-in</li>
<li>ease-out</li>
<li>ease-in-out<br>资料来源：<a href="http://www.w3.org/TR/css3-transitions/#transition-timing-function-property" target="_blank" rel="external">CSS 变换，W3C</a></li>
</ul>
<p>还可以使用 steps 关键字，它允许您创建具有离散步骤的变换，但上面列出的关键字对于创建感觉自然的动画最有用，并且这绝对是您要的效果。</p>
<h2 id="线性动画"><a href="#线性动画" class="headerlink" title="线性动画"></a>线性动画</h2><hr>
<p>没有任何缓动的动画称为线性动画。线性变换的图形看起来像这样：</p>
<p>随着时间推移，其值以等量增加。采用线性运动时，动画内容往往显得很僵硬，不自然，让用户觉得不协调。一般来说，应避免线性运动。</p>
<p>不管通过 CSS 还是 JavaScript 来编写动画代码，您将发现始终有线性运动的选项。<br><img src="https://developers.google.com/web/fundamentals/design-and-ui/animations/images/linear.png?hl=zh-cn" alt="线性动画"></p>
<p><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ui/animations/box-move-linear.html" target="_blank" rel="external">查看线性动画</a></p>
<p>要通过 CSS 实现上述效果，代码将类似下面这样：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 500<span class="selector-tag">ms</span> <span class="selector-tag">linear</span>;</div></pre></td></tr></table></figure></p>
<h2 id="缓出动画"><a href="#缓出动画" class="headerlink" title="缓出动画"></a>缓出动画</h2><hr>
<p>缓出使动画在开头处比线性动画更快，还会在结尾处减速。</p>
<p>缓出一般最适合界面，因为开头时快速使动画有反应快的感觉，同时在结尾仍允许有一点自然的减速。<br><img src="https://developers.google.com/web/fundamentals/design-and-ui/animations/images/ease-out.png?hl=zh-cn" alt="缓出动画"><br><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ui/animations/box-move-ease-out.html" target="_blank" rel="external">查看缓出动画</a></p>
<p>有很多方法来实现缓出效果，但最简单的方法是 CSS 中的 ease-out 关键字：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 500<span class="selector-tag">ms</span> <span class="selector-tag">ease-out</span>;</div></pre></td></tr></table></figure></p>
<h2 id="缓入动画"><a href="#缓入动画" class="headerlink" title="缓入动画"></a>缓入动画</h2><hr>
<p>缓入动画开头慢结尾快，与缓出动画正好相反。</p>
<p>这种动画像沉重的石头掉落一样，开始时很慢，然后快速地重重撞击地面，突然沉寂下来。</p>
<p>但是，从交互的角度来看，缓入可能让人感觉有点不寻常，因为结尾很突然；在现实中移动的物体往往是减速，而不是突然停止。缓入还有让人感觉行动迟缓的不利效果，这会对网站或应用的响应速度给人的感觉产生负面影响。</p>
<p><img src="https://developers.google.com/web/fundamentals/design-and-ui/animations/images/ease-in.png?hl=zh-cn" alt=""><br><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ui/animations/box-move-ease-in.html" target="_blank" rel="external">查看缓入动画</a></p>
<p>要使用缓入动画，与缓出和线性动画类似，可以使用其关键字：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 500<span class="selector-tag">ms</span> <span class="selector-tag">ease-in</span>;</div></pre></td></tr></table></figure></p>
<h2 id="缓入缓出动画"><a href="#缓入缓出动画" class="headerlink" title="缓入缓出动画"></a>缓入缓出动画</h2><hr>
<p>缓入并缓出与汽车加速和减速相似，使用得当时，可以实现比单纯缓出更生动的效果。</p>
<p>由于缓入开头让动画有迟钝感，因此动画持续时间不要过长。300-500 毫秒的时间范围通常比较合适，但实际的数量主要取决于项目的感觉。也就是说，由于开头慢、中间快和结尾慢，动画将有更强的对比，可能让用户感到非常满意。<br><img src="https://developers.google.com/web/fundamentals/design-and-ui/animations/images/ease-in-out.png?hl=zh-cn" alt=""><br><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/design-and-ui/animations/box-move-ease-in-out.html" target="_blank" rel="external">查看缓入缓出动画</a><br>要设置缓入缓出动画，可以使用 ease-in-out CSS 关键字：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transform</span> 500<span class="selector-tag">ms</span> <span class="selector-tag">ease-in-out</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="转载" scheme="http:%5C%5Chexin.life/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="http:%5C%5Chexin.life/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>定制 hexo</title>
    <link href="http:%5C%5Chexin.life/2017/06/06/title-11/"/>
    <id>http:\\hexin.life/2017/06/06/title-11/</id>
    <published>2017-06-06T03:48:42.000Z</published>
    <updated>2017-06-06T16:41:35.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>时隔好久，这里对hexo的博客进行一些功能上的拓展</p>
<h2 id="1-七牛云定制空间及绑定到极简图床"><a href="#1-七牛云定制空间及绑定到极简图床" class="headerlink" title="1.七牛云定制空间及绑定到极简图床"></a>1.七牛云定制空间及绑定到极简图床</h2><blockquote>
<p>对于上传图片个人喜欢<a href="http://jiantuku.com/#/" target="_blank" rel="external">极简图床</a>，支持复制粘贴上传，截图然后粘贴用起来贼爽。</p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/26112457.jpg" alt="图片标题"><br>极简图窗对于游客每日只有10张图片的上限，开始觉得够用了，但是玩着玩着就没了。不过，他本身提供了七牛云的空间储存。</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/24671886.jpg" alt="图片标题"></p>
<ol>
<li>注册和邮箱验证这里就不赘述了，自行解决吧。</li>
<li><p>完成之后选择新建仓库<em>名字建议写成小写，他好像是默认小写的。</em></p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/76001751.jpg" alt="图片标题"></p>
</li>
<li><p>然后到个人中心找到密钥分别填入<br><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/21360219.jpg" alt="图片标题"></p>
</li>
<li><p>找到仓库下的图片处理位置，绑定的域名使用七牛提供的域名即可<br><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/60926365.jpg" alt="图片标题"></p>
</li>
</ol>
<blockquote>
<p>此时就拥有了10G的七牛免费储存空间，极简图床也不限制次数了。慢慢享用吧骚年。</p>
</blockquote>
<h2 id="2-HEXO-内容压缩"><a href="#2-HEXO-内容压缩" class="headerlink" title="2.HEXO 内容压缩"></a>2.HEXO 内容压缩</h2><blockquote>
<p>我这里使用的 NEXT 主题，它在生成 HTML 时由于主题的简洁，形成了大量留白，反而增大了文件大小，使得本来服务器就在国外的网站加载更慢。</p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/96439256.jpg" alt="图片标题"></p>
<h3 id="1-这里使用当红小生-gulp-进行文件的处理。"><a href="#1-这里使用当红小生-gulp-进行文件的处理。" class="headerlink" title="1.这里使用当红小生 gulp 进行文件的处理。"></a>1.这里使用当红小生 gulp 进行文件的处理。</h3><ol>
<li>HEXO 在根目录下新建 gulpfile.js 文件</li>
<li>我们对文件处理需要用到 gulp 的一些插件<br><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/80906841.jpg" alt="图片标题"></li>
<li>使用 npm install <strong> </strong> ** –save-dev 来下载这些插件并保存，添加到 package.json 配置项中。</li>
</ol>
<blockquote>
<p>由于 npm 服务器在国外下载较慢，安装淘宝镜像 cnpm<br> npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/62994802.jpg" alt=""> </p>
<ol>
<li>然后配置 gulpfile.js ,我们知道我们提交博客时，是将静态文件生成到 public 下，然后提交到 github 的。所以我们对文件处理时，就处理这里的静态文件即可。静态文件树形图如下（太长我删减了一部分）：<pre>
D:. public/                         
├─2017                        
│  ├─03                       
│     ├─28                    
│     └─title-1                     
│         
├─about                       
├─archives                    
│  ├─2017                     
│  │  ├─03                    
│  │  ├                   
│  │  └─pages                 
│  │      ├─2                 
│  │      └─3                 
│  └─pages                    
│      ├─2                    
│      └─3                    
├─assets                      
│  └─js                       
├─categories                  
│  ├─css                      
│  ├─hexo                     
│  ├─JavaScript               
│  ├─window                   
│  ├─其他                       
│  └─前端                       
├─css                         
├─images                      
├─js                          
│  └─src                      
│      └─schemes              
├─lib                         
│  ├─algolia-instant-search   
│  ├─canvas-nest              
│  ├─fancybox                 
│  │  └─source                
│  │      └─helpers           
│  ├─fastclick                
│  │  └─lib                   
│  ├─font-awesome             
│  │  ├─css                   
│  │  └─fonts                 
│  ├─jquery                   
│  ├─jquery_lazyload          
│  ├─three                    
│  ├─ua-parser-js             
│  │  └─dist                  
│  └─velocity                 
├─pages                       
│  ├─2                        
│  └─3                        
└─tags                        
├─css-前端                  
├─CSS学习笔记                 
├                     
└─转载                      
</pre>

</li>
</ol>
<h4 id="1-因此对文件处理的代码如下："><a href="#1-因此对文件处理的代码如下：" class="headerlink" title="1.因此对文件处理的代码如下："></a>1.因此对文件处理的代码如下：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入插件 </span></div><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    Hexo = <span class="built_in">require</span>(<span class="string">'hexo'</span>),</div><div class="line">    pump = <span class="built_in">require</span>(<span class="string">'pump'</span>), </div><div class="line">    clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>),</div><div class="line">    jsmin = <span class="built_in">require</span>(<span class="string">'gulp-jsmin'</span>),</div><div class="line"> <span class="comment">// rename = require('gulp-rename'),</span></div><div class="line">    htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>),</div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</div><div class="line">    cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>),</div><div class="line">    imageminSvgo = <span class="built_in">require</span>(<span class="string">'imagemin-svgo'</span>),</div><div class="line">    imageminJpegtran = <span class="built_in">require</span>(<span class="string">'imagemin-jpegtran'</span>),</div><div class="line">    imageminPngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 利用Hexo API 来生成博客内容，效果同在命令行运行：hexo g </span></div><div class="line"><span class="comment">// generate html with 'hexo generate'</span></div><div class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;);</div><div class="line">gulp.task(<span class="string">'generate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'generate'</span>, &#123;</div><div class="line">            <span class="attr">watch</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.exit();</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> cb()</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">        hexo.exit(err);</div><div class="line">        <span class="keyword">return</span> cb(err);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//压缩 js 文件</span></div><div class="line">gulp.task(<span class="string">'jsmin'</span>,  () =&gt;</div><div class="line">    gulp.src(<span class="string">'./public/js/src/**/*.js'</span>)</div><div class="line">        .pipe(jsmin())</div><div class="line">        <span class="comment">//.pipe(rename(&#123;suffix: '.min'&#125;))</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'./public/js'</span>));</div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//压缩 html 文件</span></div><div class="line">gulp.task(<span class="string">'htmlmin'</span>, () =&gt;</div><div class="line">    gulp.src(<span class="string">'./public/**/**/**/*.html'</span>)</div><div class="line">        .pipe(htmlmin(&#123;<span class="attr">collapseWhitespace</span>: <span class="literal">true</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 压缩图片</span></div><div class="line">gulp.task(<span class="string">'imagemin'</span>, () =&gt;</div><div class="line">    gulp.src(<span class="string">'./public/images/*'</span>)</div><div class="line">        .pipe(imagemin())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>))</div><div class="line">);</div><div class="line"></div><div class="line">imagemin([<span class="string">'./public/images/*.&#123;jpg,png&#125;'</span>], <span class="string">'./public/imagess'</span>, &#123;</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        imageminJpegtran(),</div><div class="line">        imageminPngquant(&#123;<span class="attr">quality</span>: <span class="string">'65-80'</span>&#125;)</div><div class="line">    ]</div><div class="line">&#125;);</div><div class="line">   </div><div class="line">imagemin([<span class="string">'./public/images/*.svg'</span>], <span class="string">'./public/images'</span>, &#123;</div><div class="line">    <span class="attr">use</span>: [</div><div class="line">        imageminSvgo(&#123;</div><div class="line">            <span class="attr">plugins</span>: [</div><div class="line">                &#123;<span class="attr">removeViewBox</span>: <span class="literal">false</span>&#125;</div><div class="line">            ]</div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//压缩 css</span></div><div class="line">gulp.task(<span class="string">'minify-css'</span>,() =&gt;</div><div class="line">     gulp.src(<span class="string">'./public/css/*.css'</span>)</div><div class="line">        .pipe(cleanCSS(&#123;<span class="attr">compatibility</span>: <span class="string">'ie8'</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public/css'</span>))</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">//默认任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">"generate"</span>,<span class="string">"minify-css"</span>,<span class="string">"jsmin"</span>,<span class="string">"htmlmin"</span>,<span class="string">"imagemin"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'gulp is finished!'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// gulp.task("watch",function() &#123;</span></div><div class="line"><span class="comment">//     gulp.watch("public/*",["default"]);</span></div><div class="line"><span class="comment">// &#125;);</span></div></pre></td></tr></table></figure>
<blockquote>
<p>之后命令行运行 gulp 即可压缩.因为将生成静态文件的步骤hexo generate 集成到了 gulp 中，所以我们以后可以先 gulp 然后 hexo deploy 提交。</p>
</blockquote>
<p>输出如下：</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/29994306.jpg" alt=""></p>
<p>效果如图：</p>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/21765926.jpg" alt=""></p>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="https://www.karlzhou.com/articles/compress-minify-hexo/" target="_blank" rel="external">优化Hexo博客 - 压缩 HTML、CSS、JS、IMG等</a></li>
</ul>
</blockquote>
<h2 id="3-添加音乐外链"><a href="#3-添加音乐外链" class="headerlink" title="3. 添加音乐外链"></a>3. 添加音乐外链</h2><blockquote>
<p>如果想在看博客的时候听一些喜欢的音乐怎么办呢？</p>
</blockquote>
<h3 id="1-可以直接在-markdown-中写入-HTML-代码（网易云，虾米均支持外链）"><a href="#1-可以直接在-markdown-中写入-HTML-代码（网易云，虾米均支持外链）" class="headerlink" title="1. 可以直接在 markdown 中写入 HTML 代码（网易云，虾米均支持外链）"></a>1. 可以直接在 markdown 中写入 HTML 代码（网易云，虾米均支持外链）</h3><h4 id="1-embed"><a href="#1-embed" class="headerlink" title="1. embed"></a>1. embed</h4> <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"//music.163.com/style/swf/widget.swf?sid=452986458&amp;type=2&amp;auto=1&amp;width=320&amp;height=66"</span> <span class="attr">width</span>=<span class="string">"340"</span> <span class="attr">height</span>=<span class="string">"86"</span>  <span class="attr">allowNetworking</span>=<span class="string">"all"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><embed src="//music.163.com/style/swf/widget.swf?sid=452986458&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all"></h2><h4 id="2-javascript"><a href="#2-javascript" class="headerlink" title="2. javascript"></a>2. javascript</h4><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.xiami.com/widget/player-single?uid=93773004&amp;sid=1769292418&amp;mode=js&quot;&gt;&lt;/script&gt;
</code></pre><script type="text/javascript" src="http://www.xiami.com/widget/player-single?uid=93773004&sid=1769292418&mode=js"></script>

<hr>
<h4 id="3-iframe"><a href="#3-iframe" class="headerlink" title="3. iframe"></a>3. iframe</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=452986458&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=452986458&auto=1&height=66"></iframe>


<hr>
<h3 id="5-HEXO-的插件-aplayer-dplayer-没有用过就不多说了"><a href="#5-HEXO-的插件-aplayer-dplayer-没有用过就不多说了" class="headerlink" title="5. HEXO 的插件 aplayer / dplayer (没有用过就不多说了)"></a>5. HEXO 的插件 aplayer / dplayer (没有用过就不多说了)</h3><blockquote>
<p>hexo-tag-aplayer:<a href="https://github.com/grzhan/hexo-tag-aplayer#upstream-issue" target="_blank" rel="external">https://github.com/grzhan/hexo-tag-aplayer#upstream-issue</a><br>hexo-tag-dplayer:<a href="https://github.com/NextMoe/hexo-tag-dplayer" target="_blank" rel="external">https://github.com/NextMoe/hexo-tag-dplayer</a></p>
</blockquote>
<h3 id="2-将音乐框添加到-slideBar"><a href="#2-将音乐框添加到-slideBar" class="headerlink" title="2. 将音乐框添加到 slideBar"></a>2. 将音乐框添加到 slideBar</h3><p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/75207769.jpg" alt="slideBar"></p>
<blockquote>
<p>其实方式是一样的，将外链的代码 粘贴到你要显示的地方即可,如图：</p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/75559141.jpg" alt="图片标题"></p>
<h3 id="1-点击出现心型特效，及背景线条"><a href="#1-点击出现心型特效，及背景线条" class="headerlink" title="1. 点击出现心型特效，及背景线条"></a>1. 点击出现心型特效，及背景线条</h3><p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/21220659.jpg" alt="图片标题"></p>
<h4 id="1-心型特效代码-love-js"><a href="#1-心型特效代码-love-js" class="headerlink" title="1. 心型特效代码 love.js"></a>1. 心型特效代码 love.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">.8</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;</div><div class="line">t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;</div><div class="line"><span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</div></pre></td></tr></table></figure>
<h4 id="2-背景特效代码-par-js"><a href="#2-背景特效代码-par-js" class="headerlink" title="2.背景特效代码 par.js"></a>2.背景特效代码 par.js</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">n,e,t</span>)</span>&#123;<span class="keyword">return</span> n.getAttribute(e)||t&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">document</span>.getElementsByTagName(n)&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=e(<span class="string">"script"</span>),o=t.length,i=t[o<span class="number">-1</span>];<span class="keyword">return</span>&#123;<span class="attr">l</span>:o,<span class="attr">z</span>:n(i,<span class="string">"zIndex"</span>,<span class="number">-1</span>),<span class="attr">o</span>:n(i,<span class="string">"opacity"</span>,<span class="number">.5</span>),<span class="attr">c</span>:n(i,<span class="string">"color"</span>,<span class="string">"0,0,0"</span>),<span class="attr">n</span>:n(i,<span class="string">"count"</span>,<span class="number">99</span>)&#125;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;c=u.width=<span class="built_in">window</span>.innerWidth||<span class="built_in">document</span>.documentElement.clientWidth||<span class="built_in">document</span>.body.clientWidth,a=u.height=<span class="built_in">window</span>.innerHeight||<span class="built_in">document</span>.documentElement.clientHeight||<span class="built_in">document</span>.body.clientHeight&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>)</span>&#123;l.clearRect(<span class="number">0</span>,<span class="number">0</span>,c,a);<span class="keyword">var</span> n,e,t,o,u,d,x=[w].concat(y);y.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;<span class="keyword">for</span>(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;c||i.x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>,i.ya*=i.y&gt;a||i.y&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>,l.fillRect(i.x<span class="number">-.5</span>,i.y<span class="number">-.5</span>,<span class="number">1</span>,<span class="number">1</span>),e=<span class="number">0</span>;e&lt;x.length;e++)n=x[e],i!==n&amp;&amp;<span class="literal">null</span>!==n.x&amp;&amp;<span class="literal">null</span>!==n.y&amp;&amp;(o=i.x-n.x,u=i.y-n.y,d=o*o+u*u,d&lt;n.max&amp;&amp;(n===w&amp;&amp;d&gt;=n.max/<span class="number">2</span>&amp;&amp;(i.x-=<span class="number">.03</span>*o,i.y-=<span class="number">.03</span>*u),t=(n.max-d)/n.max,l.beginPath(),l.lineWidth=t/<span class="number">2</span>,l.strokeStyle=<span class="string">"rgba("</span>+m.c+<span class="string">","</span>+(t+<span class="number">.2</span>)+<span class="string">")"</span>,l.moveTo(i.x,i.y),l.lineTo(n.x,n.y),l.stroke()));x.splice(x.indexOf(i),<span class="number">1</span>)&#125;),r(i)&#125;</div><div class="line"><span class="keyword">var</span> c,a,u=<span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>),m=t(),d=<span class="string">"c_n"</span>+m.l,l=u.getContext(<span class="string">"2d"</span>),r=<span class="built_in">window</span>.requestAnimationFrame||<span class="built_in">window</span>.webkitRequestAnimationFrame||<span class="built_in">window</span>.mozRequestAnimationFrame||<span class="built_in">window</span>.oRequestAnimationFrame||<span class="built_in">window</span>.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="built_in">window</span>.setTimeout(n,<span class="number">1e3</span>/<span class="number">45</span>)&#125;,x=<span class="built_in">Math</span>.random,w=&#123;<span class="attr">x</span>:<span class="literal">null</span>,<span class="attr">y</span>:<span class="literal">null</span>,<span class="attr">max</span>:<span class="number">2e4</span>&#125;;u.id=d,u.style.cssText=<span class="string">"position:fixed;top:0;left:0;z-index:"</span>+m.z+<span class="string">";opacity:"</span>+m.o,e(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(u),o(),<span class="built_in">window</span>.onresize=o,<span class="built_in">window</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;n=n||<span class="built_in">window</span>.event,w.x=n.clientX,w.y=n.clientY&#125;,<span class="built_in">window</span>.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;w.x=<span class="literal">null</span>,w.y=<span class="literal">null</span>&#125;;<span class="keyword">for</span>(<span class="keyword">var</span> y=[],s=<span class="number">0</span>;m.n&gt;s;s++)&#123;<span class="keyword">var</span> f=x()*c,h=x()*a,g=<span class="number">2</span>*x()<span class="number">-1</span>,p=<span class="number">2</span>*x()<span class="number">-1</span>;y.push(&#123;<span class="attr">x</span>:f,<span class="attr">y</span>:h,<span class="attr">xa</span>:g,<span class="attr">ya</span>:p,<span class="attr">max</span>:<span class="number">6e3</span>&#125;)&#125;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;i()&#125;,<span class="number">100</span>)&#125;();</div></pre></td></tr></table></figure>
<h2 id="4-其他特效如头像旋转等"><a href="#4-其他特效如头像旋转等" class="headerlink" title="4. 其他特效如头像旋转等"></a>4. 其他特效如头像旋转等</h2><blockquote>
<p>直接如图：</p>
</blockquote>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/42990326.jpg" alt="图片标题"><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.site-author-image</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</div><div class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</div><div class="line">  <span class="attribute">height</span>: $site-author-image-height;</div><div class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line"> </div><div class="line">  <span class="comment">/* 头像圆形 */</span></div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</div><div class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">50%</span>;</div><div class="line"></div><div class="line">   <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1s</span> ease-out;</div><div class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1s</span> ease-out;</div><div class="line">  <span class="attribute">transition</span>: transform <span class="number">1s</span> ease-out;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote class="blockquote-center"> 做自己喜欢的事情才会有动力 </blockquote>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="hexo" scheme="http:%5C%5Chexin.life/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http:%5C%5Chexin.life/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到 cmder</title>
    <link href="http:%5C%5Chexin.life/2017/06/06/title-10/"/>
    <id>http:\\hexin.life/2017/06/06/title-10/</id>
    <published>2017-06-05T17:01:56.000Z</published>
    <updated>2017-07-11T10:10:20.713Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="咸鱼也得做特别咸的那种"><a href="#咸鱼也得做特别咸的那种" class="headerlink" title=" 咸鱼也得做特别咸的那种 "></a><blockquote class="blockquote-center"> 咸鱼也得做特别咸的那种 </blockquote></h2><p>$ 最近电脑受不了了，折腾比较多,对于好多东西装了N次，在这里简单记录一下。$</p>
<h2 id="win-下命令行神器-cmder"><a href="#win-下命令行神器-cmder" class="headerlink" title="win 下命令行神器 cmder"></a><a href="http://cmder.net/" target="_blank" rel="external">win 下命令行神器 cmder</a></h2><p>在 win 下 的命令行神器 cmder，原始 cmd 难看不说，功能也少，这里推荐一下 cmder。可以直接下载 mini 版本，只有 6 mb 大小，完整版本包含了 git 等一堆功能，git 已经安装过了， 这里我就选择了 Mini 版。</p>
<blockquote>
<p>安装很简单，直接下载解压即可使用</p>
</blockquote>
<ul>
<li>不过为了方便，我们添加一下环境变量。 即可 Win + R 输入 cmder 唤出。<br><img src="http://or3233yyd.bkt.clouddn.com/17-6-6/11973826.jpg" alt=" Win + R 输入 cmder "></li>
<li><p>但是呢，好像还是不够方便，此时我们可以将它添加到我们的鼠标右键，像 git 巴蜀 here 那样。打开 cmder 终端输入下面命令</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cmder.exe /REGISTER ALL    <span class="comment">//如果没有权限 则输入 Cmder.exe /REGISTER USER</span></div></pre></td></tr></table></figure>
</li>
<li><p>然后是去除文字重叠， win + alt + p 或者点右下角图标选择设置 setting .</p>
</li>
<li>然后将 monospace 前面的对勾去掉即可。<br><img src="http://or3233yyd.bkt.clouddn.com/17-6-6/27521085.jpg" alt="将 monospace 前面的对勾去掉"></li>
<li>如果习惯 git 里面的 \$ 符号的话。可以打开 D:\cmder_mini\vendor\clink.lua 找到44行左右，将 符号改为 \$</li>
</ul>
<p><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/10257983.jpg" alt="enter image description here"></p>
<p>效果如图：<br><img src="http://or3233yyd.bkt.clouddn.com//17-6-6/75785359.jpg" alt="enter image description here"></p>
<blockquote>
<p> 基本目前所需要的功能差不多就这样。</p>
</blockquote>
<ul>
<li><a href="http://jeffjade.com/2016/01/13/2016-01-13-windows-software-cmder/" target="_blank" rel="external">晚晴幽草轩轩主</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="window" scheme="http:%5C%5Chexin.life/categories/window/"/>
    
    
      <category term="其他" scheme="http:%5C%5Chexin.life/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>px、em和rem</title>
    <link href="http:%5C%5Chexin.life/2017/05/23/title-9/"/>
    <id>http:\\hexin.life/2017/05/23/title-9/</id>
    <published>2017-05-23T14:06:40.000Z</published>
    <updated>2017-07-29T08:23:53.138Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><blockquote class="blockquote-center"> 再牛逼的梦想也挡不住傻逼似的坚持 ~ –菜鸟教程 </blockquote></p>
<h2 id="gt-偶然遇到一个原生JS去除-className-的技巧-Element-className-replace-‘testClassName’-‘realClassName’"><a href="#gt-偶然遇到一个原生JS去除-className-的技巧-Element-className-replace-‘testClassName’-‘realClassName’" class="headerlink" title="&gt; 偶然遇到一个原生JS去除 className 的技巧 Element.className.replace(‘testClassName’, ‘realClassName’);"></a>&gt; 偶然遇到一个原生JS去除 className 的技巧 Element.className.replace(‘testClassName’, ‘realClassName’);</h2><h2 id="px"><a href="#px" class="headerlink" title="px"></a>px</h2><blockquote>
<p>px : 相对长度单位。像素px是相对于显示器屏幕分辨率而言的。<br> 特点 :</p>
<ul>
<li>IE无法调整那些使用px作为单位的字体大小；</li>
<li>国外的大部分网站能够调整的原因在于其使用了 em 或 rem 作为字体单位；</li>
<li>Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。<h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</li>
<li>em的值并不是固定的；</li>
<li>em会继承父级元素的字体大小。</li>
</ul>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;   <span class="comment">/* 20px */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-class">.level-1</span>&#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0.5em</span>;   <span class="comment">/* 10px */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-class">.level-2</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;     <span class="comment">/* 20px */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.level-3</span> &#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0.5em</span>;      <span class="comment">/* 10px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><blockquote>
<p>rem是CSS3新增的一个相对单位（root  em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但<strong>相对的只是HTML根元素</strong>。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;   <span class="comment">/* 20px */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-class">.level-1</span>&#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0.5rem</span>;   <span class="comment">/* 10px */</span></div><div class="line">&#125; </div><div class="line"><span class="selector-class">.level-2</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;     <span class="comment">/* 40px */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.level-3</span> &#123; </div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0.5rem</span>;      <span class="comment">/* 10px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">font-size</span>:.<span class="number">875rem</span>;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注意： 选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。<br>px 与 rem 的选择？<br>对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 。<br>对于需要适配各种移动设备，则使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备。</p>
</blockquote>
<ul>
<li><a href="http://www.runoob.com/w3cnote/px-em-rem-different.html" target="_blank" rel="external">px、em、rem的区别及介绍-菜鸟教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="css" scheme="http:%5C%5Chexin.life/categories/css/"/>
    
    
      <category term="css 前端" scheme="http:%5C%5Chexin.life/tags/css-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>copy小插件</title>
    <link href="http:%5C%5Chexin.life/2017/05/06/title-8/"/>
    <id>http:\\hexin.life/2017/05/06/title-8/</id>
    <published>2017-05-06T07:12:20.000Z</published>
    <updated>2017-07-29T08:22:28.361Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><blockquote class="blockquote-center"> hacker 是擅于解决问题的人 </blockquote></p>
<h1 id="copy小插件"><a href="#copy小插件" class="headerlink" title="copy小插件"></a>copy小插件</h1><p>昨天舍友在写一个报告的时候，准确的来说是从网上搜罗~然而在 360doc 看到了一个满意的，无奈下载不了，也没法复制粘贴，于是就试了一下。</p>
<blockquote>
<p>然后我打开开发者工具(F12)<br>一行代码搞定<br><img src="http://i1.piimg.com/588926/c47501ec4bf4e55a.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//document.getElementsByTagName('body')[0].oncopy = null;</span></div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>].oncopy = <span class="string">''</span>;    <span class="comment">//获取body元素的oncpoy事件，直接置空~</span></div></pre></td></tr></table></figure></p>
<p>虽然很简单，但是还了一个页面它就失效了，可以再次打开开发者工具，再次置空就行了<br>有更好的办法或者一劳永逸的办法~希望大神指教一下</p>
</blockquote>
<p>这是从网上搜到的 chrome 插件的核心代码，制空 copy 事件，并取消页面复制粘贴等冒泡事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">oncopy</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(body)[<span class="number">0</span>].oncopy = <span class="string">''</span>;</div><div class="line">&#125;)();</div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"paste"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125;, <span class="literal">true</span>);       <span class="comment">// true - 事件句柄在捕获阶段执行</span></div><div class="line"></div><div class="line"><span class="comment">//for re-enabling 'copy'</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"copy"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125;, <span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//for re-enabling 'cut'</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"cut"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125;, <span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//for re-enabling 'right-clicks'</span></div><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"contextmenu"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125;, <span class="literal">true</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="JavaScript" scheme="http:%5C%5Chexin.life/categories/JavaScript/"/>
    
    
      <category term="插件" scheme="http:%5C%5Chexin.life/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JS函数闭包</title>
    <link href="http:%5C%5Chexin.life/2017/04/15/title-7/"/>
    <id>http:\\hexin.life/2017/04/15/title-7/</id>
    <published>2017-04-15T13:03:54.000Z</published>
    <updated>2017-05-04T15:37:52.486Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><blockquote class="blockquote-center">程序是写给人看的，顺带能在机器上运行</blockquote>



<h1 id="JS循环闭包："><a href="#JS循环闭包：" class="headerlink" title="JS循环闭包："></a>JS循环闭包：</h1><h2 id="应用一"><a href="#应用一" class="headerlink" title="应用一"></a>应用一</h2><h3 id="html-结构"><a href="#html-结构" class="headerlink" title="html 结构"></a>html 结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>test0<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>test4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 抛出问题:</span></div><div class="line">                此题的目的是想每次点击对应目标时弹出对应的数字下标 0~4,但实际是无论点击哪个目标都会弹出数字5</div><div class="line">            问题所在:</div><div class="line">                arr 中的每一项的 onclick 均为一个函数实例(Function 对象),这个函数实例也产生了一个闭包域,</div><div class="line">                这个闭包域引用了外部闭包域的变量,其 function scope 的 closure 对象有个名为 i 的引用,</div><div class="line">                外部闭包域的私有变量内容发生变化,内部闭包域得到的值自然会发生改变</div><div class="line">            */</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">myClosure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">                arr[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    alert(i);     <span class="comment">//无论点击哪一个均会弹出5</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">解决方法一：</div><div class="line">        增加若干个对应的闭包域空间(	这里采用的是匿名函数),专门用来存储原先需要引用的内容(下标),不过只限于基本类型(基本类型值传递,对象类型引用传递) </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClosure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">                (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;  </div><div class="line">                arr[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    alert(j);     </div><div class="line">                    &#125;</div><div class="line">                &#125;)(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*思路：将下标作为对象属性(name:"i",value:i的值)添加到每个数组项(p对象)中*/</span></div><div class="line">此时当前 p 对象的 i 属性并不是对循环体的 i 变量的引用,而是一个独立 p 对象的属性,属性值在声明的时候就确定了(基本类型的值都是存在栈中的,当有一个基本类型变量声明其等于另一个基本变量时,此时并不是两个基本类型变量都指向一个值,而是各自有各自的值,但值是相等的)</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">myClosure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">                arr[i].i = i;</div><div class="line">                arr[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    alert(<span class="keyword">this</span>.i);     </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*解决思路:</span></div><div class="line">与解决办法一有点相似但却有点不太相似.</div><div class="line">相似点:同样是增加若干个对应的闭包域空间用来存储下标</div><div class="line">不同点:解决办法一是在新增的匿名闭包空间内完成事件的绑定,而此例是将事件绑定在新增的匿名函数返回的函数上。</div><div class="line">此时绑定的函数中的 function scope 中的 closure 对象的 引用 arg 是指向将其返回的匿名函数的私有变量 arg*/</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClosure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;								</div><div class="line">                arr[i].onclick = (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</div><div class="line">                    </div><div class="line">                    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">                        alert(j);     </div><div class="line">                    &#125;</div><div class="line">                &#125;)(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//思路同方法一：</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myClosure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">            (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> tmp = i;</div><div class="line">                    arr[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;						</div><div class="line">                    alert(tmp);    </div><div class="line">                &#125;</div><div class="line">            &#125;)();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法五："><a href="#方法五：" class="headerlink" title="方法五："></a>方法五：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法五：es6新语法，let为一个块级作用域</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myClosure</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">            arr[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                alert(i);     </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="非循环闭包："><a href="#非循环闭包：" class="headerlink" title="非循环闭包："></a>非循环闭包：</h1><h2 id="应用一："><a href="#应用一：" class="headerlink" title="应用一："></a>应用一：</h2><h3 id="html-结构-1"><a href="#html-结构-1" class="headerlink" title="html 结构"></a>html 结构</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;p id="help"&gt;Helpful notes will appear here&lt;/p&gt;</div><div class="line">    &lt;p&gt;E-mail:</div><div class="line">        &lt;input type="text" id="email" name="email"&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">    &lt;p&gt;Name:</div><div class="line">        &lt;input type="text" id="name" name="name"&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">    &lt;p&gt;Age:</div><div class="line">        &lt;input type="text" id="age" name="age"&gt;</div><div class="line">    &lt;/p&gt;</div></pre></td></tr></table></figure>
<h3 id="闭包解决-input-框聚焦动态提示"><a href="#闭包解决-input-框聚焦动态提示" class="headerlink" title="闭包解决 input 框聚焦动态提示"></a>闭包解决 input 框聚焦动态提示</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showHelp</span>(<span class="params">help</span>) </span>&#123;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'help'</span>).innerHTML = help;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">makeHelpCallback</span>(<span class="params">help</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;     <span class="comment">//形成闭包</span></div><div class="line">                showHelp(help);</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setupHelp</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> helpText = [&#123;</div><div class="line">                <span class="string">'id'</span>: <span class="string">'email'</span>,</div><div class="line">                <span class="string">'help'</span>: <span class="string">'Your e-mail address'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="string">'id'</span>: <span class="string">'name'</span>,</div><div class="line">                <span class="string">'help'</span>: <span class="string">'Your full name'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="string">'id'</span>: <span class="string">'age'</span>,</div><div class="line">                <span class="string">'help'</span>: <span class="string">'Your age (you must be over 16)'</span></div><div class="line">            &#125;];</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; helpText.length; i++) &#123;</div><div class="line">                <span class="keyword">var</span> item = helpText[i];</div><div class="line">                <span class="built_in">document</span>.getElementById(item.id).onfocus = makeHelpCallback(item.help);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setupHelp();</div></pre></td></tr></table></figure>
<h2 id="应用二"><a href="#应用二" class="headerlink" title="应用二"></a>应用二</h2><h3 id="html-结构-2"><a href="#html-结构-2" class="headerlink" title="html 结构"></a>html 结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Some paragraph text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>some heading 1 text<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>some heading 2 text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"size-12"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"size-14"</span>&gt;</span>14<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"size-16"</span>&gt;</span>16<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">  body &#123;</div><div class="line">  font-family: Helvetica, Arial, sans-serif;</div><div class="line">  font-size: 12px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">h1 &#123;</div><div class="line">  font-size: 1.5em;</div><div class="line">&#125;</div><div class="line">h2 &#123;</div><div class="line">  font-size: 1.2em;</div><div class="line">&#125;```javascript</div><div class="line">      function makeSizer(size) &#123;</div><div class="line">      return function() &#123;</div><div class="line">        document.body.style.fontSize = size + 'px';</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var size12 = makeSizer(12);</div><div class="line">    var size14 = makeSizer(14);</div><div class="line">    var size16 = makeSizer(16);</div><div class="line"></div><div class="line">    document.getElementById('size-12').onclick = size12;</div><div class="line">    document.getElementById('size-14').onclick = size14;</div><div class="line">    document.getElementById('size-16').onclick = size16;</div></pre></td></tr></table></figure>
<blockquote>
<p>From:</p>
<ul>
<li><a href="https://developer.mozilla.org/cn/docs/Web/JavaScript/Closures" target="_blank" rel="external">闭包-MDN</a> </li>
<li><a href="https://segmentfault.com/a/1190000003818163" target="_blank" rel="external">9种办法解决JS循环闭包面试经典题之for循环</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML 5 Web 存储及WEB应用缓存</title>
    <link href="http:%5C%5Chexin.life/2017/04/15/title-6/"/>
    <id>http:\\hexin.life/2017/04/15/title-6/</id>
    <published>2017-04-15T12:51:20.000Z</published>
    <updated>2017-04-18T11:54:03.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="俩种在客户端储存数据的方法"><a href="#俩种在客户端储存数据的方法" class="headerlink" title="俩种在客户端储存数据的方法"></a>俩种在客户端储存数据的方法</h1><ul>
<li>localStorage - 没有时间限制的数据存储</li>
<li>sessionStorage - 针对 session 的数据存储</li>
</ul>
<p>之前这些都是由cookie完成的，但是cookie不适合大量数据的存储，因为他们由每个服务器的请求来传递，使得cookie速度慢而且效率不高。</p>
<p>在HTML5中，数据不是由每个服务器请求来传递的，而是只有在请求时使用数据，使得在不影响网站性能的情况下存储大量数据。对于不同的网站，sh数据存储于不同的区域，而且一个网站只能访问其自身的数据。HTML5 通过JavaScript来存储和访问数据。</p>
<p>#localStorage 方法</p>
<ul>
<li>例子对用户访问页面的次数进行计数：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="keyword">if</span> (localStorage.pagecount)</div><div class="line">  &#123;</div><div class="line">  localStorage.pagecount=<span class="built_in">Number</span>(localStorage.pagecount) +<span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">  localStorage.pagecount=<span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"Visits "</span>+ localStorage.pagecount + <span class="string">" time(s)."</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h1 id="sessionStorage-方法"><a href="#sessionStorage-方法" class="headerlink" title="sessionStorage 方法"></a>sessionStorage 方法</h1><blockquote>
<p>sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</p>
</blockquote>
<ul>
<li>对用户在当前 session 中访问页面的次数进行计数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="keyword">if</span> (sessionStorage.pagecount)</div><div class="line">  &#123;</div><div class="line">  sessionStorage.pagecount=<span class="built_in">Number</span>(sessionStorage.pagecount) +<span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">  sessionStorage.pagecount=<span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"Visits "</span>+sessionStorage.pagecount+<span class="string">" time(s) this session."</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="HTML-5-应用程序缓存"><a href="#HTML-5-应用程序缓存" class="headerlink" title="HTML 5 应用程序缓存"></a>HTML 5 应用程序缓存</h1><blockquote>
<p>使用 HTML5，通过创建 cache manifest 文件，可以轻松地创建 web 应用的离线版本。</p>
<p>什么是应用程序缓存（Application Cache）？ HTML5 引入了应用程序缓存，这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问。<br>应用程序缓存为应用带来三个优势： </p>
<ul>
<li>离线浏览：用户可在应用离线时使用它们 </li>
<li>速度：已缓存资源加载得更快 </li>
<li>减少服务器负载：浏览器将只从服务器下载更新过或更改过的资源。 </li>
</ul>
</blockquote>
<p>浏览器支持 所有主流浏览器均支持应用程序缓存，除了Internet Explorer。</p>
<p><strong>如需启用应用程序缓存，请在文档的 <html> 标签中包含 manifest 属性：</html></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"demo.appcache"</span>&gt;</span></span></div><div class="line">//something</div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>每个指定了 manifest 的页面在用户对其访问时都会被缓存。如果未指定 manifest 属性，则页面不会被缓存（除非在 manifest 文件中直接指定了该页面）。<br>manifest 文件的建议的文件扩展名是：”.appcache”。<br>请注意，manifest 文件需要配置正确的 MIME-type，即 “text/cache-manifest”。必须在 web 服务器上进行配置。</p>
</blockquote>
<hr>
<blockquote>
<p><strong>Manifest 文件</strong><br>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。<br>manifest 文件可分为三个部分：</p>
</blockquote>
<hr>
<blockquote>
<ol>
<li><strong>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存</strong></li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NETWORK:</div><div class="line">login.asp</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>2.NETWORK ：在此标题下列出的文件需要与服务器的连接，且不会被缓存</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NETWORK:       # NETWORK 小节规定文件 "login.asp" 永远不会被缓存，且离线时是不可用的：</div><div class="line">login.asp  </div><div class="line">/*------------------------------*/</div><div class="line">NETWORK:</div><div class="line">*                        #可以使用星号来指示所有其他资源/文件都需要因特网连接：</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>3. FALLBACK：在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FALLBACK:</div><div class="line">/html5/ /404.html    #第一个 URI 是资源，第二个是替补。</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.w3school.com.cn/html5/html_5_app_cache.asp" target="_blank" rel="external">HTML5 Web应用程序缓存-w3school</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
    
      <category term="[object Object]" scheme="http:%5C%5Chexin.life/tags/object-Object/"/>
    
  </entry>
  
  <entry>
    <title>cookie和session</title>
    <link href="http:%5C%5Chexin.life/2017/04/15/title-5/"/>
    <id>http:\\hexin.life/2017/04/15/title-5/</id>
    <published>2017-04-15T05:53:19.000Z</published>
    <updated>2017-04-18T11:53:51.330Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><blockquote class="blockquote-center">相信你所相信的，坚持你所坚持的</blockquote>

<h1 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h1><blockquote>
<p>HTTP 是一个无状态协议，所以客户端每次发出请求时，下一次请求无法得知上一次请求所包含的状态数据，如何能把一个用户的状态数据关联起来呢？即大多都是利用 cookie、session 实现。如浏览器自动保存密码，记住登录状态，网页换肤，新手引导等下次不再提醒功能（我就说我以前换网吧玩总得去禁用那些引导）。<br>比如在淘宝的某个页面中，你进行了登陆操作。当你跳转到商品页时，服务端如何知道你是已经登陆的状态？<br>因此产生了 cookie 来解决这门问题。<a id="more"></a></p>
</blockquote>
<p> <img src="http://harttle.com/assets/img/blog/cookie.png" alt="cookie的传输"></p>
<ul>
<li>服务器向客户端发送 cookies</li>
<li>通常使用 HTTP 协议规定的 set-cookie 头操作。</li>
<li>规范规定 cookies 的格式为vlaue = name 格式，且必须包含这部分</li>
<li>浏览器将 cookies 保存</li>
<li><strong>每次浏览器向服务器发送请求都会发送 cookies</strong></li>
</ul>
<h2 id="cookies参数"><a href="#cookies参数" class="headerlink" title="cookies参数"></a>cookies参数</h2><ul>
<li><strong>httpOnly:浏览器下不允许脚本操作document.cookies去更改 cookies,一般情况下设置为 true，可以避免 xss 攻击拿到 cookies</strong></li>
<li>path: 表示 cookies 影响到的路径，匹配该路径才会发送 cookies</li>
<li><strong>expires、maxAge</strong>: 告诉浏览器该 cookies 什么时候过期，采用UTC格式的时间，是 cookies  多久后过期的相对时间。（<strong>删除 cookies，在服务端将 maxAge 设为0，或者在客户端将 expires 设为一个过去的时间</strong>），如果不设置这俩个选项，会产生 session cookies，session cookies 是即时的，当用户关闭浏览器时，会自动清除，一般用来保存 session 的 session_id.<h2 id="cookies的缺点"><a href="#cookies的缺点" class="headerlink" title="cookies的缺点"></a>cookies的缺点</h2></li>
<li>大小和数目被确定，浏览器对一个域的cookies有上限要求，且<strong>每个 cookies 大小不得超过 4kb</strong>。</li>
<li>存在安全性问题，容易被人拦截。（考虑到安全方面，应使用较安全的session）</li>
<li>需要指定域，不能够跨域</li>
<li>cookies 数据太多会影响传输效率，浪费带宽</li>
<li>有些浏览器禁用 cookies 或者部分手机不支持 cookies<br>广告商可以通过cookies了解到用户经常访问哪些网站，进而提供相应的广告等。</li>
</ul>
<h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><blockquote>
<p>cookies 虽然使用方便,但是 cookies 中所有的数据都可以在客户端被更改，数据很容易被伪造，因此一些重要的数据不能放cookies 中，cookies 数据太多也会影响传输效率，因此产生了 session，session 数据保留在服务器端。(但是当访问增多，会比较占用服务器的性能，考虑到性能方面，减少使用session)</p>
</blockquote>
<hr>
<blockquote>
<p>当你浏览一个网页时，服务端随机产生一个 1024 比特长的字符串，然后存在你 cookie 中的 connect.sid字段中。当你下次访问时，cookie 会带有这个字符串，然后浏览器就知道你是上次访问过的某某某，然后从服务器的存储中对比取出上次记录在你身上的数据。由于字符串是随机产生的，而且位数足够多，所以也不担心有人能够伪造。</p>
</blockquote>
<hr>
<ul>
<li>session 的运作通过一个 session_id 来进行。session_id 通常是存放在客户端的 cookie  中，用户提交页面时，会将这一  SessionID 提交到服务器端，来存取 Session 数据。此时用户禁用cookies，session也会失效。</li>
<li>但是session并不是完全依赖cookie，服务器可以通过URL重写的方式来传递session_id.</li>
</ul>
<p>———- &gt; 整理自：</p>
<blockquote>
<ul>
<li><a href="https://github.com/alsotang/node-lessons/tree/master/lesson16" target="_blank" rel="external">cookies 和 session</a></li>
<li><a href="http://www.cnblogs.com/shiyangxt/articles/1305506.html" target="_blank" rel="external">cookies 和 session 的详解</a></li>
<li><a href="http://harttle.com/2015/08/10/cookie-session.html" target="_blank" rel="external">cookie 和 session 的机制与安全</a></li>
<li><a href="http://caibaojian.com/477.html" target="_blank" rel="external">认识cookie与session的区别与应用</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;相信你所相信的，坚持你所坚持的&lt;/blockquote&gt;

&lt;h1 id=&quot;cookies&quot;&gt;&lt;a href=&quot;#cookies&quot; class=&quot;headerlink&quot; title=&quot;cookies&quot;&gt;&lt;/a&gt;cookies&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;HTTP 是一个无状态协议，所以客户端每次发出请求时，下一次请求无法得知上一次请求所包含的状态数据，如何能把一个用户的状态数据关联起来呢？即大多都是利用 cookie、session 实现。如浏览器自动保存密码，记住登录状态，网页换肤，新手引导等下次不再提醒功能（我就说我以前换网吧玩总得去禁用那些引导）。&lt;br&gt;比如在淘宝的某个页面中，你进行了登陆操作。当你跳转到商品页时，服务端如何知道你是已经登陆的状态？&lt;br&gt;因此产生了 cookie 来解决这门问题。
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTTP" scheme="http:%5C%5Chexin.life/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>每个人都需要的中文排版指南（转）</title>
    <link href="http:%5C%5Chexin.life/2017/04/11/title-4/"/>
    <id>http:\\hexin.life/2017/04/11/title-4/</id>
    <published>2017-04-11T12:06:00.000Z</published>
    <updated>2017-05-10T16:26:39.134Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>前几天被朋友吐槽排版太烂了，今天偶然看到这篇文章，然后就转载了过来，由于转载原因可能文章没有原文格式美观，有兴趣请点击链接查看原文。</p>
<ul>
<li>原文转载自<a href="http://stormzhang.com/2017/03/16/chinese-copywriting/" target="_blank" rel="external">stormzhang</a></li>
</ul>
<a id="more"></a>
 <blockquote class="blockquote-center">相信你所相信的，坚持你所坚持的</blockquote>



<h1 id="每个人都需要的中文排版指南"><a href="#每个人都需要的中文排版指南" class="headerlink" title="每个人都需要的中文排版指南"></a>每个人都需要的中文排版指南</h1><blockquote>
<p>之前有不少人在我公众号留言，说看我的排版很舒服，求指导。</p>
<p>我不是一个专业的写字人，我是程序员出身，在写代码的时候有点小洁癖，尽量会把每个细节做到更好，所以我在公众号写作的时候一样会注重每个细节，我认为排版是对写作最基本的要求，所以当我决定要在公众号写作的时候，就非常在意排版，并且一直在改进，</p>
<p>可惜的是，我看到无数不管是写博客还是写公众号的作者，从不会注意自己的排版，有时候看到一篇好的文章，如果排版很烂，会觉得很可惜。</p>
<p>公众号「小道消息」的作者 Fenng<br>曾不止一次强调排版的重要性，对此我也非常认同，任何说不拘小节，注重内容就行了的反驳都是借口，我自己在我的小密圈中也一直强调排版的重要性，很多圈友发布的动态无一排版都太烂，为此，我在小密圈中写下了这么一篇排版指南，真心希望所有的写字人都能注意下自己的排版。</p>
<p>这篇文章适用于所有编辑、作家、撰稿人、公众号作者、博主等，甚至适合所有人，因为人的一生难免避免不了写作。</p>
</blockquote>
<h1 id="1-空格"><a href="#1-空格" class="headerlink" title="1. 空格"></a>1. 空格</h1><blockquote>
<p>我每次看到网页上的中文字和英文、数字、符号挤在一起，就会坐立不安，忍不住想在他们之间加个空格。</p>
<p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34<br>岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。」</p>
</blockquote>
<ul>
<li>中英文之间需要加空格</li>
</ul>
<blockquote>
<p>eg. 大家可以搜索公众号 AndroidDeveloper 或者 googdev 关注我。</p>
</blockquote>
<ul>
<li>中文与数字之间需要加空格</li>
</ul>
<blockquote>
<p>eg. 不知不觉，我都快 30 岁了。</p>
</blockquote>
<ul>
<li>数字与单位之间需要加空格</li>
</ul>
<blockquote>
<p>eg. 我有一块 20 TB 的硬盘，鬼知道我是怎么用完的。</p>
</blockquote>
<ul>
<li>完整的英文整句时标点与单词之间需要加空格</li>
</ul>
<blockquote>
<p>eg. Stay hungry, stay foolish.</p>
<p>但是也有一些例外。</p>
</blockquote>
<ul>
<li>度的标志、百分号不加空格</li>
</ul>
<blockquote>
<p>eg. 今天气温有 30° 的高温。 eg. 据统计，关注公众号 AndroidDeveloper 的读者中有 80% 是长得好看的。</p>
</blockquote>
<ul>
<li>全角标点与其他字符之间不加空格</li>
</ul>
<blockquote>
<p>eg. 大家好，我是 stormzhang，请多多关照。</p>
</blockquote>
<h1 id="2-标点"><a href="#2-标点" class="headerlink" title="2. 标点"></a>2. 标点</h1><blockquote>
<p>说到标点，不得不说下全角和半角，很多人可能不了解全角和半角的概念，这里顺便介绍下。</p>
<p>全角和半角是英文和中文的编码规范不同遗留下的问题，简单来说，全角占两个字节，半角占一个字节，你可以理解成中文汉字是全角，英文字母是半角，不过半角全角主要是针对标点符号来说的，中文标点占两个字节，英文标点占一个字节。体现在排版上的差异就是，全角字符屏幕打印宽度是两个，而半角字符屏幕打印宽度是一个，如中文逗号和英文逗号他们的显示分别是「，」和「,」。</p>
</blockquote>
<ul>
<li>使用全角中文标点，中文排版中所有的标点都应该使用中文全角中文标点</li>
</ul>
<blockquote>
<p>eg. 大家好，我是 stormzhang。</p>
</blockquote>
<ul>
<li>遇到英文整句、特殊名词时使用半角标点。</li>
</ul>
<blockquote>
<p>eg. 乔布斯说过：「Stay hungry, stay foolish.」 eg. Facebook, Inc.</p>
</blockquote>
<ul>
<li>使用直角引号「我国国家标准要求弯引号，但是个人建议在新媒体排版时使用直角引号」。</li>
</ul>
<blockquote>
<p>eg. 你竟然不知道「帅比张」？</p>
</blockquote>
<ul>
<li>如果引号再使用引号使用直角双引号。</li>
</ul>
<blockquote>
<p>eg. 我质问他，「你难道忘记『帅比张』了么？」</p>
</blockquote>
<h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h1><blockquote>
<p>除以上之外，还有一些其他标准推荐大家使用的。</p>
</blockquote>
<ul>
<li>英文名词首字母尽量大写</li>
</ul>
<blockquote>
<p>eg. Google、Android、Facebook</p>
</blockquote>
<ul>
<li>专有名词使用正确的大小写</li>
</ul>
<blockquote>
<p>  eg. GitHub、iOS、iPhone 6s、MacBook Pro</p>
</blockquote>
<ul>
<li>首行不要缩进</li>
</ul>
<blockquote>
<p>这点可能有人不同意，但是我要在这里解释下，在说明之前我们必须弄明白「首行缩进」的目的是什么。</p>
<p>「每段之前空两格」是我们从小学写作文就养成的习惯，也是正式文体的格式要求，其目的是为了区分自然段。</p>
<p>但是像我们现在接触的阅读，都是没有固定的格式要求的，如微信公众号、电子文档等，所以大家一般都采用「空出一行」进行自然段与自然段之间的区分，这种写作方式非常省事，而且很整齐。</p>
<p>所以，我认为这种应该是最科学的方式，只要没有明确的格式要求，写作的排版无须首行缩进。</p>
<p>最后，你可能会问，以上这些原则是业界标准么？我不敢保证，但是你不妨看下 「Apple 中国官网」、「Microsoft<br>中国官网」、公众号「小道消息」、「MacTalk」等的排版，基本都是使用以上排版标准。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天被朋友吐槽排版太烂了，今天偶然看到这篇文章，然后就转载了过来，由于转载原因可能文章没有原文格式美观，有兴趣请点击链接查看原文。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原文转载自&lt;a href=&quot;http://stormzhang.com/2017/03/16/chinese-copywriting/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stormzhang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其他" scheme="http:%5C%5Chexin.life/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="转载" scheme="http:%5C%5Chexin.life/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记(Placeholder及CSS_hack)</title>
    <link href="http:%5C%5Chexin.life/2017/03/31/title-2/"/>
    <id>http:\\hexin.life/2017/03/31/title-2/</id>
    <published>2017-03-31T15:09:45.000Z</published>
    <updated>2017-04-15T05:39:55.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><blockquote class="blockquote-center">相信你所相信的，坚持你所坚持的</blockquote></p>
<h1 id="IE8以下图片出现蓝色边框"><a href="#IE8以下图片出现蓝色边框" class="headerlink" title="IE8以下图片出现蓝色边框"></a>IE8以下图片出现蓝色边框</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">img&#123;</div><div class="line">        <span class="attr">border</span>:<span class="number">0</span>;  <span class="comment">/*或者border:none;*/</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="如何使文本以大写字母开头？"><a href="#如何使文本以大写字母开头？" class="headerlink" title="如何使文本以大写字母开头？"></a>如何使文本以大写字母开头？</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">text-transform:capitalize;</div></pre></td></tr></table></figure>
<h1 id="强制设置以最新版本IE渲染"><a href="#强制设置以最新版本IE渲染" class="headerlink" title="强制设置以最新版本IE渲染"></a>强制设置以最新版本IE渲染</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span> /&gt;</div><div class="line">    <span class="comment">//我写的页面在IE8之下全部乱掉了，用这个强制用最新版本的IE渲染</span></div></pre></td></tr></table></figure>
<h1 id="chrome浏览器点击input框时出现边框"><a href="#chrome浏览器点击input框时出现边框" class="headerlink" title="chrome浏览器点击input框时出现边框"></a>chrome浏览器点击input框时出现边框</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//虽然我觉得还挺好看的--! </span></div><div class="line">input&#123;    <span class="attr">outline</span>:none; <span class="comment">//outline:0;    &#125;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h1 id="IE8及以下不支持Placeholder解决方案（基于JQ）"><a href="#IE8及以下不支持Placeholder解决方案（基于JQ）" class="headerlink" title="IE8及以下不支持Placeholder解决方案（基于JQ）"></a><a href="http://www.cnblogs.com/digdeep/p/4424487.html" target="_blank" rel="external">IE8及以下不支持Placeholder解决方案</a>（基于JQ）</h1><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">    &lt;html&gt;</div><div class="line">    &lt;header&gt;</div><div class="line">    &lt;meta charset="utf-8"&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;style type="text/css"&gt;</div><div class="line">         *&#123;margin:0;padding:0;&#125;</div><div class="line">        form &#123;margin:50px;&#125;</div><div class="line">        input &#123;display:block;margin:0 0 6px 0;&#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;/header&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;form&gt;</div><div class="line">            用户名：&lt;input name="name" placeholder="请输入用户名"/&gt;</div><div class="line">            密码：&lt;input name="password" placeholder="请输入登陆密码"/&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">            &lt;script type="text/javascript" src="jquery-1.11.1.min.js"&gt;&lt;/script&gt;</div><div class="line">            &lt;script type="text/javascript"&gt;</div><div class="line">            $(function()&#123;</div><div class="line">                function placeholderSupport() &#123;    // 判断浏览器是否支持 placeholder</div><div class="line">                    return 'placeholder' in document.createElement('input');</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                if(!placeholderSupport())&#123;</div><div class="line">                    $(document).on('focus', '[placeholder]',function() &#123;</div><div class="line">                        var input = $(this);</div><div class="line">                        if (input.val() == input.attr('placeholder')) &#123;</div><div class="line">                            input.val('');</div><div class="line">                            input.removeClass('placeholder');</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                    $(document).on('blur', '[placeholder]',function() &#123;</div><div class="line">                        var input = $(this);</div><div class="line">                        if (input.val() == '' || input.val() == input.attr('placeholder')) &#123;</div><div class="line">                            input.addClass('placeholder');</div><div class="line">                            input.val(input.attr('placeholder'));</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                    $('[placeholder]').blur();</div><div class="line">                &#125;;</div><div class="line">            &#125;);</div><div class="line">    &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;/html&gt;</div></pre></td></tr></table></figure>
</code></pre><hr>
<h1 id="常见CSS-hack"><a href="#常见CSS-hack" class="headerlink" title="常见CSS hack"></a>常见<a href="http://baike.baidu.com/item/css%20hack" target="_blank" rel="external">CSS hack</a></h1><p><em>不管是什么方法，书写的顺序都是Firefox的写在前面，IE7的写在中间，IE6的写在最后</em><br><strong>（1）方式一 条件注释法</strong></p>
<p> <em>只在IE下生效</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> IE]&gt;</div><div class="line">    这段文字只在IE浏览器显示</div><div class="line">    &lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p><em>只在IE6下生效</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> IE <span class="number">6</span>]&gt;</div><div class="line">    这段文字只在IE6浏览器显示</div><div class="line">    &lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p><em>只在IE6以上版本生效</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> gte IE <span class="number">6</span>]&gt;</div><div class="line">    这段文字只在IE6以上(包括)版本IE浏览器显示</div><div class="line">    &lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p><em>只在IE8上不生效</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> ! IE <span class="number">8</span>]&gt;</div><div class="line">    这段文字在非IE8浏览器显示</div><div class="line">    &lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p><em>非IE浏览器生效</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--[<span class="keyword">if</span> !IE]&gt;</div><div class="line">    这段文字只在非IE浏览器显示</div><div class="line">    &lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<p><strong>（2）方式二 类内属性前缀法</strong></p>
<p>在标准模式中：</p>
<ul>
<li>“-″减号是IE6专有的hack</li>
<li>“\9″ IE6/IE7/IE8/IE9/IE10都生效</li>
<li>“\0″ IE8/IE9/IE10都生效，是IE8/9/10的hack</li>
<li>“\9\0″ 只对IE9/IE10生效，是IE9/10的hack</li>
</ul>
<ul>
<li>IE6能识别 *，但不能识别 !important</li>
<li>IE7能识别 *，也能识别!important</li>
<li>FF不能识别 *，但能识别!important,下划线_</li>
<li>IE6支持下划线</li>
<li>IE7和firefox均不支持下划线</li>
</ul>
<p><strong>（3）CSS hack方式三：选择器前缀法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">*html     <span class="comment">//*前缀只对IE6生效</span></div><div class="line">    *+html    <span class="comment">//*+前缀只对IE7生效 </span></div><div class="line">    @media screen\<span class="number">9</span>&#123;...&#125;    <span class="comment">//只对IE6/7生效</span></div><div class="line">    @media \<span class="number">0</span>screen &#123;body &#123; <span class="attr">background</span>: red; &#125;&#125;    <span class="comment">//只对IE8有效</span></div><div class="line">    @media \<span class="number">0</span>screen\,screen\<span class="number">9</span>&#123;body &#123; <span class="attr">background</span>: blue; &#125;&#125;    <span class="comment">//只对IE6/7/8有效</span></div><div class="line">    @media screen\<span class="number">0</span> &#123;body &#123; <span class="attr">background</span>: green; &#125;&#125;    <span class="comment">//只对IE8/9/10有效</span></div><div class="line">    @media screen and (min-width:<span class="number">0</span>\<span class="number">0</span>) &#123;body &#123; <span class="attr">background</span>: gray; &#125;&#125;     <span class="comment">//只对IE9/10有效</span></div><div class="line">    @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) &#123;body &#123; <span class="attr">background</span>: orange; &#125;&#125;     <span class="comment">//只对IE10有效等等</span></div></pre></td></tr></table></figure>
<p><strong>以: “ #demo {width:100px;} “为例;</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#demo &#123;width:100px;&#125; /*被FIREFOX,IE6,IE7执行.*/</div><div class="line">    *html #demo &#123;width:120px;&#125; /*会被IE6执行,之前的定义会被后来的覆盖,所以#demo的宽度在IE6就为120px; */</div><div class="line">    *+html #demo &#123;width:130px;&#125; /*会被IE7执行*/</div><div class="line">    所以最后,#demo的宽度在三个浏览器的解释为: FIREFOX:100px; ie6:120px; ie7:130px;</div></pre></td></tr></table></figure>
<p><strong>IE8 最新css hack：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"\9"</span>　例:<span class="string">"border:1px\9;"</span>    <span class="comment">//这里的"\9"可以区别所有IE和FireFox.（只针对IE9 Hack）</span></div><div class="line">        <span class="string">"\0"</span>　<span class="comment">//IE8识别，--&gt;IE6、IE7不能.</span></div><div class="line">        <span class="string">"*"</span>　<span class="comment">//IE6、IE7可以识别.--&gt;IE8、FireFox不能.</span></div><div class="line">        <span class="string">"_"</span>　<span class="comment">//IE6可以识别"_",--&gt;IE7、IE8、FireFox不能.</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Placeholder源自网上资料，点击标题即进入原网址，本人新手，没怎么用过hack，从百度百科整理一部分，作为以后查询方便，如果有什么问题，希望大神多多指点。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;相信你所相信的，坚持你所坚持的&lt;/blockquote&gt;&lt;/p&gt;
&lt;h1 id=&quot;IE8以下图片出现蓝色边框&quot;&gt;&lt;a href=&quot;#IE8以下图片出现蓝色边框&quot; class=&quot;headerlink&quot; title=&quot;IE8以下图片出现蓝色边框&quot;&gt;&lt;/a&gt;IE8以下图片出现蓝色边框&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;img&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;border&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;/*或者border:none;*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;如何使文本以大写字母开头？&quot;&gt;&lt;a href=&quot;#如何使文本以大写字母开头？&quot; class=&quot;headerlink&quot; title=&quot;如何使文本以大写字母开头？&quot;&gt;&lt;/a&gt;如何使文本以大写字母开头？&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;text-transform:capitalize;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;强制设置以最新版本IE渲染&quot;&gt;&lt;a href=&quot;#强制设置以最新版本IE渲染&quot; class=&quot;headerlink&quot; title=&quot;强制设置以最新版本IE渲染&quot;&gt;&lt;/a&gt;强制设置以最新版本IE渲染&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;meta http-equiv=&lt;span class=&quot;string&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; content=&lt;span class=&quot;string&quot;&gt;&quot;IE=edge&quot;&lt;/span&gt; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//我写的页面在IE8之下全部乱掉了，用这个强制用最新版本的IE渲染&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;chrome浏览器点击input框时出现边框&quot;&gt;&lt;a href=&quot;#chrome浏览器点击input框时出现边框&quot; class=&quot;headerlink&quot; title=&quot;chrome浏览器点击input框时出现边框&quot;&gt;&lt;/a&gt;chrome浏览器点击input框时出现边框&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//虽然我觉得还挺好看的--! &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;input&amp;#123;    &lt;span class=&quot;attr&quot;&gt;outline&lt;/span&gt;:none; &lt;span class=&quot;comment&quot;&gt;//outline:0;    &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http:%5C%5Chexin.life/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS学习笔记" scheme="http:%5C%5Chexin.life/tags/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+GitHub搭建个人博客</title>
    <link href="http:%5C%5Chexin.life/2017/03/28/title-1/"/>
    <id>http:\\hexin.life/2017/03/28/title-1/</id>
    <published>2017-03-28T15:15:03.000Z</published>
    <updated>2017-06-06T09:25:34.819Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script> <blockquote class="blockquote-center">白日做的梦要靠自己追</blockquote>

<blockquote>
<p>一直想有一个自己的博客，前段时间看到HEXO+GitHub傻瓜式搭建，就利用周末花了俩天时间搭建了一个自己的博客。花俩天时间是因为走了太多弯路~搞了太多错误，在这里把流程梳理一下，希望大家不要像我一样走弯路，顺便填入第一篇博客0.0，没有基础的同学也可以利用它搭建自己的博客，我觉得博客不一定要写技术，用来当做自己的私人空间也是很不错的。这里特别感谢<a href="http://chasen-g.cn/" target="_blank" rel="external">Chasen’s </a>，帮我解决了好多问题。 </p>
</blockquote>
<hr>
<h2 id="关于HEXO"><a href="#关于HEXO" class="headerlink" title="关于HEXO"></a>关于HEXO</h2><blockquote>
<p>hexo是一款基于<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>的静态博客框架，可以生成静态文件并且一键部署到 github pages 上，并且他可以使用 markdown 来编写文章，十分方便。</p>
</blockquote>
<h2 id="搭建前环境准备"><a href="#搭建前环境准备" class="headerlink" title="搭建前环境准备"></a>搭建前环境准备</h2><p>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a><br>进入官网，他会自动提取你的电脑型号，有俩个版本下载，左边的是稳定版，右边的是一直更新的前沿版，我们这里随便选择一个就好了，我个人选择了右边的</p>
<p><img src="http://i1.piimg.com/567571/f11f62b5f567f034.png" alt="node下载"></p>
<ol>
<li>直接下载即可，只有13MB大小，然后一路默认安装就好了</li>
<li>安装好以后按 win+r 打开运行输入CMD（开始栏输入CMD也一样）</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">输入 node -v</div></pre></td></tr></table></figure>
</li>
<li><p>输出版本号即安装成功，我这里是v7.6.0版本<br><img src="http://i2.muimg.com/567571/9d667d081fc1c3b3.png" alt="这里写图片描述"></p>
</li>
</ol>
<h2 id="接下来安装git"><a href="#接下来安装git" class="headerlink" title="接下来安装git"></a>接下来安装<a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a></h2><p>同上进入git  然后点击下载然后默认安装即可（30MB左右），安装好以后右键会有</p>
<blockquote>
<p>git gui here<br>git bush here</p>
</blockquote>
<p><img src="http://i4.buimg.com/567571/241888e67827ea3e.png" alt="这里写图片描述"><br>不懂git命令也没关系，跟着命令走就可以了，但是学习会对开发很有帮助的，推荐几个网址吧：</p>
<blockquote>
<ul>
<li><a href="https://git-scm.com/docs" target="_blank" rel="external">Git-Reference</a>(官网首选,当然是英文的)</li>
<li><a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="external">git-简易指南</a>（中文简易指南，基本命令够用了）</li>
<li><a href="http://opiece.me/2015/04/06/git-basic-commands/" target="_blank" rel="external">git-常用的基础命令</a></li>
</ul>
</blockquote>
<h2 id="然后是编辑器Sublime-Text（多选）"><a href="#然后是编辑器Sublime-Text（多选）" class="headerlink" title="然后是编辑器Sublime Text（多选）"></a>然后是编辑器<a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a>（多选）</h2><blockquote>
<p><a href="http://www.vscode.org/" target="_blank" rel="external">VS Code</a> 微软新发编辑器，虽然是新发，但是功能异常强大<br><a href="https://atom.io/" target="_blank" rel="external">Atom</a> 由GitHub打造的属于“ 21 ” 世纪的代码编辑器<br><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++</a> 一款强大的编辑器</p>
</blockquote>
<p>我这里用的是<a href="http://www.sublimetext.com/" target="_blank" rel="external">sublime text3</a>，很有程序员风格的编辑器，很多插件与快捷键，特别好用，推荐一下。（中文支持不太好，用习惯就好了）。<br>不用sublime也可以，如果熟悉vim的话可以直接用vim编辑</p>
<h2 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册<a href="https://github.com/" target="_blank" rel="external">github</a></h2><p>  对于没有<a href="https://github.com/" target="_blank" rel="external">GitHub</a>的同学，在这里申请一个<a href="https://github.com/" target="_blank" rel="external">GitHub</a>账号吧，这个很简单，直接注册，邮箱验证就好了。<br> 申请好以后新建一个自己的仓库</p>
<p>  <img src="http://i2.muimg.com/567571/2841bb7050ab8a1a.png" alt="github仓库创建"></p>
<blockquote>
<p>这里注意上面俩个箭头，<strong><em> 命名必须要一致，后面的名字要以 github.io 结尾 </em></strong></p>
</blockquote>
<p> <img src="http://i2.muimg.com/567571/ff8cffca9cb304a6.png" alt="引用块内容"></p>
<p> <strong> 我当初就因为这里搞错了，导致一直到下面的步骤得重新来，这里先把hexo与github联系起来再说 </strong></p>
<p> <img src="http://i4.buimg.com/567571/26dca9ec927dae3e.png" alt="引用块内容"></p>
<h2 id="把git与你的github联系起来"><a href="#把git与你的github联系起来" class="headerlink" title="把git与你的github联系起来"></a>把git与你的github联系起来</h2><blockquote>
<p>右键git bush here 输入命令绑定你的邮箱和名字，这里是我的~替换成自己的即可<br><img src="http://i2.muimg.com/567571/42e1a5a0bfa86767.png" alt="这里写图片描述"></p>
</blockquote>
<h2 id="接下来生成秘钥"><a href="#接下来生成秘钥" class="headerlink" title="接下来生成秘钥"></a>接下来生成秘钥</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"XXX@XXX.com"</span></div></pre></td></tr></table></figure>
<p><strong> 这里C是大写！！！</strong><br><img src="http://ww3.sinaimg.cn/large/0060lm7Tgy1fe2sakgczdj30f103t74e.jpg" alt="这里写图片描述"></p>
<p>如图然后连续按回车即可<br>然后在#user_id/.ssh目录下会生成两个文件，id_rsa.pub 和 id_rsa. </p>
<p><img src="http://ww3.sinaimg.cn/large/0060lm7Tgy1fe2rtqy319j30jj05paar.jpg" alt="我这里是默认安装的，直接在C盘用户，管理员，.SSH文件下"></p>
<p>利用编辑器打开rsa文件，将里面的内容copy，复制在github，在SSH设置页面添加刚才的SSH文件也就是id_rsa.pub的内容即可。</p>
<p><img src="http://ww2.sinaimg.cn/large/0060lm7Tgy1fe2rtqy15pj30tx0cjjsr.jpg" alt="在github中选择setting--&gt;ssh and GPG 添加SSH"> </p>
<p>这里会验证一下github的密码</p>
<p>最后来验证一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>如果成功他让你输入yes然后会返回一个成功的信息<br><img src="http://ww4.sinaimg.cn/large/0060lm7Tgy1fe2sgxkqvvj30fn051mxg.jpg" alt="这里写图片描述"></p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><strong> 不要着急，马上就可以看到属于你的博客了~ </strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<ol>
<li>然后可以利用 Git 一路 cd 到 hexo 的安装目录，或者进去目录，右键 git bush here 即可（hexo init 的文件夹必须为空文件夹）</li>
<li>目录初始化完毕后，在根目录执行下面命令安装提交的命令。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save-dev</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>然后依次执行</strong></p>
<blockquote>
<ol>
<li>hexo init      # 初始化      </li>
<li>hexo g         # 完整命令为hexo generate，生成静态文件</li>
<li>hexo s      #完整命令为hexo server，打开本地服务</li>
</ol>
<p><strong>日后方便提交和防止出错</strong></p>
<ul>
<li>hexo clean     #清理临时文件</li>
<li>hexo d -g    #快速生成并提交</li>
</ul>
</blockquote>
<p>打开本地服务，这时候打开浏览器输入</p>
<blockquote>
<p><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
</blockquote>
<p>看看你博客页面吧~官方默认会有一篇 hello world，当然 ，现在还只是本地的。只有你自己能看到</p>
<h2 id="将静态页面提交到github"><a href="#将静态页面提交到github" class="headerlink" title="将静态页面提交到github"></a>将静态页面提交到github</h2><p> 此时就用到了编辑器，打开_config.yml文件，直接拖入编辑器即可自行修改</p>
<p> 没有编辑器的同学， 可以cd(进入的意思)到hexo的文件夹下，输入 vim _config.yml<br> 然后直接移动下图的位置，按键盘“ a ”，来插入文本，然后就可以修改了，修改完之后按 ESC ，然后按“ Shif ” 加 “ ：”，输入“ wq ”，意思是保存加退出，如果直接退出就输入“ q ”即可。</p>
<p> <img src="http://ww3.sinaimg.cn/large/0060lm7Tgy1fe2rpumoeuj30iv0d5tal.jpg" alt="这里写图片描述"><br> <img src="http://ww1.sinaimg.cn/large/0060lm7Tgy1fe2rpulywmj30io09pwfe.jpg" alt="这里写图片描述">  </p>
<blockquote>
<p>然后修改如下：<br>将repo后面的内容改成自己的(没有独立新建分支的话branch可以不写)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">      type: git</div><div class="line">      repo: git@github.com:yourself/yourself.github.io.git</div><div class="line">      branch: master</div></pre></td></tr></table></figure>
<p>提交到 github<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g       #组合命令，命令等同于hexo g  再 hexo d</div></pre></td></tr></table></figure></p>
<p>这时候 github 已经有了你提交的内容( public 文件夹下的内容 ), 然后输入你开始的 github 仓库名字，例如 <em>*</em>.github.io</p>
<p>就可以看到你的博客页面了…</p>
<h2 id="关于主题安装"><a href="#关于主题安装" class="headerlink" title="关于主题安装"></a>关于主题安装</h2><p>主题有好多种，这里我推荐<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NEXT</a>,简洁，大方，支持多语言，一句代码即可下载NEXT最新版，如果需要其他的可以上官网查找喜欢的，添加方式是一样的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https:<span class="comment">//github.com/iissnan/hexo-theme-next themes/next</span></div></pre></td></tr></table></figure>
<p> 然后打开 _config.yml文件，如图找到theme修改为next即可</p>
<p><img src="http://i2.muimg.com/567571/767faa63e5360b89.png" alt="这里写图片描述"> </p>
<blockquote>
<p>我这里推荐一下<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>。更多好看主题可以去官网搜寻（也可以自己写哦~）。</p>
</blockquote>
<h2 id="关于文章发布"><a href="#关于文章发布" class="headerlink" title="关于文章发布"></a>关于文章发布</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"title"</span>    <span class="comment">// hexo new "中文标题"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意这里如果发布文章是中文的话，最好标题中出现中文：hexo new “中文标题” （不然可能会出现文章乱码）<br>自动生成md文件在 source/_post 下，也可以自己创建为 .md ，注意编码格式用 UTF-8 同样是防止乱码。</p>
</blockquote>
<p><img src="http://i2.muimg.com/567571/deb80ae44a521f7e.png" alt="这里写图片描述"> </p>
<blockquote>
<p>然后打开你的 title-n.md 文件编写文章就可以了，文章需要是 markdown 格式，可以用 markdown 格式的编辑器编写，也可以找在线的 markdown 编辑器，例如 CSDN ，<a href="https://maxiang.io/" target="_blank" rel="external">马克飞象</a>等等…可以离线使用，支持导出为 MD ，HTML 格式，很方便。<br>关于添加图片，我推荐<a href="http://jiantuku.com/" target="_blank" rel="external">极简图床</a>，简单方便。</p>
</blockquote>
<p><strong><em> hexo 常用命令( # 后为注释 ) </em></strong></p>
<blockquote>
<p>hexo init                    # 初始化<br>hexo clean                # 清理临时文件<br>hexo g                     # 完整命令为 hexo generate ，生成静态文件<br>hexo s                     # 完整命令为 hexo server ，打开本地服务<br>hexo d                     # 完整命令为 hexo deploy ，用于将本地文件发布到 github 上<br>hexo new “postName”        # 新建文章<br>hexo new page “pageName”    # 新建页面<br>hexo help                    # 帮助</p>
</blockquote>
<hr>
<p>有什么建议或者改正，希望大家在下面留言，期望同大家共同交流，进步。</p>
<p>另外推荐几篇大神的 blog ：</p>
<ul>
<li><a href="http://www.zipperary.com/categories/hexo/" target="_blank" rel="external">hexo 系列教程</a> </li>
<li><a href="https://hexo.io/docs/" target="_blank" rel="external">HEXO 官方文档</a> </li>
<li><a href="https://zespia.tw/blog/2012/10/11/hexo-debut/" target="_blank" rel="external">Hexo 作者博客</a>  </li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo 你的博客|不如</a> </li>
<li><a href="http://opiece.me/2015/04/09/hexo-guide/" target="_blank" rel="external">使用 hexo 搭建个人博客</a> </li>
<li><a href="http://wiki.jikexueyuan.com/project/hexo-document/" target="_blank" rel="external">极客学院提供的中文文档</a> </li>
<li><a href="http://chasen-g.cn/" target="_blank" rel="external">帮了我很大忙的 Chasen’s</a></li>
<li><a href="http://myzchi.com/2015/05/02/hexo-github%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93/" target="_blank" rel="external">hexo + github 搭建过程总结</a> </li>
<li><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">手把手教你使用 hexo+github 搭建个人博客</a>  </li>
<li><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">搭建一个免费的，无限流量的 blog（阮一峰）</a></li>
</ul>
<blockquote class="blockquote-center">相信你所相信的，坚持你所坚持的</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/DPlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/as
    
    </summary>
    
      <category term="hexo" scheme="http:%5C%5Chexin.life/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http:%5C%5Chexin.life/tags/hexo/"/>
    
  </entry>
  
</feed>
