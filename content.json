[{"title":"每个人都需要的中文排版指南","date":"2017-04-11T12:06:00.000Z","path":"2017/04/11/title-4/","text":"前几天被朋友吐槽排版太烂了，今天偶然看到这篇文章，然后就转载了过来，由于转载原因可能文章没有原文格式美观，有兴趣请点击链接查看原文。 原文转载自[stormzhang](http://stormzhang.com/2017/03/16/chinese-copywriting/) 每个人都需要的中文排版指南 之前有不少人在我公众号留言，说看我的排版很舒服，求指导。 我不是一个专业的写字人，我是程序员出身，在写代码的时候有点小洁癖，尽量会把每个细节做到更好，所以我在公众号写作的时候一样会注重每个细节，我认为排版是对写作最基本的要求，所以当我决定要在公众号写作的时候，就非常在意排版，并且一直在改进， 可惜的是，我看到无数不管是写博客还是写公众号的作者，从不会注意自己的排版，有时候看到一篇好的文章，如果排版很烂，会觉得很可惜。 公众号「小道消息」的作者 Fenng曾不止一次强调排版的重要性，对此我也非常认同，任何说不拘小节，注重内容就行了的反驳都是借口，我自己在我的小密圈中也一直强调排版的重要性，很多圈友发布的动态无一排版都太烂，为此，我在小密圈中写下了这么一篇排版指南，真心希望所有的写字人都能注意下自己的排版。 这篇文章适用于所有编辑、作家、撰稿人、公众号作者、博主等，甚至适合所有人，因为人的一生难免避免不了写作。 1. 空格 我每次看到网页上的中文字和英文、数字、符号挤在一起，就会坐立不安，忍不住想在他们之间加个空格。 「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。」 中英文之间需要加空格 eg. 大家可以搜索公众号 AndroidDeveloper 或者 googdev 关注我。 中文与数字之间需要加空格 eg. 不知不觉，我都快 30 岁了。 数字与单位之间需要加空格 eg. 我有一块 20 TB 的硬盘，鬼知道我是怎么用完的。 完整的英文整句时标点与单词之间需要加空格 eg. Stay hungry, stay foolish. 但是也有一些例外。 度的标志、百分号不加空格 eg. 今天气温有 30° 的高温。 eg. 据统计，关注公众号 AndroidDeveloper 的读者中有 80% 是长得好看的。 全角标点与其他字符之间不加空格 eg. 大家好，我是 stormzhang，请多多关照。 2. 标点 说到标点，不得不说下全角和半角，很多人可能不了解全角和半角的概念，这里顺便介绍下。 全角和半角是英文和中文的编码规范不同遗留下的问题，简单来说，全角占两个字节，半角占一个字节，你可以理解成中文汉字是全角，英文字母是半角，不过半角全角主要是针对标点符号来说的，中文标点占两个字节，英文标点占一个字节。体现在排版上的差异就是，全角字符屏幕打印宽度是两个，而半角字符屏幕打印宽度是一个，如中文逗号和英文逗号他们的显示分别是「，」和「,」。 使用全角中文标点，中文排版中所有的标点都应该使用中文全角中文标点 eg. 大家好，我是 stormzhang。 遇到英文整句、特殊名词时使用半角标点。 eg. 乔布斯说过：「Stay hungry, stay foolish.」 eg. Facebook, Inc. 使用直角引号「我国国家标准要求弯引号，但是个人建议在新媒体排版时使用直角引号」。 eg. 你竟然不知道「帅比张」？ 如果引号再使用引号使用直角双引号。 eg. 我质问他，「你难道忘记『帅比张』了么？」 3. 其他 除以上之外，还有一些其他标准推荐大家使用的。 英文名词首字母尽量大写 eg. Google、Android、Facebook 专有名词使用正确的大小写 eg. GitHub、iOS、iPhone 6s、MacBook Pro 首行不要缩进 这点可能有人不同意，但是我要在这里解释下，在说明之前我们必须弄明白「首行缩进」的目的是什么。 「每段之前空两格」是我们从小学写作文就养成的习惯，也是正式文体的格式要求，其目的是为了区分自然段。 但是像我们现在接触的阅读，都是没有固定的格式要求的，如微信公众号、电子文档等，所以大家一般都采用「空出一行」进行自然段与自然段之间的区分，这种写作方式非常省事，而且很整齐。 所以，我认为这种应该是最科学的方式，只要没有明确的格式要求，写作的排版无须首行缩进。 最后，你可能会问，以上这些原则是业界标准么？我不敢保证，但是你不妨看下 「Apple 中国官网」、「Microsoft中国官网」、公众号「小道消息」、「MacTalk」等的排版，基本都是使用以上排版标准。","excerpt":"前几天被朋友吐槽排版太烂了，今天偶然看到这篇文章，然后就转载了过来，由于转载原因可能文章没有原文格式美观，有兴趣请点击链接查看原文。 原文转载自[stormzhang]","categories":[{"name":"其他","slug":"其他","permalink":"http:\\\\hexin.life/categories/其他/"}],"tags":[{"name":"转载","slug":"转载","permalink":"http:\\\\hexin.life/tags/转载/"}]},{"title":"瀑布流","date":"2017-04-09T15:09:45.000Z","path":"2017/04/09/title-3/","text":"白日做的梦要靠自己追 好久没有写博客了，学习途中经常遇到好多小问题，感觉还是动手太少了，不过感觉好多视频中老师的代码是错误的，也不知道他们是怎么运行成功的，调试+百度了好久才修正过来，不过感觉不错，可能是故意的吧，为了让我们自己动手查询，今天实现了一下瀑布流的布局就发在这里吧，具体的注释我都放在代码里了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt; &lt;title&gt;瀑布流&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;padding: 0;margin:0;&#125; #main&#123; position: relative; &#125; .pin&#123; padding: 15px 0 0 15px; float:left; &#125; .box&#123; padding: 10px; border:1px solid #ccc; box-shadow: 0 0 6px #ccc; border-radius: 5px; &#125; .box img&#123; width:162px; height:auto; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"main\"&gt; &lt;div class=\"pin\"&gt; &lt;div class=\"box\"&gt; &lt;img src=\"./images/1.jpg\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- ...这里由于结构都一样就直接省去了 --&gt; &lt;div class=\"pin\"&gt; &lt;div class=\"box\"&gt; &lt;img src=\"./images/1.jpg\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; window.onload = function () &#123; waterFall(\"main\",\"pin\"); &#125; //模拟从后台传来的json数据 var dataInt=&#123;'data':[&#123;'src':'1.jpg'&#125;,&#123;'src':'2.jpg'&#125;,&#123;'src':'3.jpg'&#125;,&#123;'src':'5.jpg'&#125;,&#123;'src':'5.jpg'&#125;,&#123;'src':'4.jpg'&#125;,&#123;'src':'6.jpg'&#125;,&#123;'src':'6.jpg'&#125;,&#123;'src':'16.jpg'&#125;,&#123;'src':'16.jpg'&#125;,&#123;'src':'16.jpg'&#125;,&#123;'src':'6.jpg'&#125;]&#125;; //瀑布流滚动加载 window.onscroll = function () &#123; if(checkScroll())&#123; var oParent = document.getElementById(\"main\"); // 将后台传来的数据渲染进当前页面尾部 for( var i = 0; i &lt; dataInt.data.length; i++)&#123; //创建最外层div var oPin = document.createElement('div'); oPin.className = 'pin'; oParent.appendChild(oPin); //创建图片的盒子 var oBox = document.createElement('div'); oBox.className = 'box'; oPin.appendChild(oBox); //创建图片 var oImg = document.createElement('img'); oImg.src = \"./images/\" + dataInt.data[i].src;//获取传来的json中的图片 oBox.appendChild(oImg); &#125; waterFall(\"main\",\"pin\"); //将传入的图片进行瀑布流排序 &#125; &#125; //检测是否具备加载条件--&gt;当最后一个盒子出现在视线中时开始加载 function checkScroll () &#123; //获取整个大盒子 var oParent = document.getElementById(\"main\"); //获取所有图片 var oBoxs = getByClass(oParent,\"pin\"); // var oBoxs = oParent.getElementsByClassName(\"pin\"); //获取最后一个盒子的高度 var lastBoxH = oBoxs[oBoxs.length - 1].offsetTop ; //获取滚动距离 var scrollTop = document.body.scrollTop || document.documentElement.scrollTop; //获取浏览器窗口的高度 // var clienHeight = document.documentElement.clientHeight; var clientHeight = document.body.clientHeight || document.documentElement.clientHeight console.log(scrollTop); console.log(clientHeight); return (lastBoxH &lt; clientHeight + scrollTop) ? true : false; //判断滚动的高度加浏览器的高度是否高于最后一个盒子的高度，即盒子是否出现在视线中 &#125; function waterFall( parent, pin ) &#123; //获取整个大盒子 var oParent = document.getElementById(parent); //获取所有图片 var oBoxs = getByClass(oParent,\"pin\"); // var oBoxs = oParent.getElementsByClassName(\"pin\"); // 获取每个盒子的宽度 var oBoxw = oBoxs[0].offsetWidth; //获取每一行一共有几个盒子，用Math.floor()向下取整 var cols = Math.floor(document.documentElement.clientWidth / oBoxw); //设置每个图片盒子的宽度都一致并居中显示 oParent.style.cssText = \"width:\" + oBoxw*cols + \"px; margin:0 auto;\"; //存放每一列盒子高度的数组 var boxArr = []; for(var i = 0; i &lt; oBoxs.length; i++)&#123; if( i &lt; cols)&#123;//遍历盒子，将盒子的高度放入数组 boxArr.push(oBoxs[i].offsetHeight); &#125;else&#123; //调整下一列盒子的位置 var minH = Math.min.apply(null,boxArr); //找到数组中的最小值--&gt;这里用apply改变this的 var minIndex = getMinIndex(boxArr,minH); // 获取高度最低的索引值 oBoxs[i].style.position = \"absolute\"; oBoxs[i].style.top = minH + \"px\"; oBoxs[i].style.left = minIndex*oBoxw + \"px\"; //盒子左边的距离等于最低盒子的索引值*每一个盒子的宽度 /* oBoxs[i].style.left = oBoxs[minIndex].offsetWidth + \"px\"; //--&gt;盒子左边的距离等于最低高度盒子的左边距离 */ //此时剩余盒子会绝对定位到该位置，因此我们需要去修改数组中最低的高度 boxArr[minIndex] += oBoxs[i].offsetHeight; &#125; &#125; &#125; // 获取索引值,遍历取到和最小值相等的值--&gt;数组太大可以用数据结构中的查找，二分查找听说是面试重点(简单实用吧)~ function getMinIndex ( boxArr, minH ) &#123; for(var i = 0; i &lt; boxArr.length; i++)&#123; if(boxArr[i] == minH)&#123; return i; &#125; &#125; &#125; //获取className function getByClass ( parent, cls ) &#123; var oParent = document.getElementById(\"main\"); var oElements = oParent.getElementsByTagName(\"*\"); var boxArr = new Array(); for(var i = 0; i &lt; oElements.length; i++) &#123; if(oElements[i].className == cls)&#123; boxArr.push(oElements[i]); &#125; &#125; return boxArr; &#125; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","excerpt":"白日做的梦要靠自己追 好久没有写博客了，学习途中经常遇到好多小问题，感觉还是动手太少了，不过感觉好多视频中老师的代码是错误的，也不知道他们是怎么运行成功的，调试+百度了好久才修正过来，不过感觉不错，可能是故意的吧，为了让我们自己动手查询，今天实现了一下瀑布流的布局就发在这里吧，具体的注释我都放在代码里了。","categories":[{"name":"前端","slug":"前端","permalink":"http:\\\\hexin.life/categories/前端/"}],"tags":[{"name":"瀑布流","slug":"瀑布流","permalink":"http:\\\\hexin.life/tags/瀑布流/"}]},{"title":"CSS学习笔记(Placeholder及CSS_hack)","date":"2017-03-31T15:09:45.000Z","path":"2017/03/31/title-2/","text":"白日做的梦要靠自己追 IE8以下图片出现蓝色边框123img&#123; border:0; /*或者border:none;*/ &#125; #如何使文本以大写字母开头？ 1text-transform:capitalize; 强制设置为IE模式12&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt; //我写的页面在IE8之下全部乱掉了，用这个强制用最新版本的IE渲染 IE8及以下不支持Placeholder（基于JQ）1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!doctype html&gt; &lt;html&gt; &lt;header&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin:0;padding:0;&#125; form &#123;margin:50px;&#125; input &#123;display:block;margin:0 0 6px 0;&#125; &lt;/style&gt; &lt;/header&gt; &lt;body&gt; &lt;form&gt; 用户名：&lt;input name=\"name\" placeholder=\"请输入用户名\"/&gt; 密码：&lt;input name=\"password\" placeholder=\"请输入登陆密码\"/&gt; &lt;/form&gt; &lt;script type=\"text/javascript\" src=\"jquery-1.11.1.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; $(function()&#123; function placeholderSupport() &#123; // 判断浏览器是否支持 placeholder return 'placeholder' in document.createElement('input'); &#125; if(!placeholderSupport())&#123; $(document).on('focus', '[placeholder]',function() &#123; var input = $(this); if (input.val() == input.attr('placeholder')) &#123; input.val(''); input.removeClass('placeholder'); &#125; &#125;); $(document).on('blur', '[placeholder]',function() &#123; var input = $(this); if (input.val() == '' || input.val() == input.attr('placeholder')) &#123; input.addClass('placeholder'); input.val(input.attr('placeholder')); &#125; &#125;); $('[placeholder]').blur(); &#125;; &#125;); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 常见CSS hack不管是什么方法，书写的顺序都是firefox的写在前面，IE7的写在中间，IE6的写在最后（1）方式一 条件注释法 只在IE下生效 123&lt;!--[if IE]&gt; 这段文字只在IE浏览器显示 &lt;![endif]--&gt; 只在IE6下生效 123&lt;!--[if IE 6]&gt; 这段文字只在IE6浏览器显示 &lt;![endif]--&gt; 只在IE6以上版本生效 gte IE 6]>12这段文字只在IE6以上(包括)版本IE浏览器显示&lt;![endif]--&gt; 只在IE8上不生效 ! IE 8]>12这段文字在非IE8浏览器显示&lt;![endif]--&gt; 非IE浏览器生效 !IE]>12这段文字只在非IE浏览器显示&lt;![endif]--&gt; （2）方式二 类内属性前缀法 在标准模式中： “-″减号是IE6专有的hack “\\9″ IE6/IE7/IE8/IE9/IE10都生效 “\\0″ IE8/IE9/IE10都生效，是IE8/9/10的hack “\\9\\0″ 只对IE9/IE10生效，是IE9/10的hack IE6能识别 *，但不能识别 !important IE7能识别 *，也能识别!important FF不能识别 *，但能识别!important,下划线_ IE6支持下划线 IE7和firefox均不支持下划线 （3）CSS hack方式三：选择器前缀法 12345678*html //*前缀只对IE6生效 *+html //*+前缀只对IE7生效 @media screen\\9&#123;...&#125; //只对IE6/7生效 @media \\0screen &#123;body &#123; background: red; &#125;&#125; //只对IE8有效 @media \\0screen\\,screen\\9&#123;body &#123; background: blue; &#125;&#125; //只对IE6/7/8有效 @media screen\\0 &#123;body &#123; background: green; &#125;&#125; //只对IE8/9/10有效 @media screen and (min-width:0\\0) &#123;body &#123; background: gray; &#125;&#125; //只对IE9/10有效 @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) &#123;body &#123; background: orange; &#125;&#125; //只对IE10有效等等 以: “ #demo {width:100px;} “为例; 1234#demo &#123;width:100px;&#125; /*被FIREFOX,IE6,IE7执行.*/ *html #demo &#123;width:120px;&#125; /*会被IE6执行,之前的定义会被后来的覆盖,所以#demo的宽度在IE6就为120px; */ *+html #demo &#123;width:130px;&#125; /*会被IE7执行*/ 所以最后,#demo的宽度在三个浏览器的解释为: FIREFOX:100px; ie6:120px; ie7:130px; IE8 最新css hack： 1234\"\\9\" 例:\"border:1px\\9;\" //这里的\"\\9\"可以区别所有IE和FireFox.（只针对IE9 Hack） \"\\0\" //IE8识别，--&gt;IE6、IE7不能. \"*\" //IE6、IE7可以识别.--&gt;IE8、FireFox不能. \"_\" //IE6可以识别\"_\",--&gt;IE7、IE8、FireFox不能. Placeholder源自网上资料，点击标题即进入原网址，本人新手，没怎么用过hack，从百度百科整理一部分，作为以后查询方便，如果有什么问题，希望大神多多指点。","excerpt":"白日做的梦要靠自己追 IE8以下图片出现蓝色边框123img&#123; border:0; /*或者border:none;*/ &#125; #如何使文本以大写字母开头？ 1text-transform:capitalize; 强制设置为IE模式12&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt; //我写的页面在IE8之下全部乱掉了，用这个强制用最新版本的IE渲染","categories":[{"name":"前端","slug":"前端","permalink":"http:\\\\hexin.life/categories/前端/"}],"tags":[{"name":"CSS学习笔记","slug":"CSS学习笔记","permalink":"http:\\\\hexin.life/tags/CSS学习笔记/"}]},{"title":"HEXO+GitHub搭建个人博客","date":"2017-03-28T15:15:03.000Z","path":"2017/03/28/title-1/","text":"白日做的梦要靠自己追 一直想有一个属于自己的博客，前段时间看到HEXO+GitHub傻瓜式搭建，就利用周末花了俩天时间搭建了一个自己的博客。花俩天时间是因为走了太多弯路~搞了太多错误，在这里把流程梳理一下，希望大家不要像我一样走弯路，顺便填入第一篇博客0.0，没有基础的同学也可以利用它搭建自己的博客，我觉得博客不一定要写技术，用来当做自己的私人空间也是很不错的。这里特别感谢Chasen’s ，帮我解决了好多问题。 关于HEXO hexo是一款基于Node.js的静态博客框架，可以生成静态文件并且一键部署到githubpages上，并且他可以使用markdown(一款编辑器)来编写文章，十分简单。 搭建前环境准备 安装Node.js(正是因为了解到了node.js才下定决心学前端的)进入官网，他会自动提取你的电脑型号，有俩个版本下载，左边的是稳定版，右边的是一直更新的前沿版，我们这里随便选择一个就好了，我个人喜欢新鲜事物，就选择了右边的 直接下载即可，只有13MB大小，然后一路默认安装就好了安装好以后按 win+r 打开运行输入CMD（开始栏输入CMD也一样）输入 node -v输出版本号即安装成功，我这里是以前装好的v7.6.0版本 接下来安装git 同上进入git 然后点击下载安装即可（30MB左右） 安装好以后右键会有 git gul heregit bush here 不懂git命令也没关系，其实我也不是很懂，跟着命令走就可以了 但是对于程序员来说还是必须要了解的 推荐几个网址吧： Git-Reference(官网首选,当然是英文的) git-简易指南（中文简易指南，基本命令够用了） git-常用的基础命令 然后是编辑器sublime（可选） 我这里用的是sublime text3，很有程序员风格的编辑器，很多插件与快捷键，特别好用，推荐一下。（中文支持不太好，用习惯就好了）。不用sublime也可以，如果熟悉vim的话可以直接用git打开vim编辑我对vim也不是很熟，以前上Linux课的时候用过一点，也没好好听，基本忘光了，但是就是基本的修改个属性，能达到自己需求就行，对吧。 注册github 对于没有GitHub的同学，在这里申请一个GitHub账号吧，这个很简单，直接注册，邮箱验证就好了。申请好以后新建一个自己的仓库 这里注意上面俩个箭头，命名必须要一致，后面的名字要以github.io结尾 我当初就因为这里搞错了（我写成了xinhe.github.io），导致一直到下面的步骤得重新来，当初不知怎么想的，实在是chiou~所以需要购买一个域名~后面再说，先把hexo与github联系起来再说 这里先把git与你的github联系起来 右键git bush here 输入命令绑定你的邮箱和名字，这里是我的~替换成自己的即可 接下来生成秘钥 ssh-keygen -t rsa -C “XXX@XXX.com” 这里C是大写哦！！！ 如图然后连续按回车即可然后在#user_id/.ssh目录下会生成两个文件，id_rsa.pub和id_rsa. 利用编辑器打开rsa文件，将里面的内容copy，复制在github，在SSH设置页面添加刚才的SSH文件也就是id_rsa.pub的内容即可。 这里会验证一下github的密码 最后来验证一下： git命令输入 ssh -T git@github.com如果成功他让你输入yes然后会返回一个成功的信息 安装hexo 是不是觉得需要下载的东西好多啊，我开始也是这样觉得，但是为了个人博客，忍了吧，其实这里为了详细，写的比较多，比较熟悉的人可以快速浏览，直接上手，遇到问题再回过头来检查步骤，别急，马上就可以看到属于你的博客了~* npm install hexo-cli -gnpm install hexo-deployer-git –save 缺少这个命令之后提交会有问题当时这里也翻了错误 然后可以利用Git 一路cd 到hexo的安装目录，或者进去目录，右键git bush here 即可（命令必须在init目录下执行，否则不成功，但是也不报错） hexo init # 初始化hexo clean #清理临时文件hexo g # 完整命令为hexo generate，生成静态文件hexo s #完整命令为hexo server，打开本地服务 打开本地服务，这时候打开浏览器输入 http://localhost:4000看看你博客页面吧~官方默认会有一篇hello world，当然 ，现在还只是本地的。只有你自己能看到 将静态页面提交到github 此时就用到了编辑器，打开_config.yml文件，直接拖入编辑器即可自行修改 没有编辑器的同学， 可以cd(进入的意思)到hexo的文件夹下，输入vim _config.yml然后直接滑到下图的位置，按键盘“a”，意思是插入文本，然后就可以修改了，修改完之后按ESC，然后按“Shif+：”，输入“wq”，意思是保存加退出，如果直接退出就输入“q”即可。 然后修改如下：将repo后面的内容改成自己的 1234deploy: type: git repo: git@github.com:yourself/yourself.github.io.git branch: master hexo d -g #组合命令，命令等同于hexo g 再 hexo d 这时候输入你的github地址，例如我的是18292843691.github.io 就可以看到你的博客页面了… 关于主题安装主题有好多种，这里我推荐NEXT,简洁，大方，支持多语言，一句代码即可下载NEXT最新版，如果需要其他的可以上官网查找喜欢的，添加方式是一样的。1git clone https://github.com/iissnan/hexo-theme-next themes/next 然后打开 _config.yml文件，如图找到theme修改为next即可 我这里没有用next，因为用next的人太多了，点击进入yilia。 关于文章发布 12输入hexo new \"title\"即可自动生成md文件在source/_post下 然后打开你的md文件编写文章就可以了，文章需要是markdown格式，可以用markdown格式的编辑器编写，也可以找在线的markdown编辑器，例如我直接用CSDN的，也可以离线使用，支持导出为MD，HTML格式，很方便。关于图片，我推荐极简图床，简单方便。 1hexo d -g #同步至github hexo 常用命令(#后为注释) hexo init #初始化hexo clean #清理临时文件hexo g # 完整命令为hexo generate，生成静态文件hexo s #完整命令为hexo server，打开本地服务hexo d #完整命令为hexo deploy，用于将本地文件发布到github上hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo help #帮助 如果文章有什么错误，感谢大神指出，好及时修改。希望同大家共同交流，进步。 另外推荐几篇大神写的（我也是按照他们的教程搭建，不分先后）： HEXO官方文档 极客学院提供的中文文档 帮了我很大忙的-&gt;Chasen’s hexo你的博客|不如 手把手教你使用hexo+github搭建个人博客 使用hexo搭建个人博客 hexo+github搭建过程总结 hexo系列教程 搭建一个免费的，无限流量的blog（阮一峰） 相信你所相信的，坚持你所坚持的","excerpt":"","categories":[{"name":"hexo","slug":"hexo","permalink":"http:\\\\hexin.life/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http:\\\\hexin.life/tags/hexo/"}]}]