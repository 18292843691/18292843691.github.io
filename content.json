{"meta":{"title":"dayDream's blog","subtitle":null,"description":"白日梦想家那些一起做的白日梦，你还记得么","author":"白日梦想家","url":"http:\\\\hexin.life"},"pages":[{"title":"","date":"2017-04-01T07:32:40.978Z","updated":"2017-04-01T07:32:23.109Z","comments":true,"path":"404.html","permalink":"http:\\\\hexin.life/404.html","excerpt":"","text":""},{"title":"console.log(aboutme)","date":"2017-04-18T14:17:02.102Z","updated":"2017-04-18T14:17:02.102Z","comments":false,"path":"about/index.html","permalink":"http:\\\\hexin.life/about/index.html","excerpt":"","text":"#content-1{ width: 100%; height: 100%; padding: 0; margin: 0; position: relative; } #aboutme { width: 450px; height: 250px; /*background: url(yy.jpg) no-repeat -5px -120px;*/ margin: 130px auto; border: 4px solid rgba(245, 245, 245, .8); box-shadow: 0 1px 5px rgba(0, 0, 0, .1), 0 1px 10px rgba(0, 0, 0, .4) inset; position: relative; cursor: pointer; background-color: #fff; padding: 15px; border-radius: 5px; } #aboutme img{ width: 100%; height: 100%; /*border: 4px solid rgba(245, 245, 245, .8);*/ box-shadow: 0 1px 10px rgba(0, 0, 0, .4) inset; } @media screen and(max-width:775px){ .aboutme{ width: 288px; height: 200px; } } #aboutme:before { content: \"\"; position: absolute; background: transparent; z-index: -10; top: 15px; bottom: 10px; right: 21px; left: 19px; transform: skewX(10deg); box-shadow: 0 0 25px rgba(0, 0, 0, .5); border-radius: 15px; } #aboutme:after{ content: \"\"; position: absolute; background: transparent; z-index: -10; top: 50% ; bottom: 70px; right: -10px; left: 20px; transform: rotateZ(20deg); box-shadow: 0 0 31px rgba(0, 0, 0, .4); border-radius: 40px; } /*#bigger-img{ background-color: rgba(220,220,220,0.1); display: none; width: 100%; height: 100%; cursor: pointer; position: absolute; z-index: 11; top: 0; left: 0; bottom: 0; right: 0; } #bigger-img img{ width: 700px; height: 500px; position: absolute; top: 0; left: 50%; margin-top:-100px; margin-left: -360px; transition: all 1s; border: 4px solid rgba(245, 245, 245, .8); box-shadow: 0 1px 15px rgba(0, 0, 0, .2), 0 1px 20px rgba(0, 0, 0, .4) inset; }*/ //------------------------------------------------------------------------------------------------// // window.onload = function() { // var about = document.getElementById('aboutme'); // var show = document.getElementById('bigger-img'); // var closeImg = document.getElementById('cimg'); // var index = 0; // about.onclick = function(){ // show.style.display = \"block\"; // } // closeImg.onclick = function() { // show.style.display = \"none\"; // } // } //------------------------------------------------------------------------------------------------// function Aboutme(name, age, sex) { this.name = name; this.age = age; this.sex = sex; } function Resume(name, age, sex, email) { Aboutme.call(this, name, age, sex); this.email = email; } Resume.prototype = Object.create(Aboutme.prototype); Resume.prototype.constructor = Resume; var email = \"mailTo:\"+\"hexin_9508@163.com\"; var skills = { HTML: \"expression\", CSS: \"expression\", JavaScript: \"familliar\" } var projects = { blog:\"http://hexin.life\", More:\"watting\" } var hexin = new Resume(\"hexin\",\"22\",\"♂\",email); hexin.current = \"student 2014-2018\"; hexin.DesiredJob = \"Front-end engineer\"; hexin.Hobby = \"coding,Basketball,古风音乐,E-Sports\"; hexin.tel = \"182****3691\"; //hexin.tel = \"18292843691\"; hexin.skills = skills; hexin.project = projects; for (var i in hexin) { if (hexin.hasOwnProperty(i)) { if ((typeof hexin[i]) == \"object\") { console.log(i + \":\"); for (var j in hexin[i]) { console.log(\" \" + j + \":\", hexin[i][j]); } } else { console.log(i + \":\", hexin[i]); } } }"},{"title":"categories:","date":"2017-04-06T09:49:42.000Z","updated":"2017-04-15T14:22:30.057Z","comments":false,"path":"categories/index.html","permalink":"http:\\\\hexin.life/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-04-06T09:47:38.000Z","updated":"2017-04-15T14:22:38.194Z","comments":false,"path":"tags/index.html","permalink":"http:\\\\hexin.life/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"定制 hexo","slug":"title-11","date":"2017-06-06T03:48:42.000Z","updated":"2017-06-06T10:44:18.364Z","comments":true,"path":"2017/06/06/title-11/","link":"","permalink":"http:\\\\hexin.life/2017/06/06/title-11/","excerpt":"","text":"时隔好久，这里对hexo的博客进行一些功能上的拓展 1.七牛云定制空间及绑定到极简图床 对于上传图片个人喜欢极简图床，支持复制粘贴上传，截图然后粘贴用起来贼爽。 极简图窗对于游客每日只有10张图片的上限，开始觉得够用了，但是玩着玩着就没了。不过，他本身提供了七牛云的空间储存。 注册和邮箱验证这里就不赘述了，自行解决吧。 完成之后选择新建仓库名字建议写成小写，他好像是默认小写的。 然后到个人中心找到密钥分别填入 找到仓库下的图片处理位置，绑定的域名使用七牛提供的域名即可 此时就拥有了10G的七牛免费储存空间，极简图床也不限制次数了。慢慢享用吧骚年。 2.HEXO 内容压缩 我这里使用的 NEXT 主题，它在生成 HTML 时由于主题的简洁，形成了大量留白，反而增大了文件大小，使得本来服务器就在国外的网站加载更慢。 1.这里使用当红小生 gulp 进行文件的处理。 HEXO 在根目录下新建 gulpfile.js 文件 我们对文件处理需要用到 gulp 的一些插件 使用 npm install ** –save-dev 来下载这些插件并保存，添加到 package.json 配置项中。 由于 npm 服务器在国外下载较慢，安装淘宝镜像 cnpm npm install -g cnpm –registry=https://registry.npm.taobao.org 然后配置 gulpfile.js ,我们知道我们提交博客时，是将静态文件生成到 public 下，然后提交到 github 的。所以我们对文件处理时，就处理这里的静态文件即可。静态文件树形图如下（太长我删减了一部分）： D:. public/ ├─2017 │ ├─03 │ ├─28 │ └─title-1 │ ├─about ├─archives │ ├─2017 │ │ ├─03 │ │ ├ │ │ └─pages │ │ ├─2 │ │ └─3 │ └─pages │ ├─2 │ └─3 ├─assets │ └─js ├─categories │ ├─css │ ├─hexo │ ├─JavaScript │ ├─window │ ├─其他 │ └─前端 ├─css ├─images ├─js │ └─src │ └─schemes ├─lib │ ├─algolia-instant-search │ ├─canvas-nest │ ├─fancybox │ │ └─source │ │ └─helpers │ ├─fastclick │ │ └─lib │ ├─font-awesome │ │ ├─css │ │ └─fonts │ ├─jquery │ ├─jquery_lazyload │ ├─three │ ├─ua-parser-js │ │ └─dist │ └─velocity ├─pages │ ├─2 │ └─3 └─tags ├─css-前端 ├─CSS学习笔记 ├ └─转载 1.因此对文件处理的代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091// 引入插件 const gulp = require('gulp'), Hexo = require('hexo'), pump = require('pump'), clean = require('gulp-clean'), jsmin = require('gulp-jsmin'), // rename = require('gulp-rename'), htmlmin = require('gulp-htmlmin'), imagemin = require('gulp-imagemin'), cleanCSS = require('gulp-clean-css'), imageminSvgo = require('imagemin-svgo'), imageminJpegtran = require('imagemin-jpegtran'), imageminPngquant = require('imagemin-pngquant');// 利用Hexo API 来生成博客内容，效果同在命令行运行：hexo g // generate html with 'hexo generate'var hexo = new Hexo(process.cwd(), &#123;&#125;);gulp.task('generate', function(cb) &#123; hexo.init().then(function() &#123; return hexo.call('generate', &#123; watch: false &#125;); &#125;).then(function() &#123; return hexo.exit(); &#125;).then(function() &#123; return cb() &#125;).catch(function(err) &#123; console.log(err); hexo.exit(err); return cb(err); &#125;)&#125;)//压缩 js 文件gulp.task('jsmin', () =&gt; gulp.src('./public/js/src/**/*.js') .pipe(jsmin()) //.pipe(rename(&#123;suffix: '.min'&#125;)) .pipe(gulp.dest('./public/js')););//压缩 html 文件gulp.task('htmlmin', () =&gt; gulp.src('./public/**/**/**/*.html') .pipe(htmlmin(&#123;collapseWhitespace: true&#125;)) .pipe(gulp.dest('./public')););// 压缩图片gulp.task('imagemin', () =&gt; gulp.src('./public/images/*') .pipe(imagemin()) .pipe(gulp.dest('./public/images')));imagemin(['./public/images/*.&#123;jpg,png&#125;'], './public/imagess', &#123; plugins: [ imageminJpegtran(), imageminPngquant(&#123;quality: '65-80'&#125;) ]&#125;); imagemin(['./public/images/*.svg'], './public/images', &#123; use: [ imageminSvgo(&#123; plugins: [ &#123;removeViewBox: false&#125; ] &#125;) ]&#125;)//压缩 cssgulp.task('minify-css',() =&gt; gulp.src('./public/css/*.css') .pipe(cleanCSS(&#123;compatibility: 'ie8'&#125;)) .pipe(gulp.dest('./public/css')));//默认任务gulp.task('default',[\"generate\",\"minify-css\",\"jsmin\",\"htmlmin\",\"imagemin\"], function() &#123; console.log('gulp is finished!');&#125;)// gulp.task(\"watch\",function() &#123;// gulp.watch(\"public/*\",[\"default\"]);// &#125;); 之后命令行运行 gulp 即可压缩.因为将生成静态文件的步骤hexo generate 集成到了 gulp 中，所以我们以后可以先 gulp 然后 hexo deploy 提交。 输出如下： 效果如图： 参考： 优化Hexo博客 - 压缩 HTML、CSS、JS、IMG等 3. 添加音乐外链 如果想在看博客的时候听一些喜欢的音乐怎么办呢？ 可以直接在 markdown 中写入 HTML 代码（网易云，虾米均支持外链） 1. embed 1&lt;embed src=\"//music.163.com/style/swf/widget.swf?sid=452986458&amp;type=2&amp;auto=1&amp;width=320&amp;height=66\" width=\"340\" height=\"86\" allowNetworking=\"all\"&gt;&lt;/embed&gt; 2. javascript&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.xiami.com/widget/player-single?uid=93773004&amp;sid=1769292418&amp;mode=js&quot;&gt;&lt;/script&gt; 3. iframe 5. HEXO 的插件 aplayer / dplayer (没有用过就不多说了) hexo-tag-aplayer:https://github.com/grzhan/hexo-tag-aplayer#upstream-issuehexo-tag-dplayer:https://github.com/NextMoe/hexo-tag-dplayer 4. 将音乐框添加到 slideBar 其实方式是一样的，将外链的代码 粘贴到你要显示的地方即可,如图： 5. 点击出现心型特效，及背景线条 1. 心型特效代码 love.js123456789!function(e,t,a)&#123;function n()&#123;c(\".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;\"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)&#125;function o()&#123;var t=\"function\"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(\"div\");a.className=\"heart\",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:.8,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(\"style\");a.type=\"text/css\";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(\"head\")[0].appendChild(a)&#125;function s()&#123;return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 2.背景特效代码 par.js 12345678 !function()&#123;function n(n,e,t)&#123;return n.getAttribute(e)||t&#125;function e(n)&#123;return document.getElementsByTagName(n)&#125;function t()&#123;var t=e(\"script\"),o=t.length,i=t[o-1];return&#123;l:o,z:n(i,\"zIndex\",-1),o:n(i,\"opacity\",.5),c:n(i,\"color\",\"0,0,0\"),n:n(i,\"count\",99)&#125;&#125;function o()&#123;c=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight&#125;function i()&#123;l.clearRect(0,0,c,a);var n,e,t,o,u,d,x=[w].concat(y);y.forEach(function(i)&#123;for(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;c||i.x&lt;0?-1:1,i.ya*=i.y&gt;a||i.y&lt;0?-1:1,l.fillRect(i.x-.5,i.y-.5,1,1),e=0;e&lt;x.length;e++)n=x[e],i!==n&amp;&amp;null!==n.x&amp;&amp;null!==n.y&amp;&amp;(o=i.x-n.x,u=i.y-n.y,d=o*o+u*u,d&lt;n.max&amp;&amp;(n===w&amp;&amp;d&gt;=n.max/2&amp;&amp;(i.x-=.03*o,i.y-=.03*u),t=(n.max-d)/n.max,l.beginPath(),l.lineWidth=t/2,l.strokeStyle=\"rgba(\"+m.c+\",\"+(t+.2)+\")\",l.moveTo(i.x,i.y),l.lineTo(n.x,n.y),l.stroke()));x.splice(x.indexOf(i),1)&#125;),r(i)&#125;var c,a,u=document.createElement(\"canvas\"),m=t(),d=\"c_n\"+m.l,l=u.getContext(\"2d\"),r=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(n)&#123;window.setTimeout(n,1e3/45)&#125;,x=Math.random,w=&#123;x:null,y:null,max:2e4&#125;;u.id=d,u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+m.z+\";opacity:\"+m.o,e(\"body\")[0].appendChild(u),o(),window.onresize=o,window.onmousemove=function(n)&#123;n=n||window.event,w.x=n.clientX,w.y=n.clientY&#125;,window.onmouseout=function()&#123;w.x=null,w.y=null&#125;;for(var y=[],s=0;m.n&gt;s;s++)&#123;var f=x()*c,h=x()*a,g=2*x()-1,p=2*x()-1;y.push(&#123;x:f,y:h,xa:g,ya:p,max:6e3&#125;)&#125;setTimeout(function()&#123;i()&#125;,100)&#125;(); 3.其他特效如头像旋转等 直接如图： 12345678910111213141516171819.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 50%; box-shadow: inset 0 -1px 0 #333sf; -webkit-border-radius: 50%; -moz-border-radius: 50%; /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1s ease-out; -moz-transition: -moz-transform 1s ease-out; transition: transform 1s ease-out;&#125; 123456img:hover&#123; /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125; 做自己喜欢的事情才会有动力","categories":[{"name":"hexo","slug":"hexo","permalink":"http:\\\\hexin.life/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http:\\\\hexin.life/tags/hexo/"}]},{"title":"欢迎来到 cmder","slug":"title-10","date":"2017-06-05T17:01:56.000Z","updated":"2017-06-05T17:07:11.008Z","comments":true,"path":"2017/06/06/title-10/","link":"","permalink":"http:\\\\hexin.life/2017/06/06/title-10/","excerpt":"","text":"人没有梦想，那和咸鱼有什么区别 $ 最近电脑受不了了，折腾比较多,对于好多东西装了N次，在这里简单记录一下。$ win 下命令行神器 cmder在 win 下 的命令行神器 cmder，原始 cmd 难看不说，功能也少，这里推荐一下 cmder。可以直接下载 mini 版本，只有 6 mb 大小，完整版本包含了 git 等一堆功能，git 已经安装过了， 这里我就选择了 Mini 版。 安装很简单，直接下载解压即可使用 不过为了方便，我们添加一下环境变量。 即可 Win + R 输入 cmder 唤出。 但是呢，好像还是不够方便，此时我们可以将它添加到我们的鼠标右键，像 git 巴蜀 here 那样。打开 cmder 终端输入下面命令 1Cmder.exe /REGISTER ALL //如果没有权限 则输入 Cmder.exe /REGISTER USER 然后是去除文字重叠， win + alt + p 或者点右下角图标选择设置 setting . 然后将 monospace 前面的对勾去掉即可。 如果习惯 git 里面的 \\$ 符号的话。可以打开 D:\\cmder_mini\\vendor\\clink.lua 找到44行左右，将 符号改为 \\$ 效果如图： 基本目前所需要的功能差不多就这样。 晚晴幽草轩轩主","categories":[{"name":"window","slug":"window","permalink":"http:\\\\hexin.life/categories/window/"}],"tags":[{"name":"其他","slug":"其他","permalink":"http:\\\\hexin.life/tags/其他/"}]},{"title":"px、em和rem","slug":"title-9","date":"2017-05-23T14:06:40.000Z","updated":"2017-06-06T09:58:06.395Z","comments":true,"path":"2017/05/23/title-9/","link":"","permalink":"http:\\\\hexin.life/2017/05/23/title-9/","excerpt":"","text":"偶然遇到一个原生JS去除 className 的技巧 Element.className.replace(‘testClassName’, ‘realClassName’); px px : 相对长度单位。像素px是相对于显示器屏幕分辨率而言的。 特点 : IE无法调整那些使用px作为单位的字体大小； 国外的大部分网站能够调整的原因在于其使用了 em 或 rem 作为字体单位； Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。emem是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。 em的值并不是固定的； em会继承父级元素的字体大小。 123456789101112html &#123; font-size: 20px; /* 20px */&#125; .level-1&#123; font-size: 0.5em; /* 10px */&#125; .level-2&#123; font-size: 2em; /* 20px */&#125;.level-3 &#123; font-size: 0.5em; /* 10px */&#125; rem rem是CSS3新增的一个相对单位（root em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。123456789101112html &#123; font-size: 20px; /* 20px */&#125; .level-1&#123; font-size: 0.5rem; /* 10px */&#125; .level-2&#123; font-size: 2rem; /* 40px */&#125;.level-3 &#123; font-size: 0.5rem; /* 10px */&#125; 对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。1p &#123;font-size:14px; font-size:.875rem;&#125; 注意： 选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。px 与 rem 的选择？对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可 。对于需要适配各种移动设备，则使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备。 px、em、rem的区别及介绍-菜鸟教程","categories":[{"name":"css","slug":"css","permalink":"http:\\\\hexin.life/categories/css/"}],"tags":[{"name":"css 前端","slug":"css-前端","permalink":"http:\\\\hexin.life/tags/css-前端/"}]},{"title":"copy小插件","slug":"title-8","date":"2017-05-06T07:12:20.000Z","updated":"2017-06-06T09:54:05.111Z","comments":true,"path":"2017/05/06/title-8/","link":"","permalink":"http:\\\\hexin.life/2017/05/06/title-8/","excerpt":"","text":"hacker 是擅于解决问题的人 copy小插件昨天舍友在写一个报告的时候，准确的来说是从网上搜罗~然而在 360doc 看到了一个满意的，无奈下载不了，也没法复制粘贴，我心想他应该是用 javascript 来禁止复制的，然后默默地给舍友装了一下子~大神勿喷，舍友计算机盲（我不会告诉你他在大学学会的 ctrl+c/v ）。 其实我直接将 chrome 的 javascript 给禁用了，可能我没清理缓存，他还是不能复制，让我很尴尬~ 百度搜到的方法一般都是这个然后我打开开发者工具(F12)这里我们不看源码，一行代码搞定12//document.getElementsByTagName('body')[0].oncopy = null;document.getElementsByTagName('body')[0].oncopy = ''; //获取body元素的oncpoy事件，直接置空~ 虽然很简单，但是还了一个页面它就失效了，可以再次打开开发者工具，再次置空就行了有更好的办法或者一劳永逸的办法~希望大神指教一下，本来是准备写个chrome插件的，但是试了好多方法都没用~改天好好看看文档","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http:\\\\hexin.life/categories/JavaScript/"}],"tags":[{"name":"插件","slug":"插件","permalink":"http:\\\\hexin.life/tags/插件/"}]},{"title":"JS函数闭包","slug":"title-7","date":"2017-04-15T13:03:54.000Z","updated":"2017-05-04T15:37:52.487Z","comments":true,"path":"2017/04/15/title-7/","link":"","permalink":"http:\\\\hexin.life/2017/04/15/title-7/","excerpt":"","text":"程序是写给人看的，顺带能在机器上运行 JS循环闭包：应用一html 结构12345 &lt;p&gt;test0&lt;/p&gt;&lt;p&gt;test1&lt;/p&gt;&lt;p&gt;test2&lt;/p&gt;&lt;p&gt;test3&lt;/p&gt;&lt;p&gt;test4&lt;/p&gt; 抛出问题123456789101112131415/* 抛出问题: 此题的目的是想每次点击对应目标时弹出对应的数字下标 0~4,但实际是无论点击哪个目标都会弹出数字5 问题所在: arr 中的每一项的 onclick 均为一个函数实例(Function 对象),这个函数实例也产生了一个闭包域, 这个闭包域引用了外部闭包域的变量,其 function scope 的 closure 对象有个名为 i 的引用, 外部闭包域的私有变量内容发生变化,内部闭包域得到的值自然会发生改变 */ function myClosure() &#123; var arr = document.getElementsByTagName(\"p\"); for (var i = 0; i &lt; arr.length; i++) &#123; arr[i].onclick = function () &#123; alert(i); //无论点击哪一个均会弹出5 &#125; &#125; &#125; 方法一：12345678910111213解决方法一： 增加若干个对应的闭包域空间( 这里采用的是匿名函数),专门用来存储原先需要引用的内容(下标),不过只限于基本类型(基本类型值传递,对象类型引用传递) function myClosure() &#123; var arr = document.getElementsByTagName(\"p\"); for (var i = 0; i &lt; arr.length; i++) &#123; (function (j) &#123; arr[i].onclick = function () &#123; alert(j); &#125; &#125;)(i); &#125; &#125; 方法二123456789101112/*思路：将下标作为对象属性(name:\"i\",value:i的值)添加到每个数组项(p对象)中*/此时当前 p 对象的 i 属性并不是对循环体的 i 变量的引用,而是一个独立 p 对象的属性,属性值在声明的时候就确定了(基本类型的值都是存在栈中的,当有一个基本类型变量声明其等于另一个基本变量时,此时并不是两个基本类型变量都指向一个值,而是各自有各自的值,但值是相等的) function myClosure() &#123; var arr = document.getElementsByTagName(\"p\"); for (var i = 0; i &lt; arr.length; i++) &#123; arr[i].i = i; arr[i].onclick = function () &#123; alert(this.i); &#125; &#125; &#125; 方法三1234567891011121314151617/*解决思路:与解决办法一有点相似但却有点不太相似.相似点:同样是增加若干个对应的闭包域空间用来存储下标不同点:解决办法一是在新增的匿名闭包空间内完成事件的绑定,而此例是将事件绑定在新增的匿名函数返回的函数上。此时绑定的函数中的 function scope 中的 closure 对象的 引用 arg 是指向将其返回的匿名函数的私有变量 arg*/ function myClosure() &#123; var arr = document.getElementsByTagName(\"p\"); for (var i = 0; i &lt; arr.length; i++) &#123; arr[i].onclick = (function (j) &#123; return function ()&#123; alert(j); &#125; &#125;)(i); &#125; &#125; 方法四12345678910111213 //思路同方法一： function myClosure() &#123; var arr = document.getElementsByTagName(\"p\"); for (var i = 0; i &lt; arr.length; i++) &#123; (function()&#123; var tmp = i; arr[i].onclick = function () &#123; alert(tmp); &#125; &#125;)(); &#125;&#125; 方法五：12345678910//方法五：es6新语法，let为一个块级作用域 function myClosure() &#123; var arr = document.getElementsByTagName(\"p\"); for (let i = 0; i &lt; arr.length; i++) &#123; arr[i].onclick = function () &#123; alert(i); &#125; &#125; &#125; 非循环闭包：应用一：html 结构12345678910&lt;p id=\"help\"&gt;Helpful notes will appear here&lt;/p&gt; &lt;p&gt;E-mail: &lt;input type=\"text\" id=\"email\" name=\"email\"&gt; &lt;/p&gt; &lt;p&gt;Name: &lt;input type=\"text\" id=\"name\" name=\"name\"&gt; &lt;/p&gt; &lt;p&gt;Age: &lt;input type=\"text\" id=\"age\" name=\"age\"&gt; &lt;/p&gt; 闭包解决 input 框聚焦动态提示1234567891011121314151617181920212223242526272829function showHelp(help) &#123; document.getElementById('help').innerHTML = help; &#125; function makeHelpCallback(help) &#123; return function() &#123; //形成闭包 showHelp(help); &#125;; &#125; function setupHelp() &#123; var helpText = [&#123; 'id': 'email', 'help': 'Your e-mail address' &#125;, &#123; 'id': 'name', 'help': 'Your full name' &#125;, &#123; 'id': 'age', 'help': 'Your age (you must be over 16)' &#125;]; for (var i = 0; i &lt; helpText.length; i++) &#123; var item = helpText[i]; document.getElementById(item.id).onfocus = makeHelpCallback(item.help); &#125; &#125; setupHelp(); 应用二html 结构1234567&lt;p&gt;Some paragraph text&lt;/p&gt;&lt;h1&gt;some heading 1 text&lt;/h1&gt;&lt;h2&gt;some heading 2 text&lt;/h2&gt;&lt;a href=\"#\" id=\"size-12\"&gt;12&lt;/a&gt;&lt;a href=\"#\" id=\"size-14\"&gt;14&lt;/a&gt;&lt;a href=\"#\" id=\"size-16\"&gt;16&lt;/a&gt; css123456789101112131415161718192021222324 body &#123; font-family: Helvetica, Arial, sans-serif; font-size: 12px;&#125;h1 &#123; font-size: 1.5em;&#125;h2 &#123; font-size: 1.2em;&#125;```javascript function makeSizer(size) &#123; return function() &#123; document.body.style.fontSize = size + 'px'; &#125;; &#125; var size12 = makeSizer(12); var size14 = makeSizer(14); var size16 = makeSizer(16); document.getElementById('size-12').onclick = size12; document.getElementById('size-14').onclick = size14; document.getElementById('size-16').onclick = size16; From: 闭包-MDN 9种办法解决JS循环闭包面试经典题之for循环","categories":[],"tags":[]},{"title":"HTML 5 Web 存储及WEB应用缓存","slug":"title-6","date":"2017-04-15T12:51:20.000Z","updated":"2017-04-18T11:54:03.333Z","comments":true,"path":"2017/04/15/title-6/","link":"","permalink":"http:\\\\hexin.life/2017/04/15/title-6/","excerpt":"","text":"俩种在客户端储存数据的方法 localStorage - 没有时间限制的数据存储 sessionStorage - 针对 session 的数据存储 之前这些都是由cookie完成的，但是cookie不适合大量数据的存储，因为他们由每个服务器的请求来传递，使得cookie速度慢而且效率不高。 在HTML5中，数据不是由每个服务器请求来传递的，而是只有在请求时使用数据，使得在不影响网站性能的情况下存储大量数据。对于不同的网站，sh数据存储于不同的区域，而且一个网站只能访问其自身的数据。HTML5 通过JavaScript来存储和访问数据。 #localStorage 方法 例子对用户访问页面的次数进行计数： 1234567891011&lt;script type=\"text/javascript\"&gt;if (localStorage.pagecount) &#123; localStorage.pagecount=Number(localStorage.pagecount) +1; &#125;else &#123; localStorage.pagecount=1; &#125;document.write(\"Visits \"+ localStorage.pagecount + \" time(s).\");&lt;/script&gt; sessionStorage 方法 sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。 对用户在当前 session 中访问页面的次数进行计数1234567891011&lt;script type=\"text/javascript\"&gt;if (sessionStorage.pagecount) &#123; sessionStorage.pagecount=Number(sessionStorage.pagecount) +1; &#125;else &#123; sessionStorage.pagecount=1; &#125;document.write(\"Visits \"+sessionStorage.pagecount+\" time(s) this session.\");&lt;/script&gt; HTML 5 应用程序缓存 使用 HTML5，通过创建 cache manifest 文件，可以轻松地创建 web 应用的离线版本。 什么是应用程序缓存（Application Cache）？ HTML5 引入了应用程序缓存，这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问。应用程序缓存为应用带来三个优势： 离线浏览：用户可在应用离线时使用它们 速度：已缓存资源加载得更快 减少服务器负载：浏览器将只从服务器下载更新过或更改过的资源。 浏览器支持 所有主流浏览器均支持应用程序缓存，除了Internet Explorer。 如需启用应用程序缓存，请在文档的 标签中包含 manifest 属性：1234&lt;!DOCTYPE HTML&gt;&lt;html manifest=\"demo.appcache\"&gt;//something&lt;/html&gt; 每个指定了 manifest 的页面在用户对其访问时都会被缓存。如果未指定 manifest 属性，则页面不会被缓存（除非在 manifest 文件中直接指定了该页面）。manifest 文件的建议的文件扩展名是：”.appcache”。请注意，manifest 文件需要配置正确的 MIME-type，即 “text/cache-manifest”。必须在 web 服务器上进行配置。 Manifest 文件manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。manifest 文件可分为三个部分： CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存 12NETWORK:login.asp 2.NETWORK ：在此标题下列出的文件需要与服务器的连接，且不会被缓存 12345NETWORK: # NETWORK 小节规定文件 \"login.asp\" 永远不会被缓存，且离线时是不可用的：login.asp /*------------------------------*/NETWORK:* #可以使用星号来指示所有其他资源/文件都需要因特网连接： 3. FALLBACK：在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面） 12FALLBACK:/html5/ /404.html #第一个 URI 是资源，第二个是替补。 HTML5 Web应用程序缓存-w3school","categories":[],"tags":[{"name":"[object Object]","slug":"object-Object","permalink":"http:\\\\hexin.life/tags/object-Object/"}]},{"title":"cookie和session","slug":"title-5","date":"2017-04-15T05:53:19.000Z","updated":"2017-04-18T11:53:51.330Z","comments":true,"path":"2017/04/15/title-5/","link":"","permalink":"http:\\\\hexin.life/2017/04/15/title-5/","excerpt":"相信你所相信的，坚持你所坚持的 cookies HTTP 是一个无状态协议，所以客户端每次发出请求时，下一次请求无法得知上一次请求所包含的状态数据，如何能把一个用户的状态数据关联起来呢？即大多都是利用 cookie、session 实现。如浏览器自动保存密码，记住登录状态，网页换肤，新手引导等下次不再提醒功能（我就说我以前换网吧玩总得去禁用那些引导）。比如在淘宝的某个页面中，你进行了登陆操作。当你跳转到商品页时，服务端如何知道你是已经登陆的状态？因此产生了 cookie 来解决这门问题。","text":"相信你所相信的，坚持你所坚持的 cookies HTTP 是一个无状态协议，所以客户端每次发出请求时，下一次请求无法得知上一次请求所包含的状态数据，如何能把一个用户的状态数据关联起来呢？即大多都是利用 cookie、session 实现。如浏览器自动保存密码，记住登录状态，网页换肤，新手引导等下次不再提醒功能（我就说我以前换网吧玩总得去禁用那些引导）。比如在淘宝的某个页面中，你进行了登陆操作。当你跳转到商品页时，服务端如何知道你是已经登陆的状态？因此产生了 cookie 来解决这门问题。 服务器向客户端发送 cookies 通常使用 HTTP 协议规定的 set-cookie 头操作。 规范规定 cookies 的格式为vlaue = name 格式，且必须包含这部分 浏览器将 cookies 保存 每次浏览器向服务器发送请求都会发送 cookies cookies参数 httpOnly:浏览器下不允许脚本操作document.cookies去更改 cookies,一般情况下设置为 true，可以避免 xss 攻击拿到 cookies path: 表示 cookies 影响到的路径，匹配该路径才会发送 cookies expires、maxAge: 告诉浏览器该 cookies 什么时候过期，采用UTC格式的时间，是 cookies 多久后过期的相对时间。（删除 cookies，在服务端将 maxAge 设为0，或者在客户端将 expires 设为一个过去的时间），如果不设置这俩个选项，会产生 session cookies，session cookies 是即时的，当用户关闭浏览器时，会自动清除，一般用来保存 session 的 session_id.cookies的缺点 大小和数目被确定，浏览器对一个域的cookies有上限要求，且每个 cookies 大小不得超过 4kb。 存在安全性问题，容易被人拦截。（考虑到安全方面，应使用较安全的session） 需要指定域，不能够跨域 cookies 数据太多会影响传输效率，浪费带宽 有些浏览器禁用 cookies 或者部分手机不支持 cookies广告商可以通过cookies了解到用户经常访问哪些网站，进而提供相应的广告等。 session cookies 虽然使用方便,但是 cookies 中所有的数据都可以在客户端被更改，数据很容易被伪造，因此一些重要的数据不能放cookies 中，cookies 数据太多也会影响传输效率，因此产生了 session，session 数据保留在服务器端。(但是当访问增多，会比较占用服务器的性能，考虑到性能方面，减少使用session) 当你浏览一个网页时，服务端随机产生一个 1024 比特长的字符串，然后存在你 cookie 中的 connect.sid字段中。当你下次访问时，cookie 会带有这个字符串，然后浏览器就知道你是上次访问过的某某某，然后从服务器的存储中对比取出上次记录在你身上的数据。由于字符串是随机产生的，而且位数足够多，所以也不担心有人能够伪造。 session 的运作通过一个 session_id 来进行。session_id 通常是存放在客户端的 cookie 中，用户提交页面时，会将这一 SessionID 提交到服务器端，来存取 Session 数据。此时用户禁用cookies，session也会失效。 但是session并不是完全依赖cookie，服务器可以通过URL重写的方式来传递session_id. ———- &gt; 整理自： cookies 和 session cookies 和 session 的详解 cookie 和 session 的机制与安全 认识cookie与session的区别与应用","categories":[{"name":"前端","slug":"前端","permalink":"http:\\\\hexin.life/categories/前端/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"http:\\\\hexin.life/tags/HTTP/"}]},{"title":"每个人都需要的中文排版指南（转）","slug":"title-4","date":"2017-04-11T12:06:00.000Z","updated":"2017-05-10T16:26:39.135Z","comments":true,"path":"2017/04/11/title-4/","link":"","permalink":"http:\\\\hexin.life/2017/04/11/title-4/","excerpt":"前几天被朋友吐槽排版太烂了，今天偶然看到这篇文章，然后就转载了过来，由于转载原因可能文章没有原文格式美观，有兴趣请点击链接查看原文。 原文转载自stormzhang","text":"前几天被朋友吐槽排版太烂了，今天偶然看到这篇文章，然后就转载了过来，由于转载原因可能文章没有原文格式美观，有兴趣请点击链接查看原文。 原文转载自stormzhang 相信你所相信的，坚持你所坚持的 每个人都需要的中文排版指南 之前有不少人在我公众号留言，说看我的排版很舒服，求指导。 我不是一个专业的写字人，我是程序员出身，在写代码的时候有点小洁癖，尽量会把每个细节做到更好，所以我在公众号写作的时候一样会注重每个细节，我认为排版是对写作最基本的要求，所以当我决定要在公众号写作的时候，就非常在意排版，并且一直在改进， 可惜的是，我看到无数不管是写博客还是写公众号的作者，从不会注意自己的排版，有时候看到一篇好的文章，如果排版很烂，会觉得很可惜。 公众号「小道消息」的作者 Fenng曾不止一次强调排版的重要性，对此我也非常认同，任何说不拘小节，注重内容就行了的反驳都是借口，我自己在我的小密圈中也一直强调排版的重要性，很多圈友发布的动态无一排版都太烂，为此，我在小密圈中写下了这么一篇排版指南，真心希望所有的写字人都能注意下自己的排版。 这篇文章适用于所有编辑、作家、撰稿人、公众号作者、博主等，甚至适合所有人，因为人的一生难免避免不了写作。 1. 空格 我每次看到网页上的中文字和英文、数字、符号挤在一起，就会坐立不安，忍不住想在他们之间加个空格。 「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。」 中英文之间需要加空格 eg. 大家可以搜索公众号 AndroidDeveloper 或者 googdev 关注我。 中文与数字之间需要加空格 eg. 不知不觉，我都快 30 岁了。 数字与单位之间需要加空格 eg. 我有一块 20 TB 的硬盘，鬼知道我是怎么用完的。 完整的英文整句时标点与单词之间需要加空格 eg. Stay hungry, stay foolish. 但是也有一些例外。 度的标志、百分号不加空格 eg. 今天气温有 30° 的高温。 eg. 据统计，关注公众号 AndroidDeveloper 的读者中有 80% 是长得好看的。 全角标点与其他字符之间不加空格 eg. 大家好，我是 stormzhang，请多多关照。 2. 标点 说到标点，不得不说下全角和半角，很多人可能不了解全角和半角的概念，这里顺便介绍下。 全角和半角是英文和中文的编码规范不同遗留下的问题，简单来说，全角占两个字节，半角占一个字节，你可以理解成中文汉字是全角，英文字母是半角，不过半角全角主要是针对标点符号来说的，中文标点占两个字节，英文标点占一个字节。体现在排版上的差异就是，全角字符屏幕打印宽度是两个，而半角字符屏幕打印宽度是一个，如中文逗号和英文逗号他们的显示分别是「，」和「,」。 使用全角中文标点，中文排版中所有的标点都应该使用中文全角中文标点 eg. 大家好，我是 stormzhang。 遇到英文整句、特殊名词时使用半角标点。 eg. 乔布斯说过：「Stay hungry, stay foolish.」 eg. Facebook, Inc. 使用直角引号「我国国家标准要求弯引号，但是个人建议在新媒体排版时使用直角引号」。 eg. 你竟然不知道「帅比张」？ 如果引号再使用引号使用直角双引号。 eg. 我质问他，「你难道忘记『帅比张』了么？」 3. 其他 除以上之外，还有一些其他标准推荐大家使用的。 英文名词首字母尽量大写 eg. Google、Android、Facebook 专有名词使用正确的大小写 eg. GitHub、iOS、iPhone 6s、MacBook Pro 首行不要缩进 这点可能有人不同意，但是我要在这里解释下，在说明之前我们必须弄明白「首行缩进」的目的是什么。 「每段之前空两格」是我们从小学写作文就养成的习惯，也是正式文体的格式要求，其目的是为了区分自然段。 但是像我们现在接触的阅读，都是没有固定的格式要求的，如微信公众号、电子文档等，所以大家一般都采用「空出一行」进行自然段与自然段之间的区分，这种写作方式非常省事，而且很整齐。 所以，我认为这种应该是最科学的方式，只要没有明确的格式要求，写作的排版无须首行缩进。 最后，你可能会问，以上这些原则是业界标准么？我不敢保证，但是你不妨看下 「Apple 中国官网」、「Microsoft中国官网」、公众号「小道消息」、「MacTalk」等的排版，基本都是使用以上排版标准。","categories":[{"name":"其他","slug":"其他","permalink":"http:\\\\hexin.life/categories/其他/"}],"tags":[{"name":"转载","slug":"转载","permalink":"http:\\\\hexin.life/tags/转载/"}]},{"title":"瀑布流","slug":"title-3","date":"2017-04-09T15:09:45.000Z","updated":"2017-04-15T13:15:20.135Z","comments":true,"path":"2017/04/09/title-3/","link":"","permalink":"http:\\\\hexin.life/2017/04/09/title-3/","excerpt":"相信你所相信的，坚持你所坚持的 好久没有写博客了，学习途中经常遇到好多小问题，感觉还是动手太少了，不过感觉好多视频中老师的代码是错误的，也不知道他们是怎么运行成功的，调试+百度了好久才修正过来，不过感觉不错，可能是故意的吧，为了让我们自己动手查询，今天实现了一下瀑布流的布局就发在这里吧，具体的注释我都放在代码里了。","text":"相信你所相信的，坚持你所坚持的 好久没有写博客了，学习途中经常遇到好多小问题，感觉还是动手太少了，不过感觉好多视频中老师的代码是错误的，也不知道他们是怎么运行成功的，调试+百度了好久才修正过来，不过感觉不错，可能是故意的吧，为了让我们自己动手查询，今天实现了一下瀑布流的布局就发在这里吧，具体的注释我都放在代码里了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt; &lt;title&gt;瀑布流&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;padding: 0;margin:0;&#125; #main&#123; position: relative; &#125; .pin&#123; padding: 15px 0 0 15px; float:left; &#125; .box&#123; padding: 10px; border:1px solid #ccc; box-shadow: 0 0 6px #ccc; border-radius: 5px; &#125; .box img&#123; width:162px; height:auto; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"main\"&gt; &lt;div class=\"pin\"&gt; &lt;div class=\"box\"&gt; &lt;img src=\"./images/1.jpg\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- ...这里由于结构都一样就直接省去了 --&gt; &lt;div class=\"pin\"&gt; &lt;div class=\"box\"&gt; &lt;img src=\"./images/1.jpg\"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; window.onload = function () &#123; waterFall(\"main\",\"pin\"); &#125; //模拟从后台传来的json数据 var dataInt=&#123;'data':[&#123;'src':'1.jpg'&#125;,&#123;'src':'2.jpg'&#125;,&#123;'src':'3.jpg'&#125;,&#123;'src':'5.jpg'&#125;,&#123;'src':'5.jpg'&#125;,&#123;'src':'4.jpg'&#125;,&#123;'src':'6.jpg'&#125;,&#123;'src':'6.jpg'&#125;,&#123;'src':'16.jpg'&#125;,&#123;'src':'16.jpg'&#125;,&#123;'src':'16.jpg'&#125;,&#123;'src':'6.jpg'&#125;]&#125;; //瀑布流滚动加载 window.onscroll = function () &#123; if(checkScroll())&#123; var oParent = document.getElementById(\"main\"); // 将后台传来的数据渲染进当前页面尾部 for( var i = 0; i &lt; dataInt.data.length; i++)&#123; //创建最外层div var oPin = document.createElement('div'); oPin.className = 'pin'; oParent.appendChild(oPin); //创建图片的盒子 var oBox = document.createElement('div'); oBox.className = 'box'; oPin.appendChild(oBox); //创建图片 var oImg = document.createElement('img'); oImg.src = \"./images/\" + dataInt.data[i].src;//获取传来的json中的图片 oBox.appendChild(oImg); &#125; waterFall(\"main\",\"pin\"); //将传入的图片进行瀑布流排序 &#125; &#125; //检测是否具备加载条件--&gt;当最后一个盒子出现在视线中时开始加载 function checkScroll () &#123; //获取整个大盒子 var oParent = document.getElementById(\"main\"); //获取所有图片 var oBoxs = getByClass(oParent,\"pin\"); // var oBoxs = oParent.getElementsByClassName(\"pin\"); //获取最后一个盒子的高度 var lastBoxH = oBoxs[oBoxs.length - 1].offsetTop ; //获取滚动距离 var scrollTop = document.body.scrollTop || document.documentElement.scrollTop; //获取浏览器窗口的高度 // var clienHeight = document.documentElement.clientHeight; var clientHeight = document.body.clientHeight || document.documentElement.clientHeight console.log(scrollTop); console.log(clientHeight); return (lastBoxH &lt; clientHeight + scrollTop) ? true : false; //判断滚动的高度加浏览器的高度是否高于最后一个盒子的高度，即盒子是否出现在视线中 &#125; function waterFall( parent, pin ) &#123; //获取整个大盒子 var oParent = document.getElementById(parent); //获取所有图片 var oBoxs = getByClass(oParent,\"pin\"); // var oBoxs = oParent.getElementsByClassName(\"pin\"); // 获取每个盒子的宽度 var oBoxw = oBoxs[0].offsetWidth; //获取每一行一共有几个盒子，用Math.floor()向下取整 var cols = Math.floor(document.documentElement.clientWidth / oBoxw); //设置每个图片盒子的宽度都一致并居中显示 oParent.style.cssText = \"width:\" + oBoxw*cols + \"px; margin:0 auto;\"; //存放每一列盒子高度的数组 var boxArr = []; for(var i = 0; i &lt; oBoxs.length; i++)&#123; if( i &lt; cols)&#123;//遍历盒子，将盒子的高度放入数组 boxArr.push(oBoxs[i].offsetHeight); &#125;else&#123; //调整下一列盒子的位置 var minH = Math.min.apply(null,boxArr); //找到数组中的最小值 var minIndex = getMinIndex(boxArr,minH); // 获取高度最低的索引值 oBoxs[i].style.position = \"absolute\"; oBoxs[i].style.top = minH + \"px\"; oBoxs[i].style.left = minIndex*oBoxw + \"px\"; //盒子左边的距离等于最低盒子的索引值*每一个盒子的宽度 /* oBoxs[i].style.left = oBoxs[minIndex].offsetWidth + \"px\"; //--&gt;盒子左边的距离等于最低高度盒子的左边距离 */ //此时剩余盒子会绝对定位到该位置，因此我们需要去修改数组中最低的高度 boxArr[minIndex] += oBoxs[i].offsetHeight; &#125; &#125; &#125; // 获取索引值,遍历取到和最小值相等的值 function getMinIndex ( boxArr, minH ) &#123; for(var i = 0; i &lt; boxArr.length; i++)&#123; if(boxArr[i] == minH)&#123; return i; &#125; &#125; &#125; //获取className function getByClass ( parent, cls ) &#123; var oParent = document.getElementById(\"main\"); var oElements = oParent.getElementsByTagName(\"*\"); var boxArr = new Array(); for(var i = 0; i &lt; oElements.length; i++) &#123; if(oElements[i].className == cls)&#123; boxArr.push(oElements[i]); &#125; &#125; return boxArr; &#125; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"前端","slug":"前端","permalink":"http:\\\\hexin.life/categories/前端/"}],"tags":[{"name":"瀑布流","slug":"瀑布流","permalink":"http:\\\\hexin.life/tags/瀑布流/"}]},{"title":"CSS学习笔记(Placeholder及CSS_hack)","slug":"title-2","date":"2017-03-31T15:09:45.000Z","updated":"2017-04-15T05:39:55.256Z","comments":true,"path":"2017/03/31/title-2/","link":"","permalink":"http:\\\\hexin.life/2017/03/31/title-2/","excerpt":"相信你所相信的，坚持你所坚持的 IE8以下图片出现蓝色边框123img&#123; border:0; /*或者border:none;*/ &#125; 如何使文本以大写字母开头？1text-transform:capitalize; 强制设置以最新版本IE渲染12&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt; //我写的页面在IE8之下全部乱掉了，用这个强制用最新版本的IE渲染 chrome浏览器点击input框时出现边框12//虽然我觉得还挺好看的--! input&#123; outline:none; //outline:0; &#125;","text":"相信你所相信的，坚持你所坚持的 IE8以下图片出现蓝色边框123img&#123; border:0; /*或者border:none;*/ &#125; 如何使文本以大写字母开头？1text-transform:capitalize; 强制设置以最新版本IE渲染12&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt; //我写的页面在IE8之下全部乱掉了，用这个强制用最新版本的IE渲染 chrome浏览器点击input框时出现边框12//虽然我觉得还挺好看的--! input&#123; outline:none; //outline:0; &#125; IE8及以下不支持Placeholder解决方案（基于JQ）1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!doctype html&gt; &lt;html&gt; &lt;header&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=\"text/css\"&gt; *&#123;margin:0;padding:0;&#125; form &#123;margin:50px;&#125; input &#123;display:block;margin:0 0 6px 0;&#125; &lt;/style&gt; &lt;/header&gt; &lt;body&gt; &lt;form&gt; 用户名：&lt;input name=\"name\" placeholder=\"请输入用户名\"/&gt; 密码：&lt;input name=\"password\" placeholder=\"请输入登陆密码\"/&gt; &lt;/form&gt; &lt;script type=\"text/javascript\" src=\"jquery-1.11.1.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; $(function()&#123; function placeholderSupport() &#123; // 判断浏览器是否支持 placeholder return 'placeholder' in document.createElement('input'); &#125; if(!placeholderSupport())&#123; $(document).on('focus', '[placeholder]',function() &#123; var input = $(this); if (input.val() == input.attr('placeholder')) &#123; input.val(''); input.removeClass('placeholder'); &#125; &#125;); $(document).on('blur', '[placeholder]',function() &#123; var input = $(this); if (input.val() == '' || input.val() == input.attr('placeholder')) &#123; input.addClass('placeholder'); input.val(input.attr('placeholder')); &#125; &#125;); $('[placeholder]').blur(); &#125;; &#125;); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 常见CSS hack不管是什么方法，书写的顺序都是Firefox的写在前面，IE7的写在中间，IE6的写在最后（1）方式一 条件注释法 只在IE下生效 123&lt;!--[if IE]&gt; 这段文字只在IE浏览器显示 &lt;![endif]--&gt; 只在IE6下生效 123&lt;!--[if IE 6]&gt; 这段文字只在IE6浏览器显示 &lt;![endif]--&gt; 只在IE6以上版本生效 123&lt;!--[if gte IE 6]&gt; 这段文字只在IE6以上(包括)版本IE浏览器显示 &lt;![endif]--&gt; 只在IE8上不生效 123&lt;!--[if ! IE 8]&gt; 这段文字在非IE8浏览器显示 &lt;![endif]--&gt; 非IE浏览器生效 123&lt;!--[if !IE]&gt; 这段文字只在非IE浏览器显示 &lt;![endif]--&gt; （2）方式二 类内属性前缀法 在标准模式中： “-″减号是IE6专有的hack “\\9″ IE6/IE7/IE8/IE9/IE10都生效 “\\0″ IE8/IE9/IE10都生效，是IE8/9/10的hack “\\9\\0″ 只对IE9/IE10生效，是IE9/10的hack IE6能识别 *，但不能识别 !important IE7能识别 *，也能识别!important FF不能识别 *，但能识别!important,下划线_ IE6支持下划线 IE7和firefox均不支持下划线 （3）CSS hack方式三：选择器前缀法 12345678*html //*前缀只对IE6生效 *+html //*+前缀只对IE7生效 @media screen\\9&#123;...&#125; //只对IE6/7生效 @media \\0screen &#123;body &#123; background: red; &#125;&#125; //只对IE8有效 @media \\0screen\\,screen\\9&#123;body &#123; background: blue; &#125;&#125; //只对IE6/7/8有效 @media screen\\0 &#123;body &#123; background: green; &#125;&#125; //只对IE8/9/10有效 @media screen and (min-width:0\\0) &#123;body &#123; background: gray; &#125;&#125; //只对IE9/10有效 @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) &#123;body &#123; background: orange; &#125;&#125; //只对IE10有效等等 以: “ #demo {width:100px;} “为例; 1234#demo &#123;width:100px;&#125; /*被FIREFOX,IE6,IE7执行.*/ *html #demo &#123;width:120px;&#125; /*会被IE6执行,之前的定义会被后来的覆盖,所以#demo的宽度在IE6就为120px; */ *+html #demo &#123;width:130px;&#125; /*会被IE7执行*/ 所以最后,#demo的宽度在三个浏览器的解释为: FIREFOX:100px; ie6:120px; ie7:130px; IE8 最新css hack： 1234\"\\9\" 例:\"border:1px\\9;\" //这里的\"\\9\"可以区别所有IE和FireFox.（只针对IE9 Hack） \"\\0\" //IE8识别，--&gt;IE6、IE7不能. \"*\" //IE6、IE7可以识别.--&gt;IE8、FireFox不能. \"_\" //IE6可以识别\"_\",--&gt;IE7、IE8、FireFox不能. Placeholder源自网上资料，点击标题即进入原网址，本人新手，没怎么用过hack，从百度百科整理一部分，作为以后查询方便，如果有什么问题，希望大神多多指点。","categories":[{"name":"前端","slug":"前端","permalink":"http:\\\\hexin.life/categories/前端/"}],"tags":[{"name":"CSS学习笔记","slug":"CSS学习笔记","permalink":"http:\\\\hexin.life/tags/CSS学习笔记/"}]},{"title":"HEXO+GitHub搭建个人博客","slug":"title-1","date":"2017-03-28T15:15:03.000Z","updated":"2017-06-06T09:25:34.820Z","comments":true,"path":"2017/03/28/title-1/","link":"","permalink":"http:\\\\hexin.life/2017/03/28/title-1/","excerpt":"","text":"白日做的梦要靠自己追 一直想有一个自己的博客，前段时间看到HEXO+GitHub傻瓜式搭建，就利用周末花了俩天时间搭建了一个自己的博客。花俩天时间是因为走了太多弯路~搞了太多错误，在这里把流程梳理一下，希望大家不要像我一样走弯路，顺便填入第一篇博客0.0，没有基础的同学也可以利用它搭建自己的博客，我觉得博客不一定要写技术，用来当做自己的私人空间也是很不错的。这里特别感谢Chasen’s ，帮我解决了好多问题。 关于HEXO hexo是一款基于Node.js的静态博客框架，可以生成静态文件并且一键部署到 github pages 上，并且他可以使用 markdown 来编写文章，十分方便。 搭建前环境准备安装Node.js进入官网，他会自动提取你的电脑型号，有俩个版本下载，左边的是稳定版，右边的是一直更新的前沿版，我们这里随便选择一个就好了，我个人选择了右边的 直接下载即可，只有13MB大小，然后一路默认安装就好了 安装好以后按 win+r 打开运行输入CMD（开始栏输入CMD也一样） 1输入 node -v 输出版本号即安装成功，我这里是v7.6.0版本 接下来安装git同上进入git 然后点击下载然后默认安装即可（30MB左右），安装好以后右键会有 git gui heregit bush here 不懂git命令也没关系，跟着命令走就可以了，但是学习会对开发很有帮助的，推荐几个网址吧： Git-Reference(官网首选,当然是英文的) git-简易指南（中文简易指南，基本命令够用了） git-常用的基础命令 然后是编辑器Sublime Text（多选） VS Code 微软新发编辑器，虽然是新发，但是功能异常强大Atom 由GitHub打造的属于“ 21 ” 世纪的代码编辑器Notepad++ 一款强大的编辑器 我这里用的是sublime text3，很有程序员风格的编辑器，很多插件与快捷键，特别好用，推荐一下。（中文支持不太好，用习惯就好了）。不用sublime也可以，如果熟悉vim的话可以直接用vim编辑 注册github 对于没有GitHub的同学，在这里申请一个GitHub账号吧，这个很简单，直接注册，邮箱验证就好了。 申请好以后新建一个自己的仓库 这里注意上面俩个箭头， 命名必须要一致，后面的名字要以 github.io 结尾 我当初就因为这里搞错了，导致一直到下面的步骤得重新来，这里先把hexo与github联系起来再说 把git与你的github联系起来 右键git bush here 输入命令绑定你的邮箱和名字，这里是我的~替换成自己的即可 接下来生成秘钥1ssh-keygen -t rsa -C \"XXX@XXX.com\" 这里C是大写！！！ 如图然后连续按回车即可然后在#user_id/.ssh目录下会生成两个文件，id_rsa.pub 和 id_rsa. 利用编辑器打开rsa文件，将里面的内容copy，复制在github，在SSH设置页面添加刚才的SSH文件也就是id_rsa.pub的内容即可。 这里会验证一下github的密码 最后来验证一下：1ssh -T git@github.com 如果成功他让你输入yes然后会返回一个成功的信息 安装hexo 不要着急，马上就可以看到属于你的博客了~ 1npm install hexo-cli -g 然后可以利用 Git 一路 cd 到 hexo 的安装目录，或者进去目录，右键 git bush here 即可（hexo init 的文件夹必须为空文件夹） 目录初始化完毕后，在根目录执行下面命令安装提交的命令。1npm install hexo-deployer-git --save-dev 然后依次执行 hexo init # 初始化 hexo g # 完整命令为hexo generate，生成静态文件 hexo s #完整命令为hexo server，打开本地服务 日后方便提交和防止出错 hexo clean #清理临时文件 hexo d -g #快速生成并提交 打开本地服务，这时候打开浏览器输入 http://localhost:4000 看看你博客页面吧~官方默认会有一篇 hello world，当然 ，现在还只是本地的。只有你自己能看到 将静态页面提交到github 此时就用到了编辑器，打开_config.yml文件，直接拖入编辑器即可自行修改 没有编辑器的同学， 可以cd(进入的意思)到hexo的文件夹下，输入 vim _config.yml 然后直接移动下图的位置，按键盘“ a ”，来插入文本，然后就可以修改了，修改完之后按 ESC ，然后按“ Shif ” 加 “ ：”，输入“ wq ”，意思是保存加退出，如果直接退出就输入“ q ”即可。 然后修改如下：将repo后面的内容改成自己的(没有独立新建分支的话branch可以不写) 1234deploy: type: git repo: git@github.com:yourself/yourself.github.io.git branch: master 提交到 github1hexo d -g #组合命令，命令等同于hexo g 再 hexo d 这时候 github 已经有了你提交的内容( public 文件夹下的内容 ), 然后输入你开始的 github 仓库名字，例如 *.github.io 就可以看到你的博客页面了… 关于主题安装主题有好多种，这里我推荐NEXT,简洁，大方，支持多语言，一句代码即可下载NEXT最新版，如果需要其他的可以上官网查找喜欢的，添加方式是一样的。 1git clone https://github.com/iissnan/hexo-theme-next themes/next 然后打开 _config.yml文件，如图找到theme修改为next即可 我这里推荐一下yilia。更多好看主题可以去官网搜寻（也可以自己写哦~）。 关于文章发布1hexo new \"title\" // hexo new \"中文标题\" 注意这里如果发布文章是中文的话，最好标题中出现中文：hexo new “中文标题” （不然可能会出现文章乱码）自动生成md文件在 source/_post 下，也可以自己创建为 .md ，注意编码格式用 UTF-8 同样是防止乱码。 然后打开你的 title-n.md 文件编写文章就可以了，文章需要是 markdown 格式，可以用 markdown 格式的编辑器编写，也可以找在线的 markdown 编辑器，例如 CSDN ，马克飞象等等…可以离线使用，支持导出为 MD ，HTML 格式，很方便。关于添加图片，我推荐极简图床，简单方便。 hexo 常用命令( # 后为注释 ) hexo init # 初始化hexo clean # 清理临时文件hexo g # 完整命令为 hexo generate ，生成静态文件hexo s # 完整命令为 hexo server ，打开本地服务hexo d # 完整命令为 hexo deploy ，用于将本地文件发布到 github 上hexo new “postName” # 新建文章hexo new page “pageName” # 新建页面hexo help # 帮助 有什么建议或者改正，希望大家在下面留言，期望同大家共同交流，进步。 另外推荐几篇大神的 blog ： hexo 系列教程 HEXO 官方文档 Hexo 作者博客 hexo 你的博客|不如 使用 hexo 搭建个人博客 极客学院提供的中文文档 帮了我很大忙的 Chasen’s hexo + github 搭建过程总结 手把手教你使用 hexo+github 搭建个人博客 搭建一个免费的，无限流量的 blog（阮一峰） 相信你所相信的，坚持你所坚持的","categories":[{"name":"hexo","slug":"hexo","permalink":"http:\\\\hexin.life/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http:\\\\hexin.life/tags/hexo/"}]}]}